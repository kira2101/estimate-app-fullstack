#!/usr/bin/env python3
"""
–¢–µ—Å—Ç edge cases –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –ø—Ä–æ—Ä–∞–±–æ–≤
"""

import requests
import json

def test_edge_cases():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ä–∞–±–æ–≤"""
    
    print("üß™ –¢–ï–°–¢: Edge Cases –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ä–∞–±–æ–≤")
    print("=" * 60)
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
    manager_email = "manager@example.com"
    foreman_email = "foreman@example.com"
    password = "password123"
    base_url = "http://127.0.0.1:8000/api/v1"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        response = requests.post(f"{base_url}/auth/login/", 
                                json={"email": manager_email, "password": password})
        manager_token = response.json()["token"]
        
        response = requests.post(f"{base_url}/auth/login/", 
                                json={"email": foreman_email, "password": password})
        foreman_token = response.json()["token"]
        
        headers_manager = {"Authorization": f"Bearer {manager_token}"}
        headers_foreman = {"Authorization": f"Bearer {foreman_token}"}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        response = requests.get(f"{base_url}/users/", headers=headers_manager)
        users = response.json()
        foreman_user = next((u for u in users if u["email"] == foreman_email), None)
        
        response = requests.get(f"{base_url}/projects/", headers=headers_manager)
        projects = response.json()
        project_id = projects[0]["project_id"]
        
        response = requests.get(f"{base_url}/statuses/", headers=headers_manager)
        statuses = response.json()
        draft_status = next((s for s in statuses if s["status_name"] == "–ß–µ—Ä–Ω–æ–≤–∏–∫"), None)
        
        print("‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
        
        # –¢–ï–°–¢ 1: –ü—Ä–æ—Ä–∞–± —Å–æ–∑–¥–∞–µ—Ç —Å–º–µ—Ç—É —Å–µ–±–µ (—Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å)
        print("\nüìù –¢–ï–°–¢ 1: –ü—Ä–æ—Ä–∞–± —Å–æ–∑–¥–∞–µ—Ç —Å–º–µ—Ç—É —Å–µ–±–µ")
        estimate_data = {
            "project_id": project_id,
            "status_id": draft_status["status_id"],
            # –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º foreman_id
            "estimate_number": "–¢–ï–°–¢_–ü—Ä–æ—Ä–∞–±_–°–æ–∑–¥–∞–µ—Ç_–°–µ–±–µ",
            "items": []
        }
        
        response = requests.post(f"{base_url}/estimates/", 
                                json=estimate_data, 
                                headers=headers_foreman)
        
        if response.status_code not in [200, 201]:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
            
        estimate_1 = response.json()
        estimate_1_id = estimate_1["estimate_id"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        response = requests.get(f"{base_url}/estimates/{estimate_1_id}/", headers=headers_foreman)
        details = response.json()
        assigned_foreman_id = details["foreman"]["user_id"] if isinstance(details["foreman"], dict) else details["foreman"]
        
        if assigned_foreman_id != foreman_user["user_id"]:
            print(f"‚ùå –û–®–ò–ë–ö–ê! –ü—Ä–æ—Ä–∞–± –ù–ï –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —Å–≤–æ—é —Å–º–µ—Ç—É")
            return False
            
        print("‚úÖ –ü—Ä–æ—Ä–∞–± –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —Å–≤–æ—é —Å–º–µ—Ç—É")
        
        # –¢–ï–°–¢ 2: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–µ—Ç —Å–º–µ—Ç—É –ë–ï–ó —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ—Ä–∞–±–∞ (fallback)
        print("\nüìù –¢–ï–°–¢ 2: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–µ—Ç —Å–º–µ—Ç—É –ë–ï–ó —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ—Ä–∞–±–∞")
        estimate_data = {
            "project_id": project_id,
            "status_id": draft_status["status_id"],
            # –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º foreman_id
            "estimate_number": "–¢–ï–°–¢_–ú–µ–Ω–µ–¥–∂–µ—Ä_–ë–µ–∑_–ü—Ä–æ—Ä–∞–±–∞",
            "items": []
        }
        
        response = requests.post(f"{base_url}/estimates/", 
                                json=estimate_data, 
                                headers=headers_manager)
        
        if response.status_code not in [200, 201]:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
            
        estimate_2 = response.json()
        estimate_2_id = estimate_2["estimate_id"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–∫ fallback)
        response = requests.get(f"{base_url}/estimates/{estimate_2_id}/", headers=headers_manager)
        details = response.json()
        assigned_foreman_id = details["foreman"]["user_id"] if isinstance(details["foreman"], dict) else details["foreman"]
        
        manager_user = next((u for u in users if u["email"] == manager_email), None)
        if assigned_foreman_id != manager_user["user_id"]:
            print(f"‚ùå –û–®–ò–ë–ö–ê! Fallback –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
            
        print("‚úÖ Fallback —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω")
        
        # –¢–ï–°–¢ 3: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–µ—Ç —Å–º–µ—Ç—É —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º foreman_id
        print("\nüìù –¢–ï–°–¢ 3: –ú–µ–Ω–µ–¥–∂–µ—Ä —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π foreman_id")
        estimate_data = {
            "project_id": project_id,
            "status_id": draft_status["status_id"],
            "foreman_id": 999999,  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
            "estimate_number": "–¢–ï–°–¢_–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π_–ü—Ä–æ—Ä–∞–±",
            "items": []
        }
        
        response = requests.post(f"{base_url}/estimates/", 
                                json=estimate_data, 
                                headers=headers_manager)
        
        if response.status_code not in [200, 201]:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
            
        estimate_3 = response.json()
        estimate_3_id = estimate_3["estimate_id"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ (–¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å fallback –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
        response = requests.get(f"{base_url}/estimates/{estimate_3_id}/", headers=headers_manager)
        details = response.json()
        assigned_foreman_id = details["foreman"]["user_id"] if isinstance(details["foreman"], dict) else details["foreman"]
        
        if assigned_foreman_id != manager_user["user_id"]:
            print(f"‚ùå –û–®–ò–ë–ö–ê! Fallback –ø—Ä–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
            
        print("‚úÖ Fallback –ø—Ä–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º foreman_id —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
        # –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–º–µ—Ç
        print("\nüìù –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–º–µ—Ç –¥–ª—è –ø—Ä–æ—Ä–∞–±–∞")
        
        # –ü—Ä–æ—Ä–∞–± –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—é —Å–º–µ—Ç—É (estimate_1)
        response = requests.get(f"{base_url}/estimates/", headers=headers_foreman)
        foreman_estimates = response.json()
        
        foreman_estimate_ids = [e["estimate_id"] for e in foreman_estimates]
        
        if estimate_1_id not in foreman_estimate_ids:
            print("‚ùå –û–®–ò–ë–ö–ê! –ü—Ä–æ—Ä–∞–± –ù–ï –≤–∏–¥–∏—Ç —Å–≤–æ—é —Å–º–µ—Ç—É")
            return False
            
        if estimate_2_id in foreman_estimate_ids or estimate_3_id in foreman_estimate_ids:
            print("‚ùå –û–®–ò–ë–ö–ê! –ü—Ä–æ—Ä–∞–± –≤–∏–¥–∏—Ç —á—É–∂–∏–µ —Å–º–µ—Ç—ã")
            return False
            
        print("‚úÖ –ü—Ä–æ—Ä–∞–± –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–º–µ—Ç—ã")
        
        # –û—á–∏—Å—Ç–∫–∞
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        for est_id in [estimate_1_id, estimate_2_id, estimate_3_id]:
            requests.delete(f"{base_url}/estimates/{est_id}/", headers=headers_manager)
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï EDGE CASE –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Fallback –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –°—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ") 
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print("‚úÖ –î–æ—Å—Ç—É–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_edge_cases()
    exit(0 if success else 1)