#!/usr/bin/env python
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
sys.path.append('/home/kira/PycharmProjects/Estiamate_app_Gemeni/backend')
django.setup()

from api.models import User, Estimate, EstimateItem
from django.db.models import Q, Sum, F, DecimalField, Value
from django.db.models.functions import Coalesce

def test_foreman_filtering():
    """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ–≤"""
    print("=== –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –î–õ–Ø –ü–†–û–†–ê–ë–û–í ===\n")
    
    # –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        manager = User.objects.filter(role__role_name='–º–µ–Ω–µ–¥–∂–µ—Ä').first()
        foreman = User.objects.filter(role__role_name='–ø—Ä–æ—Ä–∞–±').first()
        
        if not manager:
            print("‚ùå –ú–ï–ù–ï–î–ñ–ï–† –ù–ï –ù–ê–ô–î–ï–ù")
            return
        if not foreman:
            print("‚ùå –ü–†–û–†–ê–ë –ù–ï –ù–ê–ô–î–ï–ù") 
            return
            
        print(f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager.email}")
        print(f"üë∑‚Äç‚ôÇÔ∏è –ü—Ä–æ—Ä–∞–±: {foreman.email}\n")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–º–µ—Ç—ã
        print("=== –°–ú–ï–¢–´ ===")
        all_estimates = Estimate.objects.all()
        print(f"üìä –í—Å–µ–≥–æ —Å–º–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ: {all_estimates.count()}")
        
        manager_estimates = Estimate.objects.all()  # –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ
        foreman_estimates = Estimate.objects.filter(foreman=foreman)  # –ü—Ä–æ—Ä–∞–± —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏
        
        print(f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç —Å–º–µ—Ç: {manager_estimates.count()}")  
        print(f"üë∑‚Äç‚ôÇÔ∏è –ü—Ä–æ—Ä–∞–± –≤–∏–¥–∏—Ç —Å–º–µ—Ç: {foreman_estimates.count()}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–º–µ—Ç
        print("\n=== –≠–õ–ï–ú–ï–ù–¢–´ –°–ú–ï–¢ ===")
        all_items = EstimateItem.objects.all()
        print(f"üìã –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {all_items.count()}")
        
        # –î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        manager_items = EstimateItem.objects.all()
        print(f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {manager_items.count()}")
        
        # –î–ª—è –ø—Ä–æ—Ä–∞–±–∞ - —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–≤–æ–∏—Ö —Å–º–µ—Ç–∞—Ö
        foreman_items = EstimateItem.objects.filter(
            estimate__foreman=foreman
        ).filter(
            Q(added_by=foreman) | Q(added_by__isnull=True)
        )
        print(f"üë∑‚Äç‚ôÇÔ∏è –ü—Ä–æ—Ä–∞–± –≤–∏–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {foreman_items.count()}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞—Å—á–µ—Ç —Å—É–º–º
        print("\n=== –†–ê–°–ß–ï–¢ –°–£–ú–ú ===")
        
        # –î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - –ø–æ–ª–Ω–∞—è —Å—É–º–º–∞
        manager_total = Estimate.objects.annotate(
            totalAmount=Coalesce(
                Sum(
                    F('items__quantity') * F('items__cost_price_per_unit'),
                    output_field=DecimalField()
                ),
                Value(0.0),
                output_field=DecimalField()
            )
        )
        
        if manager_total.exists():
            manager_sum = sum(e.totalAmount for e in manager_total if e.totalAmount)
            print(f"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç –æ–±—â—É—é —Å—É–º–º—É: {manager_sum} –≥—Ä–Ω")
        
        # –î–ª—è –ø—Ä–æ—Ä–∞–±–∞ - —Ç–æ–ª—å–∫–æ —Å—É–º–º–∞ —Å–≤–æ–∏—Ö —Ä–∞–±–æ—Ç
        foreman_total = Estimate.objects.filter(foreman=foreman).annotate(
            totalAmount=Coalesce(
                Sum(
                    F('items__quantity') * F('items__cost_price_per_unit'),
                    output_field=DecimalField(),
                    filter=Q(items__added_by=foreman) | Q(items__added_by__isnull=True)
                ),
                Value(0.0),
                output_field=DecimalField()
            )
        )
        
        if foreman_total.exists():
            foreman_sum = sum(e.totalAmount for e in foreman_total if e.totalAmount)
            print(f"üë∑‚Äç‚ôÇÔ∏è –ü—Ä–æ—Ä–∞–± –≤–∏–¥–∏—Ç —Å–≤–æ—é —Å—É–º–º—É: {foreman_sum} –≥—Ä–Ω")
            
        print("\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–º–µ—Ç–∞–º
        print("\n=== –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –°–ú–ï–¢–ê–ú ===")
        for estimate in foreman_estimates:
            items = EstimateItem.objects.filter(
                estimate=estimate
            ).filter(
                Q(added_by=foreman) | Q(added_by__isnull=True)
            )
            
            total = sum(
                float(item.quantity) * float(item.cost_price_per_unit)
                for item in items
            )
            
            print(f"üìã –°–º–µ—Ç–∞ '{estimate.estimate_number}': {items.count()} —Ä–∞–±–æ—Ç, {total} –≥—Ä–Ω")
            for item in items:
                author = item.added_by.email if item.added_by else "–°—Ç–∞—Ä–∞—è —Ä–∞–±–æ—Ç–∞"
                print(f"  - {item.work_type.work_name}: {author}")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_foreman_filtering()