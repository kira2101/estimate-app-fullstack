#!/usr/bin/env python
"""
–†–ê–°–®–ò–†–ï–ù–ù–´–ô –¢–ï–°–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π CRUD –¥–ª—è —Å–º–µ—Ç
"""
import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

import django
django.setup()

from django.test import RequestFactory
from rest_framework.exceptions import PermissionDenied
from api.models import User, Estimate, Role
from api.views import EstimateViewSet
import json

def test_crud_operations_security():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("üîí –†–ê–°–®–ò–†–ï–ù–ù–´–ô –¢–ï–°–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò CRUD –û–ü–ï–†–ê–¶–ò–ô")
    print("=" * 70)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        manager_role = Role.objects.get(role_name='–º–µ–Ω–µ–¥–∂–µ—Ä')
        foreman_role = Role.objects.get(role_name='–ø—Ä–æ—Ä–∞–±')
        
        manager = User.objects.filter(role=manager_role).first()
        foreman1 = User.objects.filter(role=foreman_role).first()
        foreman2 = User.objects.filter(role=foreman_role).exclude(user_id=foreman1.user_id).first()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—Ç—ã
        foreman1_estimates = Estimate.objects.filter(foreman=foreman1)
        foreman2_estimates = Estimate.objects.filter(foreman=foreman2)
        
        if not foreman1_estimates.exists() or not foreman2_estimates.exists():
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–º–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
            
        foreign_estimate = foreman2_estimates.first()
        own_estimate = foreman1_estimates.first()
        
        print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –ø—Ä–æ—Ä–∞–±–∞ '{foreman1.full_name}' –∫:")
        print(f"   - –°–≤–æ—è —Å–º–µ—Ç–∞: ID {own_estimate.estimate_id}")
        print(f"   - –ß—É–∂–∞—è —Å–º–µ—Ç–∞: ID {foreign_estimate.estimate_id} (–ø—Ä–æ—Ä–∞–±: {foreign_estimate.foreman.full_name})")
        print()
        
        factory = RequestFactory()
        
        # –¢–ï–°–¢ 1: –û–ø–µ—Ä–∞—Ü–∏—è RETRIEVE (–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–º–µ—Ç—ã)
        print("üß™ –¢–ï–°–¢ 1: RETRIEVE –æ–ø–µ—Ä–∞—Ü–∏—è")
        
        # –¢–µ—Å—Ç 1.1: –î–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–π —Å–º–µ—Ç–µ
        request = factory.get(f'/api/v1/estimates/{own_estimate.estimate_id}/')
        request.user = foreman1
        
        view = EstimateViewSet.as_view({'get': 'retrieve'})
        
        try:
            response = view(request, pk=own_estimate.estimate_id)
            if response.status_code == 200:
                print("   ‚úÖ –î–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–π —Å–º–µ—Ç–µ: –†–ê–ó–†–ï–®–ï–ù")
            else:
                print("   ‚ùå –î–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–π —Å–º–µ—Ç–µ: –ó–ê–ü–†–ï–©–ï–ù (–æ—à–∏–±–∫–∞!)")
                return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Å–≤–æ–µ–π —Å–º–µ—Ç–µ: {e}")
            return False
        
        # –¢–µ—Å—Ç 1.2: –î–æ—Å—Ç—É–ø –∫ —á—É–∂–æ–π —Å–º–µ—Ç–µ
        request = factory.get(f'/api/v1/estimates/{foreign_estimate.estimate_id}/')
        request.user = foreman1
        
        view = EstimateViewSet()
        view.request = request
        view.action = 'retrieve'
        view.kwargs = {'pk': foreign_estimate.estimate_id}
        
        try:
            response = view.retrieve(request, pk=foreign_estimate.estimate_id)
            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–Ø–ó–í–ò–ú–û–°–¢–¨: –î–æ—Å—Ç—É–ø –∫ —á—É–∂–æ–π —Å–º–µ—Ç–µ –†–ê–ó–†–ï–®–ï–ù (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            return False
        except PermissionDenied:
            print("   ‚úÖ –î–æ—Å—Ç—É–ø –∫ —á—É–∂–æ–π —Å–º–µ—Ç–µ: –ó–ê–ü–†–ï–©–ï–ù (PermissionDenied)")
        except Exception as e:
            print(f"   ‚úÖ –î–æ—Å—Ç—É–ø –∫ —á—É–∂–æ–π —Å–º–µ—Ç–µ: –ó–ê–ü–†–ï–©–ï–ù ({type(e).__name__})")
        
        print()
        
        # –¢–ï–°–¢ 2: –û–ø–µ—Ä–∞—Ü–∏—è UPDATE (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã)
        print("üß™ –¢–ï–°–¢ 2: UPDATE –æ–ø–µ—Ä–∞—Ü–∏—è")
        
        # –¢–µ—Å—Ç 2.1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π —Å–º–µ—Ç—ã
        update_data = {
            'estimate_number': '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è_—Å–º–µ—Ç–∞_—Ç–µ—Å—Ç',
            'project_id': own_estimate.project.project_id,
            'status_id': own_estimate.status.status_id if own_estimate.status else None
        }
        
        request = factory.put(
            f'/api/v1/estimates/{own_estimate.estimate_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        request.user = foreman1
        
        view = EstimateViewSet()
        view.request = request
        view.action = 'update'
        view.kwargs = {'pk': own_estimate.estimate_id}
        
        try:
            response = view.update(request, pk=own_estimate.estimate_id)
            if response.status_code in [200, 202]:
                print("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π —Å–º–µ—Ç—ã: –†–ê–ó–†–ï–®–ï–ù–û")
            else:
                print(f"   ‚ö†Ô∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π —Å–º–µ—Ç—ã: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤–æ–µ–π —Å–º–µ—Ç—ã: {e}")
        
        # –¢–µ—Å—Ç 2.2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–π —Å–º–µ—Ç—ã
        request = factory.put(
            f'/api/v1/estimates/{foreign_estimate.estimate_id}/',
            data=json.dumps(update_data),
            content_type='application/json'
        )
        request.user = foreman1
        
        view = EstimateViewSet()
        view.request = request
        view.action = 'update'  
        view.kwargs = {'pk': foreign_estimate.estimate_id}
        
        try:
            response = view.update(request, pk=foreign_estimate.estimate_id)
            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–Ø–ó–í–ò–ú–û–°–¢–¨: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–π —Å–º–µ—Ç—ã –†–ê–ó–†–ï–®–ï–ù–û (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            return False
        except PermissionDenied:
            print("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–π —Å–º–µ—Ç—ã: –ó–ê–ü–†–ï–©–ï–ù–û (PermissionDenied)")
        except Exception as e:
            print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—É–∂–æ–π —Å–º–µ—Ç—ã: –ó–ê–ü–†–ï–©–ï–ù–û ({type(e).__name__})")
        
        print()
        
        # –¢–ï–°–¢ 3: –û–ø–µ—Ä–∞—Ü–∏—è DELETE (—É–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã)
        print("üß™ –¢–ï–°–¢ 3: DELETE –æ–ø–µ—Ä–∞—Ü–∏—è")
        
        # –¢–µ—Å—Ç 3.1: –£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–π —Å–º–µ—Ç—ã (–ù–ï –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å)
        request = factory.delete(f'/api/v1/estimates/{foreign_estimate.estimate_id}/')
        request.user = foreman1
        
        view = EstimateViewSet()
        view.request = request
        view.action = 'destroy'
        view.kwargs = {'pk': foreign_estimate.estimate_id}
        
        try:
            response = view.destroy(request, pk=foreign_estimate.estimate_id)
            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–Ø–ó–í–ò–ú–û–°–¢–¨: –£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–π —Å–º–µ—Ç—ã –†–ê–ó–†–ï–®–ï–ù–û (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            return False
        except PermissionDenied:
            print("   ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–π —Å–º–µ—Ç—ã: –ó–ê–ü–†–ï–©–ï–ù–û (PermissionDenied)")
        except Exception as e:
            print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–æ–π —Å–º–µ—Ç—ã: –ó–ê–ü–†–ï–©–ï–ù–û ({type(e).__name__})")
        
        print()
        
        # –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        print("üß™ –¢–ï–°–¢ 4: –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        
        request = factory.get(f'/api/v1/estimates/{foreign_estimate.estimate_id}/')
        request.user = manager
        
        view = EstimateViewSet()
        view.request = request
        view.action = 'retrieve'
        view.kwargs = {'pk': foreign_estimate.estimate_id}
        
        try:
            response = view.retrieve(request, pk=foreign_estimate.estimate_id)
            if response.status_code == 200:
                print("   ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ª—é–±–æ–π —Å–º–µ—Ç–µ: –ü–†–ê–í–ò–õ–¨–ù–û")
            else:
                print(f"   ‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –ù–ï –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–º–µ—Ç–µ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫ —Å–º–µ—Ç–µ: {e}")
            return False
            
        print()
        print("üîí –í–°–ï –†–ê–°–®–ò–†–ï–ù–ù–´–ï –¢–ï–°–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
        print("‚úÖ –í—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç—Å—è –ø–æ —Ä–æ–ª—è–º")
        return True
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –†–ê–°–®–ò–†–ï–ù–ù–û–ú –¢–ï–°–¢–ï: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_crud_operations_security()
    sys.exit(0 if success else 1)