#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSE endpoint
"""

import requests
import json
import time
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

import django
django.setup()

from api.models import User, AuthToken

def get_user_token(email):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
    try:
        user = User.objects.get(email=email)
        token, created = AuthToken.objects.get_or_create(user=user)
        return str(token.token)
    except User.DoesNotExist:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

def test_sse_connection(token, timeout=30):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
    url = f"http://127.0.0.1:8000/api/v1/sse/events/?token={token}"
    
    print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SSE: {url}")
    
    try:
        response = requests.get(url, stream=True, timeout=timeout)
        print(f"üìä Status Code: {response.status_code}")
        print(f"üìã Headers: {dict(response.headers)}")
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
        
        print("‚úÖ SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        print("üì® –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...")
        print("   (–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
        
        start_time = time.time()
        for line in response.iter_lines():
            if line:
                line_str = line.decode('utf-8')
                if line_str.startswith('data: '):
                    data_str = line_str[6:]  # Remove 'data: '
                    try:
                        data = json.loads(data_str)
                        elapsed = time.time() - start_time
                        print(f"üì® [{elapsed:.1f}s] –°–æ–±—ã—Ç–∏–µ: {data.get('event', 'unknown')}")
                        print(f"   Data: {json.dumps(data, indent=2, ensure_ascii=False)}")
                    except json.JSONDecodeError:
                        print(f"üìù [{elapsed:.1f}s] Raw: {data_str}")
                        
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                if time.time() - start_time > timeout:
                    print(f"‚è∞ –¢–∞–π–º–∞—É—Ç {timeout}s –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
                    break
                    
    except KeyboardInterrupt:
        print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return True
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
    
    return True

def test_sse_stats(token):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É SSE"""
    url = "http://127.0.0.1:8000/api/v1/sse/stats/"
    headers = {'Authorization': f'Bearer {token}'}
    
    try:
        response = requests.get(url, headers=headers)
        print(f"üìä SSE Stats Status: {response.status_code}")
        
        if response.status_code == 200:
            stats = response.json()
            print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SSE:")
            print(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}")
            print(f"   –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {stats.get('total_connections', 0)}")
            print(f"   –ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {stats.get('users', {})}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False

def create_test_estimate(token):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–º–µ—Ç—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SSE —Å–æ–±—ã—Ç–∏—è"""
    url = "http://127.0.0.1:8000/api/v1/estimates/"
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    try:
        projects_response = requests.get("http://127.0.0.1:8000/api/v1/projects/", headers=headers)
        if projects_response.status_code == 200:
            projects = projects_response.json()
            if projects.get('results'):
                project_id = projects['results'][0]['project_id']
            else:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞")
                return False
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
        return False
    
    test_data = {
        "estimate_number": f"Test_SSE_{int(time.time())}",
        "project": project_id,
        "description": "–¢–µ—Å—Ç–æ–≤–∞—è —Å–º–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSE"
    }
    
    try:
        response = requests.post(url, headers=headers, json=test_data)
        print(f"üìã Create Estimate Status: {response.status_code}")
        
        if response.status_code == 201:
            estimate = response.json()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–º–µ—Ç–∞: {estimate.get('estimate_number')}")
            print(f"   ID: {estimate.get('estimate_id')}")
            return estimate
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ SSE Integration Tester")
    print("=" * 40)
    
    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = {
        '1': 'manager@example.com',
        '2': 'foreman@example.com'
    }
    
    print("üë• –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
    for key, email in users.items():
        print(f"   {key}. {email}")
    
    user_choice = input("\nüë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1-2): ").strip()
    
    if user_choice not in users:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    email = users[user_choice]
    token = get_user_token(email)
    
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        return
    
    print(f"üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:10]}...")
    
    while True:
        print("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:")
        print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É SSE")
        print("   3. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–º–µ—Ç—É (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SSE —Å–æ–±—ã—Ç–∏–µ)")
        print("   4. –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ + —Å–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ—Ç—ã)")
        print("   0. –í—ã—Ö–æ–¥")
        
        choice = input("\nüî∏ –í–∞—à –≤—ã–±–æ—Ä: ").strip()
        
        if choice == '0':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        elif choice == '1':
            timeout = int(input("‚è∞ –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (30): ") or 30)
            test_sse_connection(token, timeout)
        elif choice == '2':
            test_sse_stats(token)
        elif choice == '3':
            create_test_estimate(token)
        elif choice == '4':
            print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ SSE...")
            test_sse_stats(token)
            
            # –°–æ–∑–¥–∞–µ–º —Å–º–µ—Ç—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            import threading
            def delayed_create():
                time.sleep(5)
                print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–º–µ—Ç—ã —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                create_test_estimate(token)
            
            thread = threading.Thread(target=delayed_create)
            thread.daemon = True
            thread.start()
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SSE
            print("\n2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SSE (–æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π)...")
            test_sse_connection(token, 15)
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()