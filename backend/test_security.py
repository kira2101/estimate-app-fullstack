#!/usr/bin/env python
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ—Ä–∞–±–æ–≤ –∫ —Å–º–µ—Ç–∞–º
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–æ—Ä–∞–±—ã –ù–ï –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á—É–∂–∏–º —Å–º–µ—Ç–∞–º
"""
import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –ü–ï–†–ï–î –∏–º–ø–æ—Ä—Ç–æ–º
sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

import django
django.setup()

from django.test import RequestFactory
from api.models import User, Estimate, Role
from api.views import EstimateViewSet

def test_estimate_access_security():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–º–µ—Ç–∞–º"""
    print("üîí –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏
        manager_role = Role.objects.get(role_name='–º–µ–Ω–µ–¥–∂–µ—Ä')
        foreman_role = Role.objects.get(role_name='–ø—Ä–æ—Ä–∞–±')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
        manager = User.objects.filter(role=manager_role).first()
        foreman1 = User.objects.filter(role=foreman_role).first()
        foreman2 = User.objects.filter(role=foreman_role).exclude(user_id=foreman1.user_id).first()
        
        if not all([manager, foreman1, foreman2]):
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
            
        print(f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager.full_name} (ID: {manager.user_id})")
        print(f"üë§ –ü—Ä–æ—Ä–∞–± 1: {foreman1.full_name} (ID: {foreman1.user_id})")
        print(f"üë§ –ü—Ä–æ—Ä–∞–± 2: {foreman2.full_name} (ID: {foreman2.user_id})")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—Ç—ã –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ä–∞–±–∞
        foreman1_estimates = Estimate.objects.filter(foreman=foreman1)
        foreman2_estimates = Estimate.objects.filter(foreman=foreman2)
        
        print(f"üìä –°–º–µ—Ç –ø—Ä–æ—Ä–∞–±–∞ 1: {foreman1_estimates.count()}")
        print(f"üìä –°–º–µ—Ç –ø—Ä–æ—Ä–∞–±–∞ 2: {foreman2_estimates.count()}")
        print()
        
        if not foreman1_estimates.exists() or not foreman2_estimates.exists():
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–º–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        # –°–æ–∑–¥–∞–µ–º factory –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        factory = RequestFactory()
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Ä–∞–± 1 –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–º–µ—Ç
        print("üß™ –¢–ï–°–¢ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–º–µ—Ç –ø—Ä–æ—Ä–∞–±–æ–º 1")
        request = factory.get('/api/v1/estimates/')
        request.user = foreman1
        
        view = EstimateViewSet()
        view.request = request
        view.action = 'list'
        
        queryset = view.get_queryset()
        accessible_estimates = list(queryset.values_list('estimate_id', flat=True))
        foreman1_estimate_ids = list(foreman1_estimates.values_list('estimate_id', flat=True))
        foreman2_estimate_ids = list(foreman2_estimates.values_list('estimate_id', flat=True))
        
        print(f"   –ü—Ä–æ—Ä–∞–± 1 –≤–∏–¥–∏—Ç —Å–º–µ—Ç—ã: {accessible_estimates}")
        print(f"   –ï–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–º–µ—Ç—ã: {foreman1_estimate_ids}")
        print(f"   –ß—É–∂–∏–µ —Å–º–µ—Ç—ã (–ø—Ä–æ—Ä–∞–± 2): {foreman2_estimate_ids}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ä–∞–± –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–º–µ—Ç—ã
        foreign_estimates_visible = [eid for eid in accessible_estimates if eid in foreman2_estimate_ids]
        
        if foreign_estimates_visible:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–Ø–ó–í–ò–ú–û–°–¢–¨: –ü—Ä–æ—Ä–∞–± 1 –≤–∏–¥–∏—Ç —á—É–∂–∏–µ —Å–º–µ—Ç—ã: {foreign_estimates_visible}")
            return False
        else:
            print("‚úÖ –¢–ï–°–¢ 1 –ü–†–û–ô–î–ï–ù: –ü—Ä–æ—Ä–∞–± –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–º–µ—Ç—ã")
        
        print()
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ—Ä–∞–± 1 –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —á—É–∂—É—é —Å–º–µ—Ç—É
        if foreman2_estimates.exists():
            foreign_estimate = foreman2_estimates.first()
            print(f"üß™ –¢–ï–°–¢ 2: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–æ–π —Å–º–µ—Ç–µ (ID: {foreign_estimate.estimate_id})")
            
            request = factory.get(f'/api/v1/estimates/{foreign_estimate.estimate_id}/')
            request.user = foreman1
            
            view = EstimateViewSet()
            view.request = request
            view.action = 'retrieve'
            view.kwargs = {'pk': foreign_estimate.estimate_id}
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ get_object()
                queryset = view.get_queryset()
                obj = queryset.filter(estimate_id=foreign_estimate.estimate_id).first()
                
                if obj is None:
                    print("‚úÖ –¢–ï–°–¢ 2 –ü–†–û–ô–î–ï–ù: –ß—É–∂–∞—è —Å–º–µ—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ queryset")
                else:
                    print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–Ø–ó–í–ò–ú–û–°–¢–¨: –ß—É–∂–∞—è —Å–º–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: {obj.estimate_id}")
                    return False
                    
            except Exception as e:
                print(f"‚úÖ –¢–ï–°–¢ 2 –ü–†–û–ô–î–ï–ù: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —á—É–∂–æ–π —Å–º–µ—Ç–µ: {e}")
        
        print()
        
        # –¢–µ—Å—Ç 3: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–º–µ—Ç—ã
        print("üß™ –¢–ï–°–¢ 3: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–º–µ—Ç—ã")
        request = factory.get('/api/v1/estimates/')
        request.user = manager
        
        view = EstimateViewSet()
        view.request = request  
        view.action = 'list'
        
        manager_queryset = view.get_queryset()
        manager_accessible = manager_queryset.count()
        total_estimates = Estimate.objects.count()
        
        print(f"   –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç —Å–º–µ—Ç: {manager_accessible}")
        print(f"   –í—Å–µ–≥–æ —Å–º–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ: {total_estimates}")
        
        if manager_accessible == total_estimates:
            print("‚úÖ –¢–ï–°–¢ 3 –ü–†–û–ô–î–ï–ù: –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ —Å–º–µ—Ç—ã")
        else:
            print("‚ùå –û–®–ò–ë–ö–ê: –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç –Ω–µ –≤—Å–µ —Å–º–µ—Ç—ã")
            return False
            
        print()
        print("üîí –í–°–ï –¢–ï–°–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–º–µ—Ç–∞–º")
        return True
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_estimate_access_security()
    sys.exit(0 if success else 1)