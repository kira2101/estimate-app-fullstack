/**
 * API –∫–ª–∏–µ–Ω—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Event Bus
 * –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ –±–∞–∑–æ–≤—ã–º API –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
 */

import { api } from './client';
import eventBus from '../utils/EventBus';
import { ESTIMATE_EVENTS, PROJECT_EVENTS, USER_EVENTS, WORK_CATEGORY_EVENTS, WORK_TYPE_EVENTS, createEvent } from '../utils/EventTypes';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
 */
const getCurrentUserMetadata = () => {
  try {
    const token = localStorage.getItem('authToken');
    if (!token) return {};
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    return {
      source: window.location.pathname.includes('/mobile/') ? 'mobile' : 'desktop',
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return {};
  }
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ–±–µ—Ä—Ç–∫—É –¥–ª—è API –º–µ—Ç–æ–¥–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–±—ã—Ç–∏–π
 * @param {Function} apiMethod - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π API –º–µ—Ç–æ–¥
 * @param {string} eventType - —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @param {Function} dataExtractor - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞
 */
const createEventWrapper = (apiMethod, eventType, dataExtractor = (data) => data) => {
  return async (...args) => {
    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
      const result = await apiMethod(...args);
      
      // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
      const eventData = dataExtractor(result, args);
      const metadata = getCurrentUserMetadata();
      
      const event = createEvent(eventType, eventData, metadata);
      console.log(`üöå [API_WITH_EVENTS] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ: ${eventType}`, event);
      eventBus.emit(eventType, event);
      
      return result;
    } catch (error) {
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ç–∞–∫–∂–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
      console.error(`API Error for ${eventType}:`, error);
      throw error;
    }
  };
};

/**
 * API –∫–ª–∏–µ–Ω—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
 */
export const apiWithEvents = {
  // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  login: api.login,
  getCurrentUser: api.getCurrentUser,
  
  // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ (–æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É—é—Ç —Å–æ–±—ã—Ç–∏—è, –Ω–æ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  getWorkCategories: api.getWorkCategories,
  getWorkTypes: api.getWorkTypes,
  getAllWorkTypes: api.getAllWorkTypes,
  getStatuses: api.getStatuses,
  
  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç —Å —Å–æ–±—ã—Ç–∏—è–º–∏
  createWorkCategory: createEventWrapper(
    api.createWorkCategory,
    WORK_CATEGORY_EVENTS.CREATED,
    (result) => ({ workCategory: result })
  ),
  
  updateWorkCategory: createEventWrapper(
    api.updateWorkCategory,
    WORK_CATEGORY_EVENTS.UPDATED,
    (result, args) => ({ workCategory: result, id: args[0] })
  ),
  
  deleteWorkCategory: createEventWrapper(
    api.deleteWorkCategory,
    WORK_CATEGORY_EVENTS.DELETED,
    (result, args) => ({ id: args[0] })
  ),

  // –¢–∏–ø—ã —Ä–∞–±–æ—Ç —Å —Å–æ–±—ã—Ç–∏—è–º–∏
  createWorkType: createEventWrapper(
    api.createWorkType,
    WORK_TYPE_EVENTS.CREATED,
    (result) => ({ workType: result })
  ),
  
  updateWorkType: createEventWrapper(
    api.updateWorkType,
    WORK_TYPE_EVENTS.UPDATED,
    (result, args) => ({ workType: result, id: args[0] })
  ),
  
  deleteWorkType: createEventWrapper(
    api.deleteWorkType,
    WORK_TYPE_EVENTS.DELETED,
    (result, args) => ({ id: args[0] })
  ),

  importWorkTypes: createEventWrapper(
    api.importWorkTypes,
    WORK_TYPE_EVENTS.IMPORTED,
    (result) => ({ importResult: result })
  ),

  // –ü—Ä–æ–µ–∫—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
  getProjects: api.getProjects,
  
  createProject: createEventWrapper(
    api.createProject,
    PROJECT_EVENTS.CREATED,
    (result) => ({ project: result })
  ),
  
  updateProject: createEventWrapper(
    api.updateProject,
    PROJECT_EVENTS.UPDATED,
    (result, args) => ({ project: result, id: args[0] })
  ),
  
  deleteProject: createEventWrapper(
    api.deleteProject,
    PROJECT_EVENTS.DELETED,
    (result, args) => ({ id: args[0] })
  ),

  // –°–º–µ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
  getEstimates: api.getEstimates,
  getEstimate: api.getEstimate,
  
  createEstimate: createEventWrapper(
    api.createEstimate,
    ESTIMATE_EVENTS.CREATED,
    (result, args) => ({ 
      estimate: result,
      originalData: args[0]
    })
  ),
  
  updateEstimate: createEventWrapper(
    api.updateEstimate,
    ESTIMATE_EVENTS.UPDATED,
    (result, args) => ({ 
      estimate: result,
      id: args[0],
      originalData: args[1]
    })
  ),
  
  deleteEstimate: createEventWrapper(
    api.deleteEstimate,
    ESTIMATE_EVENTS.DELETED,
    (result, args) => ({ id: args[0] })
  ),

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
  getUsers: api.getUsers,
  
  createUser: createEventWrapper(
    api.createUser,
    USER_EVENTS.CREATED,
    (result) => ({ user: result })
  ),
  
  updateUser: createEventWrapper(
    api.updateUser,
    USER_EVENTS.UPDATED,
    (result, args) => ({ user: result, id: args[0] })
  ),
  
  deleteUser: createEventWrapper(
    api.deleteUser,
    USER_EVENTS.DELETED,
    (result, args) => ({ id: args[0] })
  ),

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  getRoles: api.getRoles,
  getProjectAssignments: api.getProjectAssignments,
  createProjectAssignment: api.createProjectAssignment,
  deleteProjectAssignment: api.deleteProjectAssignment,
  exportEstimateForClient: api.exportEstimateForClient,
  exportEstimateInternal: api.exportEstimateInternal,
  getEstimateItems: api.getEstimateItems,
  createEstimateItem: api.createEstimateItem
};

export default apiWithEvents;