// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 
                    (window.location.hostname.includes('dev.app.iqbs.pro') 
                        ? 'https://dev.app.iqbs.pro/api/v1'             // Dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ
                        : window.location.hostname.includes('ngrok-free.app')
                        ? 'http://127.0.0.1:8000/api/v1'                // –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —á–µ—Ä–µ–∑ ngrok –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost backend
                        : 'http://127.0.0.1:8000/api/v1');             // localhost

console.log('API_BASE_URL:', API_BASE_URL);

const request = async (endpoint, options = {}) => {
    const url = `${API_BASE_URL}${endpoint}`;
    const token = localStorage.getItem('authToken');
    
    console.log(`API Request: ${options.method || 'GET'} ${url}`);
    
    const headers = {
        'Content-Type': 'application/json', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ...options.headers,
    };

    if (token) {
        headers['Authorization'] = `Bearer ${token}`;
    }

    // –ï—Å–ª–∏ Content-Type —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ undefined, —É–¥–∞–ª—è–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏–ª –µ–≥–æ —Å–∞–º (–¥–ª—è FormData)
    if (headers['Content-Type'] === undefined) {
        delete headers['Content-Type'];
    }

    const config = {
        ...options,
        headers,
        cache: 'no-cache',
    };

    const response = await fetch(url, config);
    
    console.log(`API Response: ${response.status} ${response.statusText}`);
    
    if (!response.ok) {
        if (response.status === 401) {
            console.error("Unauthorized or token expired");
        }
        let errorData;
        try {
            errorData = await response.json();
            console.error('API Error Data:', errorData);
        } catch (e) {
            errorData = { error: `HTTP ${response.status}: ${response.statusText}` };
        }
        
        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        let errorMessage = 'Something went wrong';
        if (errorData.detail) {
            errorMessage = errorData.detail;
        } else if (errorData.error) {
            errorMessage = errorData.error;
        } else if (errorData.message) {
            errorMessage = errorData.message;
        } else if (Array.isArray(errorData) && errorData.length > 0) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞ –æ—à–∏–±–æ–∫ –æ—Ç Django REST Framework
            const firstError = errorData[0];
            if (typeof firstError === 'string') {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ ErrorDetail –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                const match = firstError.match(/string="([^"]+)"/);
                errorMessage = match ? match[1] : firstError;
            } else if (firstError.string) {
                errorMessage = firstError.string;
            }
        } else if (typeof errorData === 'string') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å ErrorDetail - –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏
            const match = errorData.match(/string="([^"]+)"/);
            errorMessage = match ? match[1] : errorData;
        }
        
        throw new Error(errorMessage);
    }
    if (response.status === 204) {
        return;
    }
    return response.json();
};

export const api = {
    login: (email, password) => request('/auth/login/', { method: 'POST', body: JSON.stringify({ email, password }) }),
    getCurrentUser: () => request('/auth/me/'),
    
    // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    getWorkCategories: () => request('/work-categories/'),
    createWorkCategory: (data) => request('/work-categories/', { method: 'POST', body: JSON.stringify(data) }),
    updateWorkCategory: (id, data) => request(`/work-categories/${id}/`, { method: 'PUT', body: JSON.stringify(data) }),
    deleteWorkCategory: (id) => request(`/work-categories/${id}/`, { method: 'DELETE' }),

    getWorkTypes: (page = 1, pageSize = 20) => request(`/work-types/?page=${page}&page_size=${pageSize}`),
    getAllWorkTypes: () => request('/work-types/?all=true'), // –î–ª—è –ø–æ–∏—Å–∫–∞ –∏ –≤—ã–±–æ—Ä–∞ –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ - –≤—Å–µ —Ä–∞–±–æ—Ç—ã
    createWorkType: (data) => request('/work-types/', { method: 'POST', body: JSON.stringify(data) }),
    updateWorkType: (id, data) => request(`/work-types/${id}/`, { method: 'PUT', body: JSON.stringify(data) }),
    deleteWorkType: (id) => request(`/work-types/${id}/`, { method: 'DELETE' }),
    importWorkTypes: (file) => {
        const formData = new FormData();
        formData.append('file', file);
        // –î–ª—è multipart/form-data Content-Type —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        return request('/work-types/import/', { 
            method: 'POST', 
            body: formData, 
            headers: {
                'Content-Type': undefined 
            }
        });
    },

    getStatuses: () => request('/statuses/'),

    // –ü—Ä–æ–µ–∫—Ç—ã (–û–±—ä–µ–∫—Ç—ã)
    getProjects: () => request('/projects/'),
    createProject: (data) => request('/projects/', { method: 'POST', body: JSON.stringify(data) }),
    updateProject: (id, data) => request(`/projects/${id}/`, { method: 'PUT', body: JSON.stringify(data) }),
    deleteProject: (id) => request(`/projects/${id}/`, { method: 'DELETE' }),

    // –°–º–µ—Ç—ã
    getEstimates: () => {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä mobile_sum - –ø—Ä–æ—Ä–∞–±—ã –≤–µ–∑–¥–µ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ä–∞–±–æ—Ç—ã
        return request('/estimates/');
    },
    getEstimate: (id) => request(`/estimates/${id}/`), // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π —Å–º–µ—Ç—ã
    createEstimate: (data) => request('/estimates/', { method: 'POST', body: JSON.stringify(data) }),
    updateEstimate: (id, data) => request(`/estimates/${id}/`, { method: 'PUT', body: JSON.stringify(data) }),
    deleteEstimate: (id) => request(`/estimates/${id}/`, { method: 'DELETE' }),

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    getUsers: () => request('/users/'),
    createUser: (data) => request('/users/', { method: 'POST', body: JSON.stringify(data) }),
    updateUser: (id, data) => request(`/users/${id}/`, { method: 'PUT', body: JSON.stringify(data) }),
    deleteUser: (id) => request(`/users/${id}/`, { method: 'DELETE' }),

    // –†–æ–ª–∏
    getRoles: () => request('/roles/'), // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —Ç–∞–∫–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω

    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è
    getProjectAssignments: () => request('/project-assignments/'),
    createProjectAssignment: (data) => request('/project-assignments/', { method: 'POST', body: JSON.stringify(data) }),
    deleteProjectAssignment: (id) => request(`/project-assignments/${id}/`, { method: 'DELETE' }),

    // –≠–∫—Å–ø–æ—Ä—Ç —Å–º–µ—Ç
    exportEstimateForClient: async (estimateId) => {
        const token = localStorage.getItem('authToken');
        const url = `${API_BASE_URL}/estimates/${estimateId}/export/client/`;
        
        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
            },
            cache: 'no-cache',
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || errorData.error || '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
        }
        
        return response.blob();
    },

    exportEstimateInternal: async (estimateId) => {
        const token = localStorage.getItem('authToken');
        const url = `${API_BASE_URL}/estimates/${estimateId}/export/internal/`;
        
        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
            },
            cache: 'no-cache',
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || errorData.error || '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
        }
        
        return response.blob();
    },

    // –†–∞–±–æ—Ç–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å–º–µ—Ç
    getEstimateItems: async (estimateId) => {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä mobileFilter - –ø—Ä–æ—Ä–∞–±—ã –≤–µ–∑–¥–µ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ä–∞–±–æ—Ç—ã
        const url = `${API_BASE_URL}/estimate-items/?estimate=${estimateId}`;
            
        const response = await fetch(url, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
            },
        });
        if (!response.ok) {
            throw new Error('Failed to fetch estimate items');
        }
        return response.json();
    },
    
    createEstimateItem: (data) => {
        console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–º–µ—Ç—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π ViewSet:', data);
        return request('/estimate-items/', { method: 'POST', body: JSON.stringify(data) });
    },
};