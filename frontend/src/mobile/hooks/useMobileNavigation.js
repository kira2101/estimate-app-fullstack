import { useState, useCallback, useEffect } from 'react';
import { normalizeWorksData, getWorkId, mergeWorksArrays } from '../utils/dataUtils';

/**
 * Mobile Navigation Hook
 * Manages navigation state, history, and screen transitions
 */
export const useMobileNavigation = () => {
  const [currentScreen, setCurrentScreen] = useState('projects');
  const [currentTab, setCurrentTab] = useState('projects');
  const [navigationHistory, setNavigationHistory] = useState([]);
  const [forwardHistory, setForwardHistory] = useState([]);
  const [screenData, setScreenData] = useState({});

  // Screen titles mapping
  const screenTitles = {
    'projects': '–ü—Ä–æ–µ–∫—Ç—ã',
    'project-info': '', // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
    'estimates': '–í—Å–µ —Å–º–µ—Ç—ã',
    'categories': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    'works': '–†–∞–±–æ—Ç—ã',
    'estimate-editor': '–†–µ–¥–∞–∫—Ç–æ—Ä —Å–º–µ—Ç—ã', // –ï–¥–∏–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ—Ç
    'finance': '–§–∏–Ω–∞–Ω—Å—ã',
    'profile': '–ü—Ä–æ—Ñ–∏–ª—å'
  };

  // Tab to screen mapping
  const tabScreens = {
    'projects': 'projects',
    'estimates': 'estimates',
    'finance': 'finance',
    'profile': 'profile'
  };

  const canGoBack = navigationHistory.length > 0;
  const canGoForward = forwardHistory.length > 0;

  // Navigate to a screen
  const navigateToScreen = useCallback((screenId, addToHistory = true, data = null) => {
    console.log('üß≠ useMobileNavigation: navigateToScreen –≤—ã–∑–≤–∞–Ω', {
      –æ—Ç: currentScreen,
      –∫: screenId,
      –¥–æ–±–∞–≤–∏—Ç—å–í–ò—Å—Ç–æ—Ä–∏—é: addToHistory,
      –¥–∞–Ω–Ω—ã–µ: data
    });
    
    if (addToHistory && currentScreen !== screenId) {
      setNavigationHistory(prev => [...prev, currentScreen]);
      setForwardHistory([]); // Clear forward history on new navigation
    }
    setCurrentScreen(screenId);
    
    // Update current tab based on screen
    const newTab = Object.keys(tabScreens).find(tab => tabScreens[tab] === screenId);
    if (newTab && newTab !== currentTab) {
      setCurrentTab(newTab);
    }
    
    if (data) {
      setScreenData(prev => ({ ...prev, [screenId]: data }));
      console.log('üìÑ useMobileNavigation: –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Ä–∞–Ω–∞', screenId, data);
    }
    
    console.log('‚úÖ useMobileNavigation: –ü–µ—Ä–µ—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω –∫ —ç–∫—Ä–∞–Ω—É', screenId);
  }, [currentScreen, currentTab, tabScreens]);

  // Go back in navigation
  const goBack = useCallback(() => {
    if (navigationHistory.length > 0) {
      const previousScreen = navigationHistory[navigationHistory.length - 1];
      setForwardHistory(prev => [currentScreen, ...prev]);
      setNavigationHistory(prev => prev.slice(0, -1));
      setCurrentScreen(previousScreen);
      
      // Update current tab based on screen
      const newTab = Object.keys(tabScreens).find(tab => tabScreens[tab] === previousScreen);
      if (newTab && newTab !== currentTab) {
        setCurrentTab(newTab);
      }
    }
  }, [currentScreen, navigationHistory, currentTab, tabScreens]);

  // Go forward in navigation
  const goForward = useCallback(() => {
    if (forwardHistory.length > 0) {
      const nextScreen = forwardHistory[0];
      setNavigationHistory(prev => [...prev, currentScreen]);
      setForwardHistory(prev => prev.slice(1));
      setCurrentScreen(nextScreen);
      
      // Update current tab based on screen
      const newTab = Object.keys(tabScreens).find(tab => tabScreens[tab] === nextScreen);
      if (newTab && newTab !== currentTab) {
        setCurrentTab(newTab);
      }
    }
  }, [currentScreen, forwardHistory, currentTab, tabScreens]);

  // Switch tabs (main navigation)
  const switchTab = useCallback((tabId) => {
    console.log(`useMobileNavigation: switchTab –≤—ã–∑–≤–∞–Ω —Å ${tabId}`);
    console.log(`–¢–µ–∫—É—â–∏–π —Ç–∞–±: ${currentTab}, –Ω–æ–≤—ã–π —Ç–∞–±: ${tabId}`);
    console.log(`–≠–∫—Ä–∞–Ω –¥–ª—è —Ç–∞–±–∞ ${tabId}: ${tabScreens[tabId]}`);
    
    setCurrentTab(tabId);
    // Clear navigation history when switching main tabs
    setNavigationHistory([]);
    setForwardHistory([]);
    setCurrentScreen(tabScreens[tabId]);
  }, [currentTab, tabScreens]);

  // Get current screen title
  const getCurrentTitle = useCallback(() => {
    if (currentScreen === 'project-info') {
      const projectData = screenData[currentScreen];
      const projectName = projectData?.selectedProject?.name || 
                         projectData?.selectedProject?.project_name;
      return projectName || '–ü—Ä–æ–µ–∫—Ç';
    }
    return screenTitles[currentScreen] || '–ó–∞–≥—Ä—É–∑–∫–∞...';
  }, [currentScreen, screenData]);

  // Get data for current or specific screen
  const getScreenData = useCallback((screen = currentScreen) => {
    return screenData[screen] || {};
  }, [screenData, currentScreen]);

  // Set data for specific screen with merge support
  const setScreenDataForScreen = useCallback((screen, data, merge = false) => {
    console.log('üìù useMobileNavigation: setScreenDataForScreen:', {
      screen,
      merge,
      newData: data,
      existingData: screenData[screen]
    });
    
    setScreenData(prev => ({
      ...prev, 
      [screen]: merge ? { ...prev[screen], ...data } : data
    }));
  }, [screenData]);

  // Accumulate works data (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç)
  const addWorksToScreen = useCallback((screen, newWorks) => {
    console.log('üîß useMobileNavigation: addWorksToScreen:', {
      screen,
      newWorksCount: newWorks?.length || 0,
      existingWorksCount: screenData[screen]?.selectedWorks?.length || 0
    });
    
    setScreenData(prev => {
      const existingData = prev[screen] || {};
      const existingWorks = existingData.selectedWorks || [];
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç
      const mergedWorks = mergeWorksArrays(existingWorks, newWorks);
      
      console.log('‚úÖ –†–∞–±–æ—Ç—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã:', {
        before: existingWorks.length,
        added: (newWorks || []).length,
        after: mergedWorks.length
      });
      
      return {
        ...prev,
        [screen]: {
          ...existingData,
          selectedWorks: mergedWorks
        }
      };
    });
  }, [screenData]);
  
  // Clear works from screen
  const clearWorksFromScreen = useCallback((screen) => {
    setScreenData(prev => ({
      ...prev,
      [screen]: {
        ...prev[screen],
        selectedWorks: []
      }
    }));
  }, []);

  // Reset navigation state
  const resetNavigation = useCallback(() => {
    setCurrentScreen('projects');
    setCurrentTab('projects');
    setNavigationHistory([]);
    setForwardHistory([]);
    setScreenData({});
  }, []);

  return {
    currentScreen,
    currentTab,
    navigationHistory,
    forwardHistory,
    canGoBack,
    canGoForward,
    navigateToScreen,
    goBack,
    goForward,
    switchTab,
    getCurrentTitle,
    getScreenData,
    setScreenData: setScreenDataForScreen, // Export the new method
    addWorksToScreen, // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç
    clearWorksFromScreen, // –ú–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ —Ä–∞–±–æ—Ç
    resetNavigation,
    navigationData: screenData // Alias for compatibility
  };
};