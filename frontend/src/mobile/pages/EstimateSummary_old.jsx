import React, { useState, useMemo, useEffect } from 'react';
import { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';
import { useMobileNavigationContext } from '../context/MobileNavigationContext';
import { useMobileAuth } from '../MobileApp';
import { api } from '../../api/client';
import LoadingSpinner from '../components/ui/LoadingSpinner';
import ErrorMessage from '../components/ui/ErrorMessage';

/**
 * Estimate Summary Screen
 * Final step to review and save estimate with selected works
 */
const EstimateSummary = () => {
  const { navigateToScreen, getScreenData, setScreenData, currentScreen, navigationData } = useMobileNavigationContext();
  const { user } = useMobileAuth();
  const queryClient = useQueryClient();
  
  // === –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
  console.log('üöÄ EstimateSummary COMPONENT RENDERED:');
  console.log('   currentScreen:', currentScreen);
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω–∞ –∫–∞–∫–æ–º —ç–∫—Ä–∞–Ω–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
  let screenData;
  let screenError = null;
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
    screenData = getScreenData();
    console.log('‚úÖ getScreenData —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —ç–∫—Ä–∞–Ω–∞:', currentScreen);
    console.log('üìÑ –î–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∞:', screenData);
    
    // –ü–û–î–†–û–ë–ù–ê–Ø –û–¢–õ–ê–î–ö–ê
    console.log('üîç –ü–û–î–†–û–ë–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–• –î–ê–ù–ù–´–•:');
    console.log('   - –¢–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω:', currentScreen);
    console.log('   - –ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞:', !!screenData);
    console.log('   - –ï—Å—Ç—å –ª–∏ selectedWorks –≤ –¥–∞–Ω–Ω—ã—Ö:', !!screenData?.selectedWorks);
    console.log('   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ selectedWorks:', screenData?.selectedWorks?.length || 0);
    console.log('   - –ü–æ–ª–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', navigationData);
    console.log('   - –î–∞–Ω–Ω—ã–µ estimate-editor —ç–∫—Ä–∞–Ω–∞:', navigationData?.['estimate-editor']);
    console.log('   - –î–∞–Ω–Ω—ã–µ estimate-editor —ç–∫—Ä–∞–Ω–∞ (–¥—É–±–ª–∏–∫–∞—Ç):', navigationData?.['estimate-editor']);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getScreenData:', error);
    screenError = error;
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ useState
  const selectedProject = screenData?.selectedProject;
  const selectedEstimate = screenData?.selectedEstimate;
  const createNewEstimate = screenData?.createNewEstimate;
  const editMode = screenData?.editMode;
  const viewMode = screenData?.viewMode;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ä–∞–∑—É —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [estimateName, setEstimateName] = useState(() => {
    // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ—Ç—ã –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ
    return selectedEstimate?.name || selectedEstimate?.estimate_number || '';
  });
  const [estimateDescription, setEstimateDescription] = useState(() => {
    // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ—Ç—ã –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ
    return selectedEstimate?.description || '';
  });
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedWorks, setSelectedWorks] = useState(() => {
    const initialWorks = screenData?.selectedWorks || [];
    console.log('üèÅ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø selectedWorks:', initialWorks.length, '—Ä–∞–±–æ—Ç –∏–∑ screenData');
    console.log('üèÅ screenData:', screenData);
    return initialWorks;
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [originalWorks, setOriginalWorks] = useState(() => {
    return screenData?.selectedWorks || [];
  });
  
  // === –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û–°–õ–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ===
  console.log('üìä –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–°–õ–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:');
  console.log('   selectedWorks.length:', selectedWorks.length);
  console.log('   screenData?.selectedWorks?.length:', screenData?.selectedWorks?.length);
  console.log('   screenData?.returnToEditor:', screenData?.returnToEditor);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç –¥–ª—è dropdown
  const { data: allWorks = [], isLoading: isLoadingAllWorks } = useQuery({
    queryKey: ['all-work-types'],
    queryFn: api.getAllWorkTypes,
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–º–µ—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–º–µ—Ç (–Ω–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö)
  const shouldLoadItems = Boolean(
    selectedEstimate?.estimate_id && !createNewEstimate
  );
  
  console.log('üîç DataExpert: –ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', {
    shouldLoadItems,
    hasEstimateId: !!selectedEstimate?.estimate_id,
    createNewEstimate,
    editMode,
    viewMode,
    estimateId: selectedEstimate?.estimate_id
  });
  
  const { data: estimateItems, isLoading: isLoadingItems } = useQuery({
    queryKey: ['estimate-items', selectedEstimate?.estimate_id],
    queryFn: () => {
      const estimateId = selectedEstimate?.estimate_id;
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–º–µ—Ç—ã ID:', estimateId);
      if (!estimateId) {
        throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω ID —Å–º–µ—Ç—ã');
      }
      return api.getEstimateItems(estimateId);
    },
    enabled: shouldLoadItems
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–º–µ—Ç—ã - –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
  React.useEffect(() => {
    if (estimateItems && estimateItems.length > 0 && allWorks && allWorks.length > 0 && !isEstimateItemsLoaded) {
      console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Å–º–µ—Ç—ã (–ü–ï–†–í–´–ô –†–ê–ó):', estimateItems);
      console.log('üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:', allWorks.slice(0, 3));
      console.log('‚ö†Ô∏è –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï selectedWorks –ü–ï–†–ï–î –ó–ê–ì–†–£–ó–ö–û–ô:', selectedWorks.length);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–º–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç —Å –ø–æ–∏—Å–∫–æ–º –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É
      const works = estimateItems.map(item => {
        console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–º–µ—Ç—ã:', item);
        
        // –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ ID
        const workTypeId = item.work_type?.work_type_id || item.work_type_id || item.work_type;
        const workFromCatalog = allWorks.find(w => 
          (w.work_type_id || w.id) === workTypeId
        );
        
        console.log(`üîé –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã ID=${workTypeId}:`, workFromCatalog);
        
        return {
          id: workTypeId,
          name: workFromCatalog?.name || workFromCatalog?.work_name || item.work_type?.work_name || item.work_type_name || item.name || `–†–∞–±–æ—Ç–∞ #${workTypeId}`,
          work_name: workFromCatalog?.name || workFromCatalog?.work_name || item.work_type?.work_name || item.work_type_name || item.name,
          unit: workFromCatalog?.unit || workFromCatalog?.unit_of_measurement || item.work_type?.unit_of_measurement || item.unit || item.unit_of_measurement,
          unit_of_measurement: workFromCatalog?.unit || workFromCatalog?.unit_of_measurement || item.work_type?.unit_of_measurement || item.unit || item.unit_of_measurement,
          cost_price: item.cost_price_per_unit || item.cost_price || workFromCatalog?.cost_price || 0,
          client_price: item.client_price_per_unit || item.client_price || workFromCatalog?.client_price || 0,
          price: item.cost_price_per_unit || item.cost_price || workFromCatalog?.cost_price || 0,
          quantity: parseFloat(item.quantity) || 1.0
        };
      });
      console.log('üîß –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:', works);
      console.log('üö® –£–°–¢–ê–ù–û–í–ö–ê selectedWorks –ò–ó –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –≠–õ–ï–ú–ï–ù–¢–û–í –°–ú–ï–¢–´');
      console.log('‚ö†Ô∏è –¢–ï–ö–£–©–ò–ï –†–ê–ë–û–¢–´ –ü–ï–†–ï–î –£–°–¢–ê–ù–û–í–ö–û–ô:', selectedWorks.length);
      
      // –ö–†–ò–¢–ò–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ —Ä–∞–±–æ—Ç—ã —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
      if (!isWorksInitialized) {
        console.log('‚úÖ –ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç –∏–∑ —Å–º–µ—Ç—ã');
        setSelectedWorks(works);
        setOriginalWorks(works); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setHasUnsavedChanges(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        setIsWorksInitialized(true); // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
      } else {
        console.log('‚ö†Ô∏è –†–ê–ë–û–¢–´ –£–ñ–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–´ - –ù–ï –ü–ï–†–ï–ó–ê–ü–ò–°–´–í–ê–ï–ú');
        // –ù–µ —Ç—Ä–æ–≥–∞–µ–º selectedWorks, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      }
      
      setIsEstimateItemsLoaded(true); // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    }
  }, [estimateItems, allWorks, isEstimateItemsLoaded, isWorksInitialized]);
  
  // SecurityExpert: –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ selectedWorks –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
  const stableSelectedWorks = useMemo(() => {
    const works = screenData?.selectedWorks;
    if (!works || !Array.isArray(works)) return null;
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É-–∫–ª—é—á –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    return JSON.stringify(works.map(w => ({ id: w.id || w.work_type_id, quantity: w.quantity })));
  }, [screenData?.selectedWorks]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –∏–∑ WorkSelection - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  React.useEffect(() => {
    console.log('üîÑ useEffect –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç —Å—Ä–∞–±–æ—Ç–∞–ª:', {
      stableSelectedWorks,
      hasScreenData: !!screenData,
      hasSelectedWorks: !!screenData?.selectedWorks,
      returnToEditor: screenData?.returnToEditor,
      selectedWorksCount: screenData?.selectedWorks?.length || 0,
      currentWorksInTable: selectedWorks.length
    });
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞–±–æ—Ç –≤ screenData
    if (!screenData?.selectedWorks || screenData.selectedWorks.length === 0) {
      console.log('‚ùå –ù–ï–¢ –†–ê–ë–û–¢ –≤ screenData –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
      return;
    }
    
    // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ returnToEditor - —ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ –º—ã –ø—Ä–∏—à–ª–∏ –∏–∑ WorkSelection
    if (!screenData?.returnToEditor) {
      console.log('‚ùå –ù–ï–¢ –§–õ–ê–ì–ê returnToEditor - —ç—Ç–æ –ù–ï –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ WorkSelection');
      return;
    }
    
    console.log('‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –í–æ–∑–≤—Ä–∞—Ç –∏–∑ WorkSelection —Å —Ä–∞–±–æ—Ç–∞–º–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
    
    console.log('üîÑ –ü–†–û–í–ï–†–ö–ê –ù–ê –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢:', {
      currentScreen,
      hasScreenData: !!screenData,
      hasSelectedWorks: !!screenData?.selectedWorks,
      selectedWorksCount: screenData?.selectedWorks?.length || 0,
      currentWorksInTable: selectedWorks.length,
      returnToEditor: screenData?.returnToEditor
    });
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—Ç—ã –∏–∑ screenData
    const worksToAdd = screenData?.selectedWorks;
    
    console.log('üéØ –ù–ê–ô–î–ï–ù–´ –†–ê–ë–û–¢–´ –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø!');
    console.log('üìã –†–∞–±–æ—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', worksToAdd);
    
    // –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø - –í–°–ï–ì–î–ê –î–û–ë–ê–í–õ–Ø–ï–ú –ö –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú
    console.log('üîÑ –ü–†–û–°–¢–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢');
    console.log('üìã –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:');
    console.log('   - –†–∞–±–æ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', selectedWorks.length);
    console.log('   - –†–∞–±–æ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', worksToAdd.length);
    
    setSelectedWorks(currentWorks => {
      console.log('üî• –í–ù–£–¢–†–ò setSelectedWorks:');
      console.log('   - –¢–µ–∫—É—â–∏–µ —Ä–∞–±–æ—Ç—ã:', currentWorks.length);
      console.log('   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–∫—É—â–∏—Ö —Ä–∞–±–æ—Ç:', currentWorks.map(w => ({ id: w.id, name: w.name })));
      console.log('   - –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—ã:', worksToAdd.length);
      console.log('   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö —Ä–∞–±–æ—Ç:', worksToAdd.map(w => ({ id: w.id || w.work_type_id, name: w.name || w.work_name })));
      
      // –ü–†–û–°–¢–û –î–û–ë–ê–í–õ–Ø–ï–ú –≤—Å–µ –Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
      const newWorksToAdd = worksToAdd.map(newWork => {
        const workId = newWork.id || newWork.work_type_id;
        const cost = parseFloat(newWork.prices?.cost_price) || parseFloat(newWork.cost_price) || parseFloat(newWork.price) || 0;
        const client = parseFloat(newWork.prices?.client_price) || cost;
        const quantity = parseFloat(newWork.quantity) || 1;
        
        return {
          // Desktop —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
          item_id: `new_${workId}_${Date.now()}_${Math.random()}`,
          work_type: workId,
          work_type_id: workId,
          work_name: newWork.name || newWork.work_name,
          unit_of_measurement: newWork.unit || newWork.unit_of_measurement,
          quantity: quantity,
          cost_price_per_unit: cost,
          client_price_per_unit: client,
          total_cost: cost * quantity,
          total_client: client * quantity,
          // UI —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
          id: workId,
          name: newWork.name || newWork.work_name,
          unit: newWork.unit || newWork.unit_of_measurement,
          cost_price: cost
        };
      });
      
      const finalWorks = [...currentWorks, ...newWorksToAdd];
      console.log('‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:', finalWorks.length, '—Ä–∞–±–æ—Ç');
      console.log('‚úÖ –°–¢–†–£–ö–¢–£–†–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –†–ï–ó–£–õ–¨–¢–ê–¢–ê:', finalWorks.map((w, index) => ({ 
        index, 
        id: w.id, 
        name: w.name, 
        item_id: w.item_id 
      })));
      return finalWorks;
    });
    
    setHasUnsavedChanges(true);
    console.log('‚úÖ –†–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏');
    
    // –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º screenData —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    console.log('üßπ –û—á–∏—â–∞–µ–º screenData –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—Ç');
    setScreenData('estimate-editor', {
      ...screenData,
      selectedWorks: null,
      returnToEditor: false
    });
    
  }, [stableSelectedWorks, screenData?.returnToEditor, setScreenData]); // –ü–†–ê–í–ò–õ–¨–ù–´–ï –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–æ–≤ —Ä–∞–±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const worksHaveChanged = (current, original) => {
    if (current.length !== original.length) return true;
    
    return current.some((work, index) => {
      const originalWork = original[index];
      if (!originalWork) return true;
      
      return (
        work.id !== originalWork.id ||
        work.quantity !== originalWork.quantity
      );
    });
  };
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞–±–æ—Ç–∞—Ö
  React.useEffect(() => {
    const hasChanges = worksHaveChanged(selectedWorks, originalWorks);
    setHasUnsavedChanges(hasChanges);
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', { hasChanges, currentCount: selectedWorks.length, originalCount: originalWorks.length });
  }, [selectedWorks, originalWorks]);

  // Filter works by search term - –í–ê–ñ–ù–û: –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏ –î–û —É—Å–ª–æ–≤–Ω—ã—Ö returns
  const filteredWorks = useMemo(() => {
    if (!searchTerm.trim()) return selectedWorks;
    
    const searchLower = searchTerm.toLowerCase();
    return selectedWorks.filter(work => {
      const workName = (work.name || work.work_name || '').toLowerCase();
      const workUnit = (work.unit || work.unit_of_measurement || '').toLowerCase();
      return workName.includes(searchLower) || workUnit.includes(searchLower);
    });
  }, [selectedWorks, searchTerm]);

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö
  React.useEffect(() => {
    if (!selectedProject) {
      console.warn('EstimateSummary: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç selectedProject, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ projects');
      navigateToScreen('projects');
    }
  }, [selectedProject, navigateToScreen]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∞
  if (screenError) {
    return (
      <div className="mobile-screen">
        <div className="mobile-error">
          <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</h3>
          <p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∞: {screenError.message}</p>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≥–æ—Ç–æ–≤—ã
  if (!selectedProject) {
    return (
      <div className="mobile-screen">
        <LoadingSpinner message="–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã..." />
      </div>
    );
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (selectedWorks.length === 0) {
    console.log('‚ö†Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü—Ä–∏—á–∏–Ω—ã:', {
      selectedWorksLength: selectedWorks.length,
      isLoadingItems,
      selectedEstimate: !!selectedEstimate,
      createNewEstimate,
      shouldShowEmpty: selectedWorks.length === 0
    });
    
    return (
      <div className="mobile-screen">
        <div className="mobile-empty">
          <div className="mobile-empty-text">–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç</div>
          <div className="mobile-empty-subtext">
            {isLoadingItems ? '–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—Ç—ã –∏–∑ —Å–º–µ—Ç—ã...' : '–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É —Ä–∞–±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã'}
          </div>
          <button 
            className="mobile-btn"
            onClick={() => navigateToScreen('categories')}
            style={{ marginTop: '16px' }}
          >
            –í—ã–±—Ä–∞—Ç—å —Ä–∞–±–æ—Ç—ã
          </button>
        </div>
      </div>
    );
  }

  // Calculate totals
  const totalCost = selectedWorks.reduce((sum, work) => {
    const price = work.cost_price || work.prices?.cost_price || work.price || 0;
    const quantity = parseFloat(work.quantity) || 1.0;
    return sum + price * quantity;
  }, 0);

  const totalItems = selectedWorks.reduce((sum, work) => {
    return sum + (parseFloat(work.quantity) || 1.0);
  }, 0);

  // Handle work quantity change
  const handleQuantityChange = (workIndex, newQuantity) => {
    const updatedWorks = [...selectedWorks];
    updatedWorks[workIndex].quantity = Math.max(1.0, parseFloat(newQuantity) || 1.0);
    setSelectedWorks(updatedWorks);
    console.log('üìù –ò–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã:', updatedWorks[workIndex]);
  };

  // Handle work removal
  const handleRemoveWork = (workIndex) => {
    const updatedWorks = selectedWorks.filter((_, index) => index !== workIndex);
    setSelectedWorks(updatedWorks);
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞, –æ—Å—Ç–∞–ª–æ—Å—å:', updatedWorks.length);
  };

  // Handle adding work from dropdown
  // === –≠–¢–ê–õ–û–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ò–ó DESKTOP EDITOR ===
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–º–µ—Ç—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º - –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø
  const updateItem = (itemId, field, value) => {
    const numericValue = parseFloat(value);
    if (isNaN(numericValue) && value !== '') return;
    
    setSelectedWorks(prev => prev.map(item => {
      if (item.item_id === itemId) {
        const updatedItem = { ...item, [field]: numericValue };
        const cost = parseFloat(updatedItem.cost_price_per_unit) || 0;
        const client = parseFloat(updatedItem.client_price_per_unit) || 0;
        const qty = parseFloat(updatedItem.quantity) || 0;
        
        return {
          ...updatedItem,
          total_cost: cost * qty,
          total_client: client * qty
        };
      }
      return item;
    }));
    
    setHasUnsavedChanges(true);
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –≤ —Å–º–µ—Ç—É - –ê–î–ê–ü–¢–ò–†–û–í–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ò–ó DESKTOP
  const handleAddWorksToEstimate = (newWorks) => {
    console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –≤ —Å–º–µ—Ç—É (desktop –ª–æ–≥–∏–∫–∞):', newWorks);
    
    const newItems = newWorks.map(work => {
      const cost = parseFloat(work.prices?.cost_price) || 0;
      const client = parseFloat(work.prices?.client_price) || 0;
      
      return {
        item_id: `new_${work.work_type_id}_${Date.now()}_${Math.random()}`,
        work_type: work.work_type_id,
        work_type_id: work.work_type_id,
        work_name: work.work_name,
        unit_of_measurement: work.unit_of_measurement,
        quantity: 1,
        cost_price_per_unit: cost,
        client_price_per_unit: client,
        total_cost: cost,
        total_client: client
      };
    });
    
    setSelectedWorks(prev => [...(prev || []), ...newItems]);
    setHasUnsavedChanges(true);
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–±–æ—Ç —Å desktop –ª–æ–≥–∏–∫–æ–π:', newItems.length);
  };

  const handleAddWork = (work) => {
    // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º UI - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    handleAddWorksToEstimate([{
      work_type_id: work.id || work.work_type_id,
      work_name: work.name || work.work_name,
      unit_of_measurement: work.unit || work.unit_of_measurement,
      prices: {
        cost_price: work.cost_price || work.prices?.cost_price || work.price || 0,
        client_price: work.cost_price || work.prices?.client_price || work.price || 0
      }
    }]);
    
    setSearchTerm(''); // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫
  };
  
  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleSaveChanges = async () => {
    setIsSaving(true);
    setError(null);

    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–º–µ—Ç–µ:', {
        selectedEstimate,
        selectedWorksCount: selectedWorks.length
      });

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ —Ä–∞–±–æ—Ç - –≠–¢–ê–õ–û–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
      const itemsToSave = selectedWorks.map(work => ({
        work_type: work.work_type || work.work_type_id,
        quantity: parseFloat(work.quantity) || 1,
        cost_price_per_unit: parseFloat(work.cost_price_per_unit) || 0,
        client_price_per_unit: parseFloat(work.client_price_per_unit) || 0
      }));

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const dataToSend = {
        project_id: selectedProject.project_id || selectedProject.id,
        foreman_id: user.user_id || user.id,
        estimate_number: estimateName || selectedEstimate?.estimate_number || '–°–º–µ—Ç–∞',
        status_id: selectedEstimate?.status_id || 1,
        items: itemsToSave,
      };

      console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏:', dataToSend);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–º–µ—Ç—É
      const estimate = await api.updateEstimate(selectedEstimate.estimate_id, dataToSend);
      console.log('‚úÖ –°–º–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', estimate);

      // Invalidate cache
      queryClient.invalidateQueries(['estimates']);
      queryClient.invalidateQueries(['estimate-items']);
      queryClient.invalidateQueries(['projects']);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setOriginalWorks([...selectedWorks]);
      setHasUnsavedChanges(false);
      
      console.log('üéâ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:', error);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setIsSaving(false);
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –≥—Ä–∏–≤–Ω–∞—Ö
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('uk-UA', {
      style: 'currency',
      currency: 'UAH',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  };

  // Generate auto name if needed
  const generateEstimateName = () => {
    const timestamp = new Date().toISOString()
      .replace(/[:.]/g, '-')
      .slice(0, 19);
    return `–°–º–µ—Ç–∞_${timestamp}_${selectedProject.name}`;
  };

  const handleSave = async () => {
    setIsSaving(true);
    setError(null);

    try {
      console.log('üîç –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–º–µ—Ç—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –æ–±—ã—á–Ω—ã–º UI:', {
        createNewEstimate,
        selectedEstimate,
        selectedProject,
        user,
        selectedWorksCount: selectedWorks.length
      });

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ —Ä–∞–±–æ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–±—ã—á–Ω–æ–≥–æ UI - –≠–¢–ê–õ–û–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
      const itemsToSave = selectedWorks.map(work => ({
        work_type: work.work_type || work.work_type_id || work.id,
        quantity: parseFloat(work.quantity) || 1,
        cost_price_per_unit: parseFloat(work.cost_price_per_unit) || parseFloat(work.cost_price) || parseFloat(work.prices?.cost_price) || parseFloat(work.price) || 0,
        client_price_per_unit: parseFloat(work.client_price_per_unit) || parseFloat(work.cost_price) || parseFloat(work.prices?.client_price) || parseFloat(work.price) || 0
      }));

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º UI
      const dataToSend = {
        project_id: selectedProject.project_id || selectedProject.id,
        foreman_id: user.user_id || user.id,
        estimate_number: estimateName || generateEstimateName(),
        status_id: 1, // Draft status
        items: itemsToSave,
      };

      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã —Å items:', dataToSend);

      let estimate;
      if (editMode && selectedEstimate) {
        // –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–º–µ—Ç—É
        estimate = await api.updateEstimate(selectedEstimate.estimate_id, dataToSend);
        console.log('‚úÖ –°–º–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', estimate);
      } else if (createNewEstimate || !selectedEstimate) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–º–µ—Ç—É —Å–æ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å—Ä–∞–∑—É
        estimate = await api.createEstimate(dataToSend);
        console.log('‚úÖ –°–º–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', estimate);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–º–µ—Ç—É (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
        estimate = await api.updateEstimate(selectedEstimate.estimate_id, dataToSend);
        console.log('‚úÖ –°–º–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', estimate);
      }

      // Invalidate cache and navigate
      queryClient.invalidateQueries(['estimates']);
      queryClient.invalidateQueries(['projects']);

      console.log('üéâ –°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
      
      // Navigate back to project info
      navigateToScreen('project-info', false, { selectedProject });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã:', error);
      console.error('Stack trace:', error.stack);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–º–µ—Ç—É: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setIsSaving(false);
    }
  };

  if (isSaving) {
    return (
      <div className="mobile-screen">
        <LoadingSpinner message="–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ—Ç—É..." />
      </div>
    );
  }

  if (isLoadingItems) {
    return (
      <div className="mobile-screen">
        <LoadingSpinner message="–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã..." />
      </div>
    );
  }

  return (
    <div className="mobile-screen">
      {/* Estimate Name Card */}
      <div className="mobile-card">
        <div className="estimate-header-section">
          <div className="form-field">
            <label className="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã</label>
            <input
              type="text"
              value={estimateName}
              onChange={(e) => setEstimateName(e.target.value)}
              className="field-input"
              style={{ background: '#1E1E1E', border: '2px solid #333' }}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã..."
            />
          </div>
          <div className="project-name-display" style={{ textAlign: 'center', marginTop: '16px', fontSize: '16px', color: '#CCCCCC', fontWeight: '500' }}>
            {selectedProject?.name || selectedProject?.project_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}
          </div>
        </div>
      </div>

      {/* Add Works Dropdown - centered title */}
      <div style={{ marginTop: '8px' }}>
        <WorksDropdown 
          allWorks={allWorks}
          searchTerm={searchTerm}
          setSearchTerm={setSearchTerm}
          onAddWork={handleAddWork}
          selectedWorks={selectedWorks}
        />
      </div>

      {/* Selected Works Table */}
      <div className="works-table-container">
        <div className="works-table-header">
          <h3 className="section-title" style={{ textAlign: 'center' }}>–ò—Ç–æ–≥–æ–≤–∞—è —Å–º–µ—Ç–∞</h3>
        </div>
        
        {filteredWorks.length === 0 ? (
          <div className="mobile-empty">
            <div className="mobile-empty-text">
              {searchTerm ? '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : '–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç'}
            </div>
          </div>
        ) : (
          <div className="works-table">
            <div className="works-table-head">
              <div className="table-cell-name">–†–∞–±–æ—Ç–∞</div>
              <div className="table-cell-qty">–ö–æ–ª-–≤–æ</div>
              <div className="table-cell-price">–¶–µ–Ω–∞</div>
              <div className="table-cell-total">–ò—Ç–æ–≥–æ</div>
            </div>
            
            {filteredWorks.map((work, index) => {
              const originalIndex = selectedWorks.findIndex(w => w === work);
              return (
                <WorkTableRow 
                  key={`${work.id}-${originalIndex}`}
                  work={work}
                  index={originalIndex}
                  onQuantityChange={handleQuantityChange}
                  onRemove={handleRemoveWork}
                  formatCurrency={formatCurrency}
                />
              );
            })}
            
            {/* Total Row */}
            <div className="works-table-total-row">
              <div className="table-cell-name">
                <div className="work-name total-label">–ò–¢–û–ì–û:</div>
              </div>
              <div className="table-cell-qty total-items">{totalItems.toFixed(1)}</div>
              <div className="table-cell-price"></div>
              <div className="table-cell-total total-amount">{formatCurrency(totalCost)}</div>
            </div>
          </div>
        )}
      </div>

      {/* Error Message */}
      {error && (
        <div className="mobile-card">
          <ErrorMessage message={error} />
        </div>
      )}

      {/* Action Buttons */}
      <div className="mobile-card action-buttons">
        
        {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç - –ï–î–ò–ù–ê–Ø –õ–û–ì–ò–ö–ê –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤ */}
        <button 
          className="mobile-btn mobile-btn-compact"
          onClick={() => {
            console.log('üîß UI/UxDesiner: –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –∫–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—ã":', {
              selectedProject: selectedProject?.project_name,
              selectedEstimate: selectedEstimate?.estimate_id,
              createNewEstimate,
              editMode,
              viewMode
            });
            // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∫–∞–∫ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ—Ç—ã
            navigateToScreen('works', true, { 
              selectedProject, 
              selectedEstimate, 
              editMode: true,
              createNewEstimate: createNewEstimate,  // ‚úÖ –ü–ï–†–ï–î–ê–ï–ú –†–ï–ê–õ–¨–ù–û–ï –ó–ù–ê–ß–ï–ù–ò–ï
              viewMode: false
            });
          }}
        >
          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—ã
        </button>
        
        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –¥–ª—è –í–°–ï–• —Å–ª—É—á–∞–µ–≤ (—Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) */}
        <button 
          className="mobile-btn mobile-btn-primary mobile-btn-compact"
          onClick={createNewEstimate ? handleSave : handleSaveChanges}
          disabled={createNewEstimate ? (selectedWorks.length === 0 || isSaving) : (!hasUnsavedChanges || isSaving)}
          style={{ 
            backgroundColor: (createNewEstimate ? selectedWorks.length > 0 : hasUnsavedChanges) ? '#4CAF50' : '#333', 
            borderColor: (createNewEstimate ? selectedWorks.length > 0 : hasUnsavedChanges) ? '#4CAF50' : '#333',
            color: (createNewEstimate ? selectedWorks.length > 0 : hasUnsavedChanges) ? '#000' : '#666'
          }}
        >
          {isSaving ? '–°–æ—Ö—Ä–∞–Ω—è–µ–º...' : (createNewEstimate ? '–°–æ–∑–¥–∞—Ç—å —Å–º–µ—Ç—É' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è')}
        </button>
      </div>
    </div>
  );
};

/**
 * Work Table Row Component
 * Individual row in the works table with touch edit/delete functionality
 */
const WorkTableRow = ({ work, index, onQuantityChange, onRemove, formatCurrency }) => {
  const [isEditing, setIsEditing] = React.useState(false);
  const [tempQuantity, setTempQuantity] = React.useState(work.quantity);
  const [touchTimer, setTouchTimer] = React.useState(null);
  const [touchStart, setTouchStart] = React.useState(null);
  const [swipeDistance, setSwipeDistance] = React.useState(0);
  const [isSwipeDeleteActive, setIsSwipeDeleteActive] = React.useState(false);

  const handleTouchStart = (e) => {
    const touch = e.touches[0];
    setTouchStart({ x: touch.clientX, y: touch.clientY });
    setSwipeDistance(0);
    
    const timer = setTimeout(() => {
      setIsEditing(true);
      setTouchTimer(null);
    }, 500); // 500ms long press
    setTouchTimer(timer);
  };

  const handleTouchMove = (e) => {
    if (!touchStart || isEditing) return;
    
    const touch = e.touches[0];
    const deltaX = touchStart.x - touch.clientX;
    const deltaY = Math.abs(touchStart.y - touch.clientY);
    
    // –¢–æ–ª—å–∫–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
    if (deltaY < 30 && deltaX > 10) {
      if (touchTimer) {
        clearTimeout(touchTimer);
        setTouchTimer(null);
      }
      
      setSwipeDistance(Math.min(deltaX, 120));
      if (deltaX > 80) {
        setIsSwipeDeleteActive(true);
      } else {
        setIsSwipeDeleteActive(false);
      }
    }
  };

  const handleTouchEnd = () => {
    if (touchTimer) {
      clearTimeout(touchTimer);
      setTouchTimer(null);
    }
    
    if (swipeDistance > 80) {
      // –£–¥–∞–ª—è–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º —Å–≤–∞–π–ø–µ
      onRemove(index);
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
      setSwipeDistance(0);
      setIsSwipeDeleteActive(false);
    }
    
    setTouchStart(null);
  };

  const handleQuantitySubmit = () => {
    onQuantityChange(index, tempQuantity);
    setIsEditing(false);
  };

  const handleRemoveClick = () => {
    onRemove(index);
  };

  if (isEditing) {
    return (
      <div className="works-table-row editing">
        <div className="table-cell-name">
          <div className="work-name">
            {work.name || work.work_name || `–†–∞–±–æ—Ç–∞ #${work.id}`}
          </div>
          <div className="work-unit">{work.unit || work.unit_of_measurement}</div>
        </div>
        <div className="table-cell-qty editing-cell">
          <input
            type="number"
            inputMode="numeric"
            pattern="[0-9]*"
            value={tempQuantity}
            onChange={(e) => setTempQuantity(parseInt(e.target.value) || 1)}
            className="quantity-edit-input-large"
            min="1"
            autoFocus
            onFocus={(e) => e.target.select()}
          />
        </div>
        <div className="table-cell-price">
          {formatCurrency(work.cost_price || work.prices?.cost_price || work.price || 0)}
        </div>
        <div className="table-cell-actions">
          <button 
            className="action-btn save-btn"
            onClick={handleQuantitySubmit}
          >
            ‚úì
          </button>
          <button 
            className="action-btn delete-btn"
            onClick={handleRemoveClick}
          >
            ‚úó
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="swipe-container">
      <div 
        className={`works-table-row ${isSwipeDeleteActive ? 'swipe-delete-active' : ''}`}
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
        style={{
          transform: `translateX(-${swipeDistance}px)`,
          transition: swipeDistance === 0 ? 'transform 0.3s ease' : 'none'
        }}
      >
        <div className="table-cell-name">
          <div className="work-name">
            {work.name || work.work_name || `–†–∞–±–æ—Ç–∞ #${work.id}`}
          </div>
          <div className="work-unit">{work.unit || work.unit_of_measurement}</div>
        </div>
        <div className="table-cell-qty">{parseFloat(work.quantity || 1).toFixed(1)}</div>
        <div className="table-cell-price">
          {formatCurrency(work.cost_price || work.prices?.cost_price || work.price || 0)}
        </div>
        <div className="table-cell-total">
          {formatCurrency((work.cost_price || work.prices?.cost_price || work.price || 0) * work.quantity)}
        </div>
      </div>
      
      {swipeDistance > 0 && (
        <div 
          className={`swipe-delete-background ${isSwipeDeleteActive ? 'active' : ''}`}
          style={{ width: `${swipeDistance}px` }}
        >
          <span className="delete-icon">üóëÔ∏è</span>
          <span className="delete-text">–£–¥–∞–ª–∏—Ç—å</span>
        </div>
      )}
    </div>
  );
};

/**
 * Works Dropdown Component
 * Dropdown for adding works to estimate
 */
const WorksDropdown = ({ allWorks, searchTerm, setSearchTerm, onAddWork, selectedWorks }) => {
  const [isOpen, setIsOpen] = React.useState(false);

  const filteredWorks = React.useMemo(() => {
    if (!searchTerm.trim()) return [];
    
    const searchLower = searchTerm.toLowerCase();
    const selectedWorkIds = selectedWorks.map(w => w.id || w.work_type_id);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–±–æ—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    const matchingWorks = allWorks
      .filter(work => {
        const workName = (work.name || work.work_name || '').toLowerCase();
        const isAlreadySelected = selectedWorkIds.includes(work.id || work.work_type_id);
        return workName.includes(searchLower) && !isAlreadySelected;
      })
      .map(work => {
        const workName = (work.name || work.work_name || '').toLowerCase();
        let relevanceScore = 0;
        
        // –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
        
        // 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if (workName === searchLower) {
          relevanceScore = 1000;
        }
        // 2. –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏ - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç  
        else if (workName.startsWith(searchLower)) {
          relevanceScore = 900;
        }
        // 3. –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–∞ –ª—é–±–æ–≥–æ —Å–ª–æ–≤–∞ - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        else if (workName.includes(' ' + searchLower)) {
          relevanceScore = 800;
        }
        // 4. –ê–Ω–∞–ª–∏–∑ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        else {
          const searchWords = searchLower.split(' ').filter(word => word.length > 0);
          let wordMatches = 0;
          let totalWordScore = 0;
          
          searchWords.forEach(searchWord => {
            if (workName.includes(searchWord)) {
              wordMatches++;
              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –∑–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
              if (workName.startsWith(searchWord) || workName.includes(' ' + searchWord)) {
                totalWordScore += 50;
              } else {
                totalWordScore += 25;
              }
            }
          });
          
          // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∫—Ä—ã—Ç–∏—è —Å–ª–æ–≤
          const wordMatchRatio = wordMatches / searchWords.length;
          relevanceScore = Math.floor(wordMatchRatio * 700 + totalWordScore);
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
        if (relevanceScore > 0 && workName.length < 50) {
          relevanceScore += 10;
        }
        
        return { ...work, relevanceScore };
      })
      .sort((a, b) => b.relevanceScore - a.relevanceScore) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      .slice(0, 10); // –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    
    return matchingWorks;
  }, [allWorks, searchTerm, selectedWorks]);

  const handleSearchChange = (e) => {
    const value = e.target.value;
    setSearchTerm(value);
    setIsOpen(value.length > 0);
  };

  const handleSelectWork = (work) => {
    onAddWork(work);
    setIsOpen(false);
  };

  return (
    <div className="works-dropdown-container">
      <div className="dropdown-header">
        <h3 className="dropdown-title" style={{ textAlign: 'center' }}>–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É</h3>
      </div>
      
      <div className="dropdown-search-wrapper">
        <input
          type="text"
          placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã..."
          value={searchTerm}
          onChange={handleSearchChange}
          className="dropdown-search-input"
          onFocus={() => setIsOpen(searchTerm.length > 0)}
          onBlur={() => setTimeout(() => setIsOpen(false), 200)}
        />
        
        {isOpen && filteredWorks.length > 0 && (
          <div className="dropdown-results">
            {filteredWorks.map((work) => (
              <div
                key={work.id || work.work_type_id}
                className="dropdown-item"
                onMouseDown={() => handleSelectWork(work)}
              >
                <div className="dropdown-item-name">
                  {work.name || work.work_name}
                </div>
                <div className="dropdown-item-details">
                  {work.unit || work.unit_of_measurement} ‚Ä¢ 
                  {new Intl.NumberFormat('uk-UA', {
                    style: 'currency',
                    currency: 'UAH',
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                  }).format(work.cost_price || work.prices?.cost_price || work.price || 0)}
                </div>
              </div>
            ))}
          </div>
        )}
        
        {isOpen && searchTerm.length > 0 && filteredWorks.length === 0 && (
          <div className="dropdown-no-results">
            <div className="no-results-text">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
          </div>
        )}
      </div>
    </div>
  );
};

export default EstimateSummary;