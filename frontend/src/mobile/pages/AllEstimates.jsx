import React, { useState } from 'react';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import { useMobileNavigationContext } from '../context/MobileNavigationContext';
import { useMobileAuth } from '../MobileApp';
import { api } from '../../api/client';
import { normalizeApiResponse } from '../utils/apiHelpers';
import EstimateCard from '../components/ui/EstimateCard';
import LoadingSpinner from '../components/ui/LoadingSpinner';
import ErrorMessage from '../components/ui/ErrorMessage';

/**
 * –í—Å–µ –°–º–µ—Ç—ã - –≠–∫—Ä–∞–Ω
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–º–µ—Ç—ã –ø—Ä–æ—Ä–∞–±–∞ –≤–æ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
 */
const AllEstimates = () => {
  const { navigateToScreen, clearWorksFromScreen } = useMobileNavigationContext();
  const { user } = useMobileAuth();
  const queryClient = useQueryClient();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
  const [selectedProjectFilter, setSelectedProjectFilter] = useState('all');
  const [isFilterOpen, setIsFilterOpen] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–º–µ—Ç—ã –ø—Ä–æ—Ä–∞–±–∞
  const { 
    data: estimatesResponse, 
    isLoading: estimatesLoading, 
    error,
    refetch 
  } = useQuery({
    queryKey: ['all-estimates', user?.user_id],
    queryFn: api.getEstimates,
    enabled: !!user,
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ—Ç:', error);
    }
  });
  
  // Normalize estimates data
  const estimates = normalizeApiResponse(estimatesResponse);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
  const { 
    data: projectsResponse, 
    isLoading: projectsLoading 
  } = useQuery({
    queryKey: ['projects', user?.user_id],
    queryFn: api.getProjects,
    enabled: !!user
  });
  
  // Normalize projects data
  const projects = normalizeApiResponse(projectsResponse);

  console.log('üë§ User Debug:', user);
  console.log('üìä Estimates Debug:', estimates?.length || 0);
  console.log('üèóÔ∏è Projects Debug:', projects?.length || 0);
  
  if (estimates?.length > 0) {
    console.log('üìÑ –ü–µ—Ä–≤–∞—è —Å–º–µ—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:', estimates[0]);
    console.log('üìÑ –°—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–æ–π —Å–º–µ—Ç—ã:', estimates[0]?.status);
  }

  const isLoading = estimatesLoading || projectsLoading;

  const handleEstimateSelect = (estimate) => {
    console.log('üñ±Ô∏è AllEstimates: –ö–ª–∏–∫ –ø–æ —Å–º–µ—Ç–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ estimate-summary (—Ç–∞–±–ª–∏—Ü–∞ —Ä–∞–±–æ—Ç —Å–º–µ—Ç—ã)', estimate);
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ–π —Ä–∞–±–æ—Ç —Å–º–µ—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const relatedProject = projects.find(p => 
      (p.project_id || p.id) === (estimate.project?.project_id || estimate.project_id || estimate.project)
    );
    
    console.log('üîó AllEstimates: –ù–∞–π–¥–µ–Ω —Å–≤—è–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç', relatedProject);
    
    navigateToScreen('estimate-summary', true, { 
      selectedEstimate: estimate,
      selectedProject: relatedProject,
      createNewEstimate: false, // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–º–µ—Ç—É
      editMode: true, // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ—Ç—ã
      viewMode: true // –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–±–æ—Ç
    });
  };

  const handleDeleteEstimate = async (estimate) => {
    console.log('üóëÔ∏è AllEstimates: –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–º–µ—Ç—ã:', estimate);
    
    try {
      await api.deleteEstimate(estimate.estimate_id);
      console.log('‚úÖ AllEstimates: –°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–º–µ—Ç –∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
      refetch();
      
      // –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–º–µ—Ç
      queryClient.invalidateQueries(['projects']);
      setTimeout(() => {
        queryClient.refetchQueries(['projects']);
        console.log('üîÑ AllEstimates: –û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã');
      }, 300);
      
      // –û—á–∏—â–∞–µ–º navigation context –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å–º–µ—Ç—ã
      clearWorksFromScreen('estimate-summary', estimate.estimate_id);
      
    } catch (error) {
      console.error('‚ùå AllEstimates: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–º–µ—Ç—É: ${error.message}`);
    }
  };

  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  const calculateStatistics = () => {
    const inProgressEstimates = estimates.filter(e => 
      (e.status?.status_name || e.status) === '–í —Ä–∞–±–æ—Ç–µ'
    );
    const completedEstimates = estimates.filter(e => 
      (e.status?.status_name || e.status) === '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
    );
    const pendingEstimates = estimates.filter(e => 
      (e.status?.status_name || e.status) === '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏'
    );

    return {
      inProgress: inProgressEstimates.length,
      completed: completedEstimates.length,
      pending: pendingEstimates.length,
      total: estimates.length
    };
  };

  // –û–±–æ–≥–∞—â–∞–µ–º —Å–º–µ—Ç—ã –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö
  const enrichedEstimates = Array.isArray(estimates) ? estimates.map(estimate => {
    const project = projects.find(p => 
      p.project_id === estimate.project || 
      p.id === estimate.project ||
      p.project_id === estimate.project_id
    );
    
    return {
      ...estimate,
      project_name: project?.name || project?.project_name || '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
      project_obj: project
    };
  }) : [];

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–º–µ—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
  const filteredEstimates = selectedProjectFilter === 'all' 
    ? enrichedEstimates 
    : enrichedEstimates.filter(estimate => {
        const projectId = estimate.project_obj?.project_id || estimate.project_obj?.id;
        return String(projectId) === String(selectedProjectFilter);
      });

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
  const projectsForFilter = Array.isArray(projects) ? projects.filter(project => {
    return enrichedEstimates.some(estimate => 
      estimate.project_obj?.project_id === project.project_id || 
      estimate.project_obj?.id === project.id
    );
  }) : [];

  console.log('üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è Debug:');
  console.log('- selectedProjectFilter:', selectedProjectFilter);
  console.log('- enrichedEstimates:', enrichedEstimates.length);
  console.log('- filteredEstimates:', filteredEstimates.length);
  console.log('- projectsForFilter:', projectsForFilter.length);

  // –£–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É - –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã
  const displayEstimates = filteredEstimates;

  if (isLoading) {
    return (
      <div className="mobile-screen">
        <LoadingSpinner message="–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ —Å–º–µ—Ç—ã..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="mobile-screen">
        <ErrorMessage 
          message="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–º–µ—Ç—ã" 
          onRetry={refetch}
        />
      </div>
    );
  }

  if (estimates.length === 0) {
    return (
      <div className="mobile-screen">
        <div className="mobile-empty">
          <div className="mobile-empty-text">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–º–µ—Ç</div>
          <div className="mobile-empty-subtext">
            –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π —Å–º–µ—Ç—ã
          </div>
          <button 
            className="mobile-btn" 
            onClick={() => navigateToScreen('projects')}
            style={{ marginTop: '16px' }}
          >
            –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
          </button>
        </div>
      </div>
    );
  }

  const statistics = calculateStatistics();

  return (
    <div className="mobile-screen">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º - —Ç–æ—Ç –∂–µ –¥–∏–∑–∞–π–Ω –∫–∞–∫ –≤ ProjectInfo */}
      <div className="finance-cards-grid">
        <div className="finance-card-item">
          <div className="finance-card-value">{statistics.inProgress}</div>
          <div className="finance-card-label">–í —Ä–∞–±–æ—Ç–µ</div>
        </div>
        <div className="finance-card-item">
          <div className="finance-card-value">{statistics.completed}</div>
          <div className="finance-card-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
        </div>
        <div className="finance-card-item">
          <div className="finance-card-value">{statistics.pending}</div>
          <div className="finance-card-label">–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏</div>
        </div>
      </div>

      {/* –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º - Dropdown */}
      <div className="mobile-card">
        <div className="filter-dropdown">
          <div 
            className="filter-dropdown-header"
            onClick={() => setIsFilterOpen(!isFilterOpen)}
          >
            <div className="filter-dropdown-label">
              <span className="filter-text">
                {selectedProjectFilter === 'all' 
                  ? `–í—Å–µ –æ–±—ä–µ–∫—Ç—ã ‚Ä¢ ${enrichedEstimates.length} —Å–º–µ—Ç` 
                  : (() => {
                      const selectedProject = projectsForFilter.find(p => 
                        String(p.project_id || p.id) === String(selectedProjectFilter)
                      );
                      const count = enrichedEstimates.filter(estimate => 
                        String(estimate.project_obj?.project_id || estimate.project_obj?.id) === String(selectedProjectFilter)
                      ).length;
                      return `${selectedProject?.name || selectedProject?.project_name || '–û–±—ä–µ–∫—Ç'} ‚Ä¢ ${count} —Å–º–µ—Ç`;
                    })()
                }
              </span>
            </div>
            <div className={`filter-arrow ${isFilterOpen ? 'open' : ''}`}>‚ñº</div>
          </div>
          
          {isFilterOpen && (
            <div className="filter-dropdown-menu">
              <div 
                className={`filter-dropdown-item ${selectedProjectFilter === 'all' ? 'active' : ''}`}
                onClick={() => {
                  setSelectedProjectFilter('all');
                  setIsFilterOpen(false);
                }}
              >
                <span>–í—Å–µ –æ–±—ä–µ–∫—Ç—ã</span>
                <span className="filter-count">{enrichedEstimates.length} —Å–º–µ—Ç</span>
              </div>
              
              {projectsForFilter.map(project => {
                const projectEstimatesCount = enrichedEstimates.filter(estimate => 
                  String(estimate.project_obj?.project_id || estimate.project_obj?.id) === String(project.project_id || project.id)
                ).length;
                const projectId = project.project_id || project.id;
                
                return (
                  <div 
                    key={projectId}
                    className={`filter-dropdown-item ${String(selectedProjectFilter) === String(projectId) ? 'active' : ''}`}
                    onClick={() => {
                      setSelectedProjectFilter(projectId);
                      setIsFilterOpen(false);
                    }}
                  >
                    <span>{project.name || project.project_name}</span>
                    <span className="filter-count">{projectEstimatesCount} —Å–º–µ—Ç</span>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>

      {/* –í—Å–µ —Å–º–µ—Ç—ã –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ */}
      {displayEstimates.length === 0 ? (
        <div className="mobile-card">
          <div className="mobile-empty">
            <div className="mobile-empty-text">–ù–µ—Ç —Å–º–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞</div>
            <div className="mobile-empty-subtext">
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–º–µ—Ç—É
            </div>
          </div>
        </div>
      ) : (
        <div className="mobile-card">
          <div className="mobile-list">
            {displayEstimates.map((estimate) => (
              <EstimateCard
                key={estimate.estimate_id}
                estimate={estimate}
                onClick={() => handleEstimateSelect(estimate)}
                onDelete={handleDeleteEstimate}
                showProject={true}
              />
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default AllEstimates;