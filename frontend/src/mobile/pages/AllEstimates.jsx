import React from 'react';
import { useQuery } from '@tanstack/react-query';
import { useMobileNavigationContext } from '../context/MobileNavigationContext';
import { useMobileAuth } from '../MobileApp';
import { api } from '../../api/client';
import EstimateCard from '../components/ui/EstimateCard';
import LoadingSpinner from '../components/ui/LoadingSpinner';
import ErrorMessage from '../components/ui/ErrorMessage';

/**
 * –í—Å–µ –°–º–µ—Ç—ã - –≠–∫—Ä–∞–Ω
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–º–µ—Ç—ã –ø—Ä–æ—Ä–∞–±–∞ –≤–æ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
 */
const AllEstimates = () => {
  const { navigateToScreen } = useMobileNavigationContext();
  const { user } = useMobileAuth();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–º–µ—Ç—ã –ø—Ä–æ—Ä–∞–±–∞
  const { 
    data: estimates = [], 
    isLoading, 
    error,
    refetch 
  } = useQuery({
    queryKey: ['all-estimates', user?.id],
    queryFn: api.getEstimates,
    enabled: !!user,
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ—Ç:', error);
    }
  });

  const handleEstimateSelect = (estimate) => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–º–µ—Ç—ã
    navigateToScreen('works-summary', true, { 
      selectedEstimate: estimate,
      viewMode: true 
    });
  };

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–º–µ—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  const groupedEstimates = estimates.reduce((groups, estimate) => {
    const status = estimate.status?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    if (!groups[status]) {
      groups[status] = [];
    }
    groups[status].push(estimate);
    return groups;
  }, {});

  if (isLoading) {
    return (
      <div className="mobile-screen">
        <LoadingSpinner message="–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ —Å–º–µ—Ç—ã..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="mobile-screen">
        <ErrorMessage 
          message="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–º–µ—Ç—ã" 
          onRetry={refetch}
        />
      </div>
    );
  }

  if (estimates.length === 0) {
    return (
      <div className="mobile-screen">
        <div className="mobile-empty">
          <div className="mobile-empty-icon">üìã</div>
          <div className="mobile-empty-text">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–º–µ—Ç</div>
          <div className="mobile-empty-subtext">
            –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π —Å–º–µ—Ç—ã
          </div>
          <button 
            className="mobile-btn" 
            onClick={() => navigateToScreen('projects')}
            style={{ marginTop: '16px' }}
          >
            –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="mobile-screen">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="mobile-card">
        <h2 className="section-title">–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
        <div className="mobile-grid-3">
          <div className="stat-item">
            <div className="stat-number">{estimates.length}</div>
            <div className="stat-label">–í—Å–µ–≥–æ —Å–º–µ—Ç</div>
          </div>
          <div className="stat-item">
            <div className="stat-number">
              {estimates.filter(e => e.status?.name === '–í —Ä–∞–±–æ—Ç–µ').length}
            </div>
            <div className="stat-label">–í —Ä–∞–±–æ—Ç–µ</div>
          </div>
          <div className="stat-item">
            <div className="stat-number">
              {estimates.filter(e => e.status?.name === '–ó–∞–≤–µ—Ä—à–µ–Ω–∞').length}
            </div>
            <div className="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
          </div>
        </div>
      </div>

      {/* –°–º–µ—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º */}
      {Object.entries(groupedEstimates).map(([status, statusEstimates]) => (
        <div key={status} className="mobile-card">
          <div className="status-group-header">
            <h3 className="status-group-title">{status}</h3>
            <span className="status-group-count">
              {statusEstimates.length}
            </span>
          </div>
          <div className="mobile-list">
            {statusEstimates.map((estimate) => (
              <EstimateCard
                key={estimate.estimate_id}
                estimate={estimate}
                onClick={() => handleEstimateSelect(estimate)}
              />
            ))}
          </div>
        </div>
      ))}
    </div>
  );
};

export default AllEstimates;