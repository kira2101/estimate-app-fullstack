import React, { useState, useMemo, useEffect } from 'react';
import { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';
import { useMobileNavigationContext } from '../context/MobileNavigationContext';
import { useMobileAuth } from '../MobileApp';
import { api } from '../../api/client';
import { apiWithEvents } from '../../api/apiWithEvents';
import { normalizeApiResponse } from '../utils/apiHelpers';
import LoadingSpinner from '../components/ui/LoadingSpinner';
import ErrorMessage from '../components/ui/ErrorMessage';
import WorkSearchDropdown from '../components/ui/WorkSearchDropdown';
import './EstimateSummary.css';
import { 
  normalizeWorksData, 
  convertEstimateItemsToWorks, 
  createStableKey, 
  calculateTotalAmount, 
  formatCurrency,
  isValidWork,
  mergeWorksArrays
} from '../utils/dataUtils';

/**
 * Estimate Summary Screen
 * Final step to review and save estimate with selected works
 */
const EstimateSummary = () => {
  const { navigateToScreen, getScreenData, setScreenData, addWorksToScreen, getWorksFromScreen, clearWorksFromScreen, currentScreen, navigationData } = useMobileNavigationContext();
  const { user } = useMobileAuth();
  const queryClient = useQueryClient();
  
  console.log('üöÄ –û–¢–õ–ê–î–ö–ê EstimateSummary: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ù–ê–ß–ê–õ–û —Ä–µ–Ω–¥–µ—Ä–∞');
  console.log('üìä –û–¢–õ–ê–î–ö–ê EstimateSummary - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user?.role);
  
  // SecurityExpert: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  const isForeman = user?.role === '–ø—Ä–æ—Ä–∞–±';
  const canViewClientPrices = !isForeman; // –ü—Ä–æ—Ä–∞–±—ã –ù–ï –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Ü–µ–Ω—ã
  
  console.log('üîí –û–¢–õ–ê–î–ö–ê EstimateSummary - –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:', {
    userRole: user?.role,
    isForeman,
    canViewClientPrices
  });

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∞
  let screenData;
  try {
    screenData = getScreenData();
    console.log('üìÑ –û–¢–õ–ê–î–ö–ê EstimateSummary - –î–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∞:', screenData);
  } catch (error) {
    console.error('‚ùå –û–¢–õ–ê–î–ö–ê EstimateSummary - –û—à–∏–±–∫–∞ –≤ getScreenData:', error);
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ screenData
  const selectedProject = screenData?.selectedProject;
  const selectedEstimate = screenData?.selectedEstimate;
  const createNewEstimate = screenData?.createNewEstimate;
  const editMode = screenData?.editMode;
  const viewMode = screenData?.viewMode;
  const screenDataWorks = screenData?.selectedWorks || [];
  
  console.log('üîç –û–¢–õ–ê–î–ö–ê EstimateSummary - screenData.selectedWorks:', screenDataWorks.length, '—Ä–∞–±–æ—Ç');
  
  // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ß–ò–©–ê–ï–ú –ö–≠–® –ü–†–ò –ú–û–ù–¢–ò–†–û–í–ê–ù–ò–ò (–ë–ï–ó–û–ü–ê–°–ù–û)
  React.useEffect(() => {
    try {
      if (selectedEstimate?.estimate_id) {
        console.log('üßπ [CACHE] –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è estimate-items:', selectedEstimate.estimate_id);
        queryClient.removeQueries(['estimate-items', selectedEstimate.estimate_id]);
        queryClient.invalidateQueries(['estimate-items', selectedEstimate.estimate_id]);
      }
    } catch (error) {
      console.error('‚ùå [CACHE] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
    }
  }, [selectedEstimate?.estimate_id, queryClient]);
  
  console.log('üîç –û–¢–õ–ê–î–ö–ê EstimateSummary - selectedEstimate:', selectedEstimate?.estimate_id);
  console.log('üîç –û–¢–õ–ê–î–ö–ê EstimateSummary - createNewEstimate:', createNewEstimate);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–°–û–•–†–ê–ù–Ø–ï–ú –°–¢–ê–†–´–ô UI)
  const [estimateName, setEstimateName] = useState(() => {
    // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–º–µ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ
    if (selectedEstimate?.name || selectedEstimate?.estimate_number) {
      return selectedEstimate.name || selectedEstimate.estimate_number;
    }
    
    // –î–ª—è –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –°–º_(–æ–±—ä–µ–∫—Ç)-(–¥–∞—Ç–∞)-(–≤—Ä–µ–º—è)
    const now = new Date();
    const date = now.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });
    const time = now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    const projectName = selectedProject?.name || selectedProject?.project_name || '–û–±—ä–µ–∫—Ç';
    return `–°–º_${projectName}-${date}-${time}`;
  });
  const [originalEstimateName] = useState(() => {
    return selectedEstimate?.name || selectedEstimate?.estimate_number || '';
  });
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState(null);
  const [nameError, setNameError] = useState(null);
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è selectedWorks 
  const [selectedWorks, setSelectedWorks] = useState([]);
  
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [originalWorks, setOriginalWorks] = useState([]);
  const [isInitialized, setIsInitialized] = useState(false); // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ü–û–°–õ–ï –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  console.log('üîç –û–¢–õ–ê–î–ö–ê EstimateSummary - –°–æ—Å—Ç–æ—è–Ω–∏—è:', {
    hasUnsavedChanges,
    selectedWorksCount: selectedWorks?.length || 0,
    originalWorksCount: originalWorks?.length || 0,
    createNewEstimate: screenData?.createNewEstimate,
    editMode: screenData?.editMode,
    isInitialized
  });

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ —Å–º–µ—Ç—ã
  const checkNameUniqueness = (name) => {
    if (!name.trim()) return null;
    
    const trimmedName = name.trim();
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ) —Å–º–µ—Ç—ã
    const existingEstimate = allEstimates.find(est => 
      est.estimate_number === trimmedName && 
      est.estimate_id !== selectedEstimate?.estimate_id && // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–º–µ—Ç—É –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      !est.deleted_at // –ò—Å–∫–ª—é—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–º–µ—Ç—ã
    );
    
    return existingEstimate ? '–°–º–µ—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : null;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Å–º–µ—Ç—ã
  const handleNameChange = (newName) => {
    setEstimateName(newName);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–º—è –Ω–µ –ø—É—Å—Ç–æ–µ
    const error = checkNameUniqueness(newName);
    setNameError(error);
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ (–¥–∞–∂–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
    const nameChanged = newName.trim() !== originalEstimateName.trim();
    if (nameChanged && !error) {
      setHasUnsavedChanges(true);
      console.log('üîÑ EstimateSummary: –ò–º—è —Å–º–µ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–æ, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
  };


  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç
  const { data: allWorksResponse, isLoading: isLoadingAllWorks } = useQuery({
    queryKey: ['all-work-types'],
    queryFn: api.getAllWorkTypes,
  });
  
  // Normalize works data
  const allWorks = normalizeApiResponse(allWorksResponse);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–º–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏
  const { data: allEstimatesResponse } = useQuery({
    queryKey: ['estimates-mobile'],
    queryFn: () => api.getEstimates(), // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º mobile_sum
  });
  
  // Normalize estimates data
  const allEstimates = normalizeApiResponse(allEstimatesResponse);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–º–µ—Ç—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const shouldLoadItems = Boolean(selectedEstimate?.estimate_id && !createNewEstimate);
  
  console.log('üìã [QUERY] shouldLoadItems:', shouldLoadItems, ', selectedEstimate:', selectedEstimate?.estimate_id, ', createNewEstimate:', createNewEstimate, ', screenData.createNewEstimate:', screenData?.createNewEstimate);
  
  console.log('üó∫Ô∏è [QUERY] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è useQuery:', { 
    queryKey: ['estimate-items', selectedEstimate?.estimate_id],
    enabled: shouldLoadItems 
  });
  
  const { data: estimateItems, isLoading: isLoadingItems, error: queryError } = useQuery({
    queryKey: ['estimate-items', selectedEstimate?.estimate_id],
    queryFn: async () => {
      console.log('üî• [QUERY_START] *** QUERY_FN –ó–ê–ü–£–©–ï–ù ***');
      console.log('üó∫Ô∏è [QUERY] –ò—Å–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å getEstimateItems –¥–ª—è ID:', selectedEstimate.estimate_id);
      console.log('üó∫Ô∏è [QUERY] –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', localStorage.getItem('authToken')?.substring(0, 10) + '...');
      
      try {
        console.log('üîÑ [QUERY] –ù–∞—á–∏–Ω–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å...');
        const result = await api.getEstimateItems(selectedEstimate.estimate_id); // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º mobileFilter
        console.log('‚úÖ [QUERY] –û—Ç–≤–µ—Ç –æ—Ç API getEstimateItems:', result);
        console.log('‚úÖ [QUERY] –¢–∏–ø –æ—Ç–≤–µ—Ç–∞:', typeof result, ', –Ø–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', Array.isArray(result));
        if (result && result.results) {
          console.log('‚úÖ [QUERY] –ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - results.length:', result.results.length);
          result.results.forEach((item, idx) => {
            console.log(`üîç DEBUG: –†–∞–±–æ—Ç–∞ ${idx + 1}:`, {
              name: item.work_name,
              added_by: item.added_by,
              added_by_name: item.added_by_name
            });
          });
        }
        console.log('üèÅ [QUERY_END] *** QUERY_FN –ó–ê–í–ï–†–®–ï–ù ***');
        return result;
      } catch (error) {
        console.error('‚ùå [QUERY] –û—à–∏–±–∫–∞ –≤ queryFn:', error);
        console.error('üî• [QUERY_ERROR] *** QUERY_FN –û–®–ò–ë–ö–ê ***');
        throw error;
      }
    },
    enabled: shouldLoadItems,
    staleTime: 0, // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ß–ò–©–ê–ï–ú –ö–≠–®
    cacheTime: 0, // –û–¢–ö–õ–Æ–ß–ê–ï–ú –ö–≠–®–ò–†–û–í–ê–ù–ò–ï
    refetchOnMount: 'always', // –í–°–ï–ì–î–ê –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
    onSuccess: (data) => {
      console.log('‚úÖ [QUERY] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã estimateItems:', data);
      const normalized = normalizeApiResponse(data);
      console.log('‚úÖ [QUERY] –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ estimateItems:', normalized.length);
    },
    onError: (error) => {
      console.error('‚ùå [QUERY] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ estimateItems:', error);
    }
  });
  
  console.log('üó∫Ô∏è [QUERY] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:', { 
    isLoading: isLoadingItems, 
    hasData: !!estimateItems,
    dataLength: estimateItems?.length || 0,
    hasError: !!queryError 
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç –∏–∑ navigation context
  React.useEffect(() => {
    try {
      console.log('üîÑ [INIT] *** USEEFFECT –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø *** selectedEstimate:', selectedEstimate?.estimate_id);
      console.log('üîÑ [INIT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EstimateSummary, selectedEstimate:', selectedEstimate?.estimate_id);
      
      // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ—Ç—ã —Å—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—Ç—ã –∏–∑ navigation context
      if (selectedEstimate && !createNewEstimate) {
        const estimateId = selectedEstimate.estimate_id || selectedEstimate.id;
        if (estimateId) {
          const worksFromContext = getWorksFromScreen('estimate-summary', estimateId);
          console.log('üîÑ [INIT_WORKS] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç –≤ navigation context –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', {
            estimateId,
            worksCount: worksFromContext.length,
            uniqueKey: `estimate-summary-${estimateId}`,
            works: worksFromContext.map(w => ({ id: w.work_type_id || w.id, name: w.work_name || w.name }))
          });
          
          if (worksFromContext.length > 0) {
            const normalizedWorks = normalizeWorksData(worksFromContext);
            console.log('‚úÖ [INIT_WORKS] –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—Ç—ã –∏–∑ context –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', normalizedWorks.length);
            setSelectedWorks(normalizedWorks);
          } else {
            console.log('‚ö†Ô∏è [INIT_WORKS] –†–∞–±–æ—Ç—ã –≤ navigation context –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ API');
            // –ü–†–û–°–¢–û–ï –ü–†–ê–í–ò–õ–û: –ï—Å–ª–∏ —Ä–∞–±–æ—Ç –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ - –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π useEffect
            console.log('‚ö†Ô∏è [INIT_WORKS] –†–∞–±–æ—Ç—ã –≤ navigation context –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ API —á–µ—Ä–µ–∑ —Å–ª–µ–¥—É—é—â–∏–π useEffect');
          }
        }
      }
      
      setIsInitialized(true);
      console.log('‚úÖ [INIT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå [INIT] –û—à–∏–±–∫–∞ –≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      setIsInitialized(true); // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    }
  }, [selectedEstimate, createNewEstimate, estimateItems]); // –î–æ–±–∞–≤–ª—è–µ–º estimateItems –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  React.useEffect(() => {
    console.log('üîÑ [FORCED_TRIGGER] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π useEffect –¥–ª—è returnFromWorkSelection =', screenData?.returnFromWorkSelection);
    console.log('üîÑ [FORCED_TRIGGER] screenData keys =', Object.keys(screenData || {}));
    console.log('üîÑ [FORCED_TRIGGER] isInitialized =', isInitialized);
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤ navigation context –¥–ª—è —ç—Ç–æ–π —Å–º–µ—Ç—ã
    const estimateId = selectedEstimate?.estimate_id || selectedEstimate?.id;
    if (estimateId) {
      const worksInContext = getWorksFromScreen('estimate-summary', estimateId);
      console.log('üîç [FORCED_CHECK] Navigation context –¥–ª—è estimate-summary-' + estimateId + ':', worksInContext.length, '—Ä–∞–±–æ—Ç');
      if (worksInContext.length > 0) {
        console.log('üîç [FORCED_CHECK] –ü–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞:', worksInContext[0]?.work_name || worksInContext[0]?.name);
      }
    }
  }, [screenData?.returnFromWorkSelection, getWorksFromScreen, selectedEstimate]);

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º useEffect –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ navigation context
  React.useEffect(() => {
    const currentEstimateId = selectedEstimate?.estimate_id || selectedEstimate?.id;
    if (currentEstimateId && isInitialized) {
      const worksInContext = getWorksFromScreen('estimate-summary', currentEstimateId);
      console.log('üîÑ [CONTEXT_SYNC] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å navigation context:', {
        currentSelectedWorksCount: selectedWorks.length,
        contextWorksCount: worksInContext.length,
        estimateId: currentEstimateId
      });
      
      // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–∏—Ö selectedWorks, –æ–±–Ω–æ–≤–ª—è–µ–º
      if (worksInContext.length !== selectedWorks.length) {
        console.log('üîÑ [CONTEXT_SYNC] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º selectedWorks');
        const normalizedWorks = normalizeWorksData(worksInContext);
        setSelectedWorks(normalizedWorks);
      }
    }
  }, [getWorksFromScreen, selectedEstimate, isInitialized, selectedWorks.length]); // –î–æ–±–∞–≤–ª—è–µ–º selectedWorks.length –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

  // –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–º–µ—Ç—ã
  React.useEffect(() => {
    console.log('üîÑ [USEEFFECT_START] –û—Å–Ω–æ–≤–Ω–æ–π useEffect –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ù–ê–ß–ê–õ–°–Ø');
    
    const currentEstimateId = selectedEstimate?.estimate_id || selectedEstimate?.id;
    const returnFromWorkSelection = screenData?.returnFromWorkSelection;
    
    console.log('üìã [USER_ACTION] –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ—Ç—ã:', {
      estimateId: currentEstimateId,
      estimateName: selectedEstimate?.estimate_number || '–ù–æ–≤–∞—è —Å–º–µ—Ç–∞',
      mode: createNewEstimate ? 'CREATE' : editMode ? 'EDIT' : 'VIEW',
      returnFromWorkSelection: returnFromWorkSelection,
      isInitialized,
      screenDataKeys: Object.keys(screenData || {})
    });
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ WorkSelection –ù–ï –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
    // –ü—É—Å—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É
    if (returnFromWorkSelection && isInitialized) {
      console.log('‚¨ÖÔ∏è [RETURN] –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∏–∑ WorkSelection - –ø—É—Å—Ç—å useEffect –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–µ—à–∞–µ—Ç –ø—Ä–æ –∫–Ω–æ–ø–∫—É');
      // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hasUnsavedChanges –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ - –¥–∞–¥–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—é
    }
    
    if (!isInitialized) {
      console.log('‚è≥ [STATUS] –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
      return;
    }
    
    if (createNewEstimate) {
      const worksInContext = getWorksFromScreen('estimate-summary');
      console.log('üÜï [DATA_CHECK] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã - —Ä–∞–±–æ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:', worksInContext.length);
      
      if (worksInContext.length === 0 && selectedWorks.length > 0) {
        console.log('üßπ [ACTION] –û—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—Ç –¥–ª—è –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã');
        setSelectedWorks([]);
        setOriginalWorks([]);
        return;
      }
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç —Å –ü–†–ò–û–†–ò–¢–ï–¢–û–ú navigation context –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–º–µ—Ç
    let worksToLoad;
    if (createNewEstimate || !currentEstimateId) {
      // –î–ª—è –Ω–æ–≤—ã—Ö —Å–º–µ—Ç —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º screenData.selectedWorks, –ø–æ—Ç–æ–º navigation context
      if (screenDataWorks.length > 0) {
        worksToLoad = screenDataWorks;
        console.log('üÜï [DATA_LOAD] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã –∏–∑ screenData:', {
          worksCount: worksToLoad.length,
          source: 'screenData.selectedWorks',
          works: worksToLoad.map(w => ({ id: w.work_type_id || w.id, name: w.work_name || w.name }))
        });
      } else {
        worksToLoad = getWorksFromScreen('estimate-summary');
        console.log('üÜï [DATA_LOAD] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã –∏–∑ navigation context:', {
          worksCount: worksToLoad.length,
          source: 'getWorksFromScreen',
          screenKey: 'estimate-summary',
          works: worksToLoad.map(w => ({ id: w.work_type_id || w.id, name: w.work_name || w.name }))
        });
      }
    } else {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–º–µ—Ç –ü–†–ò–û–†–ò–¢–ï–¢ —É navigation context —Å estimateId
      const uniqueKey = `estimate-summary-${currentEstimateId}`;
      worksToLoad = getWorksFromScreen('estimate-summary', currentEstimateId);
      console.log('üìù [DATA_LOAD] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ—Ç—ã –∏–∑ navigation context:', {
        estimateId: currentEstimateId,
        uniqueKey: uniqueKey,
        worksCount: worksToLoad.length,
        worksToLoad: worksToLoad.map(w => ({ id: w.work_type_id || w.id, name: w.work_name || w.name }))
      });
      
      // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ï—Å–ª–∏ –≤ navigation context –Ω–µ—Ç —Ä–∞–±–æ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º screenData
      if (worksToLoad.length === 0 && screenDataWorks.length > 0) {
        worksToLoad = screenDataWorks;
        console.log('üìù [DATA_LOAD] Fallback: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ screenData –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ—Ç—ã:', {
          estimateId: currentEstimateId,
          worksCount: worksToLoad.length,
          source: 'screenData.selectedWorks fallback'
        });
      }
    }
    
    if (worksToLoad.length > 0) {
      const normalizedWorks = normalizeWorksData(worksToLoad);
      console.log('‚úÖ [RESULT] –†–∞–±–æ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
        –∏—Å—Ö–æ–¥–Ω–æ: worksToLoad.length,
        –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: normalizedWorks.length,
        —Ä–∞–±–æ—Ç—ã: normalizedWorks.map(w => w.work_name || w.name).join(', ')
      });
      
      setSelectedWorks(normalizedWorks);
      
      // –ö–†–ò–¢–ò–ß–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–û: originalWorks —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ—Ç—ã –∏–∑ –ë–î
      // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ navigation context (—ç—Ç–æ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
      if (originalWorks.length === 0 && !screenData?.returnFromWorkSelection) {
        console.log('üìù [ORIGINAL_WORKS] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º originalWorks –ò–ó –ë–î (–ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ returnFromWorkSelection)');
        setOriginalWorks(normalizedWorks);
      } else {
        console.log('üìù [ORIGINAL_WORKS] –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º originalWorks - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        console.log('üìù [ORIGINAL_WORKS] –ü—Ä–∏—á–∏–Ω–∞: returnFromWorkSelection =', screenData?.returnFromWorkSelection, ', originalWorks.length =', originalWorks.length);
      }
    } else {
      console.log('‚ö†Ô∏è [RESULT] –†–∞–±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å–º–µ—Ç—ã ID:', currentEstimateId || '–Ω–æ–≤–∞—è');
    }
    
    console.log('üèÅ [USEEFFECT_END] –û—Å–Ω–æ–≤–Ω–æ–π useEffect –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ó–ê–í–ï–†–®–ï–ù');
  }, [isInitialized, selectedEstimate, screenData?.returnFromWorkSelection, screenData?.selectedEstimate?.estimate_id]); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–µ –≤–µ—Å—å –æ–±—ä–µ–∫—Ç
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–±–æ—Ç –∏–∑ API –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  React.useEffect(() => {
    console.log('üìã [SHOULD_LOAD] –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π shouldLoadFromAPI:', {
      editMode,
      selectedEstimate: !!selectedEstimate,
      estimate_id: selectedEstimate?.estimate_id,
      createNewEstimate: createNewEstimate,
      allWorksLength: allWorks.length,
      estimateItemsLength: estimateItems?.results?.length || estimateItems?.length || 0,
      estimateItemsData: estimateItems
    });
    
    const shouldLoadFromAPI = (
      editMode && 
      selectedEstimate && 
      selectedEstimate.estimate_id &&
      !createNewEstimate &&
      allWorks.length > 0 && 
      (estimateItems?.results?.length > 0 || estimateItems?.length > 0)
    );
    
    console.log('üìã [SHOULD_LOAD] shouldLoadFromAPI =', shouldLoadFromAPI);
    
    if (shouldLoadFromAPI) {
      const currentEstimateId = selectedEstimate.estimate_id || selectedEstimate.id;
      const existingWorksInContext = getWorksFromScreen('estimate-summary', currentEstimateId);
      
      const apiItemsLength = estimateItems?.results?.length || estimateItems?.length || 0;
      console.log('üîç [API_CHECK] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ API - —Ä–∞–±–æ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:', existingWorksInContext.length, ', –∏–∑ API:', apiItemsLength);
      
      if (existingWorksInContext.length === 0 && estimateItems && apiItemsLength > 0) {
        console.log('üì• [API_LOAD] –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º estimateItems:', apiItemsLength);
        const normalizedItems = normalizeApiResponse(estimateItems);
        console.log('üì• [API_LOAD] –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ items:', normalizedItems.length);
        
        const works = convertEstimateItemsToWorks(normalizedItems);
        console.log('üì• [API_LOAD] –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç –∏–∑ API:', works.length, '—Ä–∞–±–æ—Ç');
        
        const normalizedWorks = normalizeWorksData(works);
        setSelectedWorks(normalizedWorks);
        addWorksToScreen('estimate-summary', works, currentEstimateId);
        console.log('üìù [ORIGINAL_WORKS] –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º originalWorks –∏–∑ API:', works.length, '—Ä–∞–±–æ—Ç');
        setOriginalWorks(works); // –ö–†–ò–¢–ò–ß–ù–û: –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î
        setHasUnsavedChanges(false);
      } else if (existingWorksInContext.length > 0 && selectedWorks.length === 0) {
        console.log('üì• [CONTEXT_LOAD] –†–∞–±–æ—Ç—ã –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ selectedWorks');
        const normalizedWorks = normalizeWorksData(existingWorksInContext);
        setSelectedWorks(normalizedWorks);
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º originalWorks –¢–û–õ–¨–ö–û –∏–∑ API, –Ω–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (estimateItems?.results?.length > 0 || estimateItems?.length > 0) {
          const normalizedItems = normalizeApiResponse(estimateItems);
          const originalWorksFromAPI = convertEstimateItemsToWorks(normalizedItems);
          console.log('üìù [ORIGINAL_WORKS] –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º originalWorks –∏–∑ API (fallback):', originalWorksFromAPI.length, '—Ä–∞–±–æ—Ç');
          setOriginalWorks(originalWorksFromAPI); // –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ–≥–¥–∞ –∏–∑ API, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        }
        setHasUnsavedChanges(false);
      }
    }
  }, [editMode, selectedEstimate, allWorks, estimateItems, createNewEstimate, selectedWorks.length]);
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
  React.useEffect(() => {
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–º–µ—Ç (–Ω–µ –¥–ª—è –Ω–æ–≤—ã—Ö)
    if (!editMode || createNewEstimate || !isInitialized) return;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –ø–æ ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    const selectedIds = selectedWorks.map(w => ({
      id: w.work_type_id || w.id,
      quantity: parseFloat(w.quantity || 0)
    })).sort((a, b) => String(a.id).localeCompare(String(b.id)));
    
    const originalIds = originalWorks.map(w => ({
      id: w.work_type_id || w.id,
      quantity: parseFloat(w.quantity || 0)
    })).sort((a, b) => String(a.id).localeCompare(String(b.id)));
    
    const hasChanges = JSON.stringify(selectedIds) !== JSON.stringify(originalIds);
    
    console.log('üíæ [SAVE_BUTTON]', hasChanges ? '–ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê' : '–ù–ï–ê–ö–¢–ò–í–ù–ê', '- —Ä–∞–±–æ—Ç selected/original:', selectedWorks.length, '/', originalWorks.length);
    console.log('üíæ [SAVE_BUTTON] –î–µ—Ç–∞–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', {
      selectedIds: selectedIds,
      originalIds: originalIds,
      hasChanges,
      editMode,
      createNewEstimate,
      isInitialized
    });
    
    if (hasChanges !== hasUnsavedChanges) {
      console.log('üíæ [SAVE_BUTTON] –ò–∑–º–µ–Ω—è–µ–º hasUnsavedChanges —Å', hasUnsavedChanges, '–Ω–∞', hasChanges);
      setHasUnsavedChanges(hasChanges);
    }
  }, [selectedWorks, originalWorks, editMode, createNewEstimate, hasUnsavedChanges, isInitialized, selectedWorks.length, originalWorks.length]); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã
  const createMutation = useMutation({
    mutationFn: apiWithEvents.createEstimate,
    onSuccess: (createdEstimate) => {
      // –ö–†–ò–¢–ò–ß–ù–û: –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      queryClient.invalidateQueries(['estimates']);
      queryClient.invalidateQueries(['estimates-mobile']);
      queryClient.invalidateQueries(['all-estimates-mobile']);
      queryClient.invalidateQueries(['projects']);
      queryClient.invalidateQueries(['estimate-items']);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Ä–µ—Ñ–µ—Ç—á–∏–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç
      queryClient.refetchQueries(['estimates']);
      queryClient.refetchQueries(['estimates-mobile']);
      queryClient.refetchQueries(['all-estimates-mobile']);
      queryClient.refetchQueries(['projects']);
      console.log('üîÑ EstimateSummary: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –í–°–ï –∫—ç—à–∏ —Å–º–µ—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è');
      console.log('‚úÖ –°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', createdEstimate);
      
      // –ö–†–ò–¢–ò–ß–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
      setHasUnsavedChanges(false);
      setOriginalWorks([...selectedWorks]); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
      console.log('üîÑ EstimateSummary: hasUnsavedChanges —Å–±—Ä–æ—à–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã');
      
      // –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–º–µ—Ç—É —Å —Ä–∞–±–æ—Ç–∞–º–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if (createdEstimate && selectedWorks.length > 0) {
        const estimateId = createdEstimate.estimate_id || createdEstimate.id;
        console.log('üíæ EstimateSummary: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–º–µ—Ç—ã –≤ navigation context —Å ID =', estimateId);
        addWorksToScreen('estimate-summary', selectedWorks, estimateId);
      }
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞
      navigateToScreen('project-info', false, {
        selectedProject
      });
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã:', error);
      setError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã: ${error.message}`);
    },
    onSettled: () => {
      setIsSaving(false);
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã
  const updateMutation = useMutation({
    mutationFn: ({ id, data }) => apiWithEvents.updateEstimate(id, data),
    onSuccess: (updatedEstimate) => {
      // –ö–†–ò–¢–ò–ß–ù–û: –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      queryClient.invalidateQueries(['estimates']);
      queryClient.invalidateQueries(['estimates-mobile']);
      queryClient.invalidateQueries(['all-estimates-mobile']);
      queryClient.invalidateQueries(['estimate-items']);
      queryClient.invalidateQueries(['projects']);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Ä–µ—Ñ–µ—Ç—á–∏–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç
      queryClient.refetchQueries(['estimates']);
      queryClient.refetchQueries(['estimates-mobile']);
      queryClient.refetchQueries(['all-estimates-mobile']);
      queryClient.refetchQueries(['projects']);
      console.log('üîÑ EstimateSummary: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –í–°–ï –∫—ç—à–∏ —Å–º–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É–º–º—ã');
      console.log('‚úÖ –°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updatedEstimate);
      
      // –ö–†–ò–¢–ò–ß–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      setHasUnsavedChanges(false);
      setOriginalWorks([...selectedWorks]); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
      console.log('üîÑ EstimateSummary: hasUnsavedChanges —Å–±—Ä–æ—à–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã');
      
      // –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—ã –≤ navigation context –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (selectedEstimate && selectedWorks.length > 0) {
        const estimateId = selectedEstimate.estimate_id || selectedEstimate.id;
        console.log('üíæ EstimateSummary: –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—ã —Å–º–µ—Ç—ã –≤ navigation context —Å ID =', estimateId);
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞–±–æ—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        clearWorksFromScreen('estimate-summary', estimateId);
        addWorksToScreen('estimate-summary', selectedWorks, estimateId);
      }
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞
      navigateToScreen('project-info', false, {
        selectedProject
      });
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã:', error);
      setError(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã: ${error.message}`);
    },
    onSettled: () => {
      setIsSaving(false);
    }
  });

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Ä–∞–±–æ—Ç—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const filteredWorks = selectedWorks;

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç
  const totalCost = calculateTotalAmount(selectedWorks, 'cost');
  const totalClient = canViewClientPrices ? calculateTotalAmount(selectedWorks, 'client') : 0;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const updateItem = (itemId, field, value) => {
    setSelectedWorks(prev => 
      prev.map(work => {
        const workItemId = work.item_id || work.id || work.work_type_id;
        if (workItemId === itemId) {
          const updatedWork = { ...work, [field]: value };
          
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
          const cost = parseFloat(updatedWork.cost_price_per_unit || updatedWork.cost_price || 0);
          const client = parseFloat(updatedWork.client_price_per_unit || updatedWork.client_price || cost);
          const quantity = parseFloat(updatedWork.quantity || 0);
          
          updatedWork.total_cost = cost * quantity;
          updatedWork.total_client = client * quantity;
          
          return updatedWork;
        }
        return work;
      }).filter(work => parseFloat(work.quantity || 0) > 0)
    );
    setHasUnsavedChanges(true);
  };

  const removeItem = (itemId) => {
    setSelectedWorks(prev => 
      prev.filter(work => {
        const workItemId = work.item_id || work.id || work.work_type_id;
        return workItemId !== itemId;
      })
    );
    setHasUnsavedChanges(true);
  };

  // Handle adding work from search dropdown
  const handleWorkFromSearch = (work) => {
    console.log('üîç EstimateSummary: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏–∑ –ø–æ–∏—Å–∫–∞:', work.work_name || work.name);
    console.log('üîç EstimateSummary: –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:', work);
    
    // Check if work is already in the list
    const workId = work.work_type_id || work.id;
    const isAlreadySelected = selectedWorks.some(w => 
      (w.work_type_id || w.id) === workId
    );

    if (isAlreadySelected) {
      console.log('‚ö†Ô∏è EstimateSummary: –†–∞–±–æ—Ç–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–º–µ—Ç—É');
      return;
    }

    // Create new work item with prices from database
    // –¶–µ–Ω—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–æ–ª–µ prices (–∏–∑ WorkPrice model)
    const costPrice = parseFloat(work.prices?.cost_price || work.cost_price || 0);
    const clientPrice = parseFloat(work.prices?.client_price || work.client_price || costPrice || 0);
    
    console.log('üí∞ EstimateSummary: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã:', {
      raw_prices_object: work.prices,
      raw_cost_price: work.cost_price,
      calculated_cost_price: costPrice,
      calculated_client_price: clientPrice
    });
    
    const newWorkItem = {
      work_type_id: workId,
      work_type: workId,
      id: workId,
      work_name: work.work_name || work.name,
      name: work.work_name || work.name,
      unit_of_measurement: work.unit_of_measurement || work.unit || '—à—Ç.',
      unit: work.unit_of_measurement || work.unit || '—à—Ç.',
      category: work.category,
      quantity: 1, // Default quantity
      cost_price_per_unit: costPrice,
      cost_price: costPrice,
      client_price_per_unit: clientPrice,
      client_price: clientPrice
    };

    // Calculate totals
    newWorkItem.total_cost = newWorkItem.cost_price_per_unit * newWorkItem.quantity;
    newWorkItem.total_client = newWorkItem.client_price_per_unit * newWorkItem.quantity;

    console.log('‚úÖ EstimateSummary: –°–æ–∑–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç—ã:', {
      id: newWorkItem.work_type_id,
      name: newWorkItem.work_name,
      quantity: newWorkItem.quantity,
      cost_price: newWorkItem.cost_price_per_unit,
      client_price: newWorkItem.client_price_per_unit
    });

    // Add to selected works
    setSelectedWorks(prev => [...prev, newWorkItem]);
    setHasUnsavedChanges(true);

    // Also add to navigation context for persistence
    const currentEstimateId = selectedEstimate?.estimate_id || selectedEstimate?.id;
    if (createNewEstimate || !currentEstimateId) {
      addWorksToScreen('estimate-summary', [...selectedWorks, newWorkItem]);
    } else {
      addWorksToScreen('estimate-summary', [...selectedWorks, newWorkItem], currentEstimateId);
    }

    console.log('üíæ EstimateSummary: –†–∞–±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ navigation context');
  };

  const handleSave = async () => {
    if (!selectedProject || selectedWorks.length === 0) {
      setError('–ù–µ—Ç —Ä–∞–±–æ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }
    
    if (!estimateName.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã');
      return;
    }

    setIsSaving(true);
    setError(null);

    try {
      console.log('üîß EstimateSummary: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API:', {
        selectedProject,
        estimateName,
        selectedWorks: selectedWorks.map(w => ({ 
          id: w.work_type_id || w.id, 
          name: w.work_name, 
          quantity: w.quantity,
          cost_price: w.cost_price_per_unit || w.cost_price,
          client_price: w.client_price_per_unit || w.client_price
        }))
      });

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EstimateDetailSerializer
      const estimateData = {
        project_id: selectedProject.project_id || selectedProject.id,
        estimate_number: estimateName.trim(), // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º estimate_number –≤–º–µ—Å—Ç–æ name
        items: selectedWorks.map(work => {
          const workType = work.work_type_id || work.work_type || work.id;
          const quantity = parseFloat(work.quantity) || 1;
          const costPrice = parseFloat(work.cost_price_per_unit || work.cost_price) || 0;
          const clientPrice = parseFloat(work.client_price_per_unit || work.client_price || costPrice) || 0;
          
          console.log(`üîß EstimateSummary: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É ${workType}:`, {
            workType,
            quantity,
            costPrice,
            clientPrice
          });
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç—ã
          if (!workType || quantity <= 0 || costPrice < 0 || clientPrice < 0) {
            console.error('‚ùå EstimateSummary: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:', {
              workType, quantity, costPrice, clientPrice
            });
            throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã: ${work.work_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞'}`);
          }
          
          return {
            work_type: workType,
            quantity: quantity,
            cost_price_per_unit: costPrice,
            client_price_per_unit: clientPrice
          };
        }).filter(item => item.work_type && item.quantity > 0) // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
      };
      
      console.log('üîß EstimateSummary: –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API:', estimateData);

      if (createNewEstimate) {
        await createMutation.mutateAsync(estimateData);
      } else if (editMode && selectedEstimate) {
        await updateMutation.mutateAsync({
          id: selectedEstimate.estimate_id,
          data: estimateData
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      setError(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
      setIsSaving(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  if (isLoadingAllWorks || isLoadingItems) {
    return (
      <div className="mobile-screen">
        <LoadingSpinner message="–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ..." />
      </div>
    );
  }

  if (!selectedProject) {
    useEffect(() => {
      navigateToScreen('projects');
    }, [navigateToScreen]);
    return null;
  }

  // –°–¢–ê–†–´–ô UI (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) - –¢–û–õ–¨–ö–û –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê
  return (
    <div className="mobile-screen">
      {/* Header */}
      <div className="mobile-card" style={{ padding: '12px 16px' }}>
        <div className="estimate-header" style={{ marginBottom: '8px' }}>
          <div className="estimate-title">
            <p style={{ margin: '0', fontSize: '16px', fontWeight: '500' }}>{selectedProject.name || selectedProject.project_name}</p>
          </div>
        </div>

        {/* Estimate Info */}
        {(createNewEstimate || editMode) && (
          <div className="estimate-form" style={{ marginTop: '8px' }}>
            <div className="form-group" style={{ marginBottom: '0' }}>
              <label htmlFor="estimate-name" style={{ textAlign: 'center', display: 'block', marginBottom: '6px', fontSize: '14px' }}>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã</label>
              <input
                id="estimate-name"
                type="text"
                value={estimateName}
                onChange={(e) => handleNameChange(e.target.value)}
                placeholder={`–°–º_${selectedProject?.name || selectedProject?.project_name || '–æ–±—ä–µ–∫—Ç'}-${new Date().toLocaleDateString('ru-RU').replace(/\./g, '')}-${new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }).replace(':', '')}`}
                className="mobile-input"
                style={{ 
                  borderColor: nameError ? '#f44336' : undefined,
                  padding: '8px 12px',
                  fontSize: '14px'
                }}
              />
              {nameError && (
                <div className="error-message" style={{ color: '#f44336', fontSize: '12px', marginTop: '4px' }}>
                  {nameError}
                </div>
              )}
            </div>
          </div>
        )}

        {selectedEstimate && viewMode && selectedEstimate.description && (
          <div className="estimate-info">
            <div className="info-item">
              <span className="info-label">–û–ø–∏—Å–∞–Ω–∏–µ:</span>
              <span className="info-value">{selectedEstimate.description}</span>
            </div>
          </div>
        )}
      </div>

      {/* Work Search Dropdown - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {(createNewEstimate || editMode) && (
        <div className="mobile-card" style={{ padding: '12px 16px', marginTop: '8px' }}>
          <div style={{ marginBottom: '8px' }}>
            <div style={{ 
              fontSize: '14px', 
              color: '#aaa', 
              textAlign: 'center',
              marginBottom: '8px'
            }}>
              –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç
            </div>
            <WorkSearchDropdown
              allWorks={allWorks}
              onWorkSelect={handleWorkFromSearch}
              selectedWorks={selectedWorks}
              placeholder="–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏..."
              disabled={isSaving}
            />
          </div>
        </div>
      )}


      {/* Selected Works Table */}
      <div className="works-table-container">
        <div className="works-table-header">
          <h3 className="section-title" style={{ textAlign: 'center' }}>–ò—Ç–æ–≥–æ–≤–∞—è —Å–º–µ—Ç–∞</h3>
        </div>
        
        {filteredWorks.length === 0 ? (
          <div className="mobile-empty">
            <div className="mobile-empty-text">
              –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç
            </div>
          </div>
        ) : (
          <div className="works-table">
            <div className="works-table-head">
              <div className="table-cell-name" style={{ fontSize: '12px', fontWeight: 'bold' }}>–†–∞–±–æ—Ç–∞</div>
              <div className="table-cell-qty" style={{ fontSize: '11px', fontWeight: 'bold' }}>–ö–æ–ª-–≤–æ</div>
              <div className="table-cell-price" style={{ fontSize: '11px', fontWeight: 'bold' }}>–¶–µ–Ω–∞</div>
              <div className="table-cell-total" style={{ fontSize: '11px', fontWeight: 'bold' }}>–ò—Ç–æ–≥–æ</div>
            </div>
            
            {filteredWorks.map((work, index) => {
              const workId = work.item_id || work.id || work.work_type_id;
              const stableKey = createStableKey(work, index);
              return (
                <WorkTableRow 
                  key={stableKey}
                  work={work}
                  index={index}
                  onQuantityChange={(qty) => updateItem(workId, 'quantity', qty)}
                  onRemove={() => removeItem(workId)}
                  formatCurrency={formatCurrency}
                  canViewClientPrices={canViewClientPrices}
                  isEditable={createNewEstimate || editMode}
                />
              );
            })}
            
            {/* Total Row */}
            <div className="works-table-total-row">
              <div className="table-cell-name">
                <div className="work-name total-label" style={{ fontSize: '12px', fontWeight: 'bold' }}>–ò–¢–û–ì–û:</div>
              </div>
              <div className="table-cell-qty"></div>
              <div className="table-cell-price"></div>
              <div className="table-cell-total total-amount" style={{ fontSize: '11px', fontWeight: 'bold' }}>{totalCost.toFixed(2)}</div>
            </div>
            
            {/* SecurityExpert: –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∏—Ç–æ–≥–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–ø—Ä–æ—Ä–∞–±–æ–≤ */}
            {canViewClientPrices && (
              <div className="works-table-total-row">
                <div className="table-cell-name">
                  <div className="work-name total-label" style={{ fontSize: '11px', fontWeight: 'bold' }}>–ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –°–£–ú–ú–ê:</div>
                </div>
                <div className="table-cell-qty"></div>
                <div className="table-cell-price"></div>
                <div className="table-cell-total total-amount" style={{ fontSize: '11px', fontWeight: 'bold' }}>{totalClient.toFixed(2)}</div>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Error */}
      {error && (
        <ErrorMessage 
          message={error} 
          onRetry={() => setError(null)}
        />
      )}

      {/* Action Buttons */}
      <div className="mobile-card action-buttons">
        
        {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç */}
        <button 
          className="mobile-btn mobile-btn-compact"
          onClick={() => {
            console.log('üîß EstimateSummary: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
            console.log('üîß EstimateSummary: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º:', selectedWorks.map(w => ({ id: w.id || w.work_type_id, name: w.name || w.work_name, quantity: w.quantity })));
            
            // –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–±–æ—Ç—ã –≤ navigation context —Å —É—á–µ—Ç–æ–º estimateId
            const currentEstimateId = selectedEstimate?.estimate_id || selectedEstimate?.id;
            console.log('üîß EstimateSummary: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:', {
              selectedWorksCount: selectedWorks.length,
              estimateId: currentEstimateId,
              createNewEstimate
            });
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º addWorksToScreen —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º estimateId
            if (createNewEstimate || !currentEstimateId) {
              // –î–ª—è –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª—é—á
              addWorksToScreen('estimate-summary', selectedWorks);
              console.log('‚úÖ EstimateSummary: –†–∞–±–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã');
            } else {
              // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º estimateId
              addWorksToScreen('estimate-summary', selectedWorks, currentEstimateId);
              console.log('‚úÖ EstimateSummary: –†–∞–±–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å–º–µ—Ç—ã', currentEstimateId);
            }
            
            navigateToScreen('categories', true, { 
              selectedProject, 
              selectedEstimate, 
              editMode: true,
              createNewEstimate: createNewEstimate,
              viewMode: false
            });
          }}
        >
          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—ã
        </button>
        
        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
        <button 
          className="mobile-btn mobile-btn-primary mobile-btn-compact"
          onClick={() => {
            console.log('üîò [SAVE_CLICK] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', {
              hasUnsavedChanges,
              selectedWorksCount: selectedWorks.length,
              originalWorksCount: originalWorks.length,
              createNewEstimate,
              editMode
            });
            handleSave();
          }}
          disabled={isSaving || nameError || (createNewEstimate && selectedWorks.length === 0) || (!createNewEstimate && !hasUnsavedChanges)}
          style={{ 
            backgroundColor: (createNewEstimate ? selectedWorks.length > 0 : hasUnsavedChanges) ? '#4CAF50' : '#333', 
            borderColor: (createNewEstimate ? selectedWorks.length > 0 : hasUnsavedChanges) ? '#4CAF50' : '#333',
            color: (createNewEstimate ? selectedWorks.length > 0 : hasUnsavedChanges) ? '#000' : '#666'
          }}
        >
          {isSaving ? '–°–æ—Ö—Ä–∞–Ω—è–µ–º...' : (createNewEstimate ? '–°–æ–∑–¥–∞—Ç—å —Å–º–µ—Ç—É' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è')}
        </button>
      </div>
    </div>
  );
};

/**
 * Work Table Row Component
 * Individual row in the works table with touch edit/delete functionality
 */
const WorkTableRow = ({ work, index, onQuantityChange, onRemove, formatCurrency, canViewClientPrices, isEditable }) => {
  
  const [isEditing, setIsEditing] = React.useState(false);
  const [tempQuantity, setTempQuantity] = React.useState(work.quantity);
  const [touchTimer, setTouchTimer] = React.useState(null);
  const [touchStart, setTouchStart] = React.useState(null);
  const [swipeDistance, setSwipeDistance] = React.useState(0);
  const [isSwipeDeleteActive, setIsSwipeDeleteActive] = React.useState(false);
  const [isDeleting, setIsDeleting] = React.useState(false);
  const inputRef = React.useRef(null);

  const handleTouchStart = (e) => {
    if (!isEditable) return;
    const touch = e.touches[0];
    setTouchStart({ x: touch.clientX, y: touch.clientY });
    setSwipeDistance(0);
    
    const timer = setTimeout(() => {
      setIsEditing(true);
      setTouchTimer(null);
    }, 500); // 500ms long press
    setTouchTimer(timer);
  };

  const handleTouchMove = (e) => {
    if (!touchStart || isEditing || !isEditable) return;
    
    const touch = e.touches[0];
    const deltaX = touchStart.x - touch.clientX;
    const deltaY = Math.abs(touchStart.y - touch.clientY);
    
    // –¢–æ–ª—å–∫–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
    if (deltaY < 30 && deltaX > 10) {
      if (touchTimer) {
        clearTimeout(touchTimer);
        setTouchTimer(null);
      }
      
      setSwipeDistance(Math.min(deltaX, 120));
      if (deltaX > 80) {
        setIsSwipeDeleteActive(true);
      } else {
        setIsSwipeDeleteActive(false);
      }
    }
  };

  const handleTouchEnd = () => {
    if (touchTimer) {
      clearTimeout(touchTimer);
      setTouchTimer(null);
    }
    
    setTouchStart(null);
    
    // –ï—Å–ª–∏ —Å–≤–∞–π–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    if (isSwipeDeleteActive) {
      setTimeout(() => {
        setSwipeDistance(0);
        setIsSwipeDeleteActive(false);
      }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    } else {
      setSwipeDistance(0);
      setIsSwipeDeleteActive(false);
    }
  };

  // Handle delete like in EstimateCard - direct action
  const handleDelete = async (e) => {
    e.stopPropagation();
    
    if (isDeleting) return;
    setIsDeleting(true);
    
    try {
      onRemove();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:', error);
    } finally {
      setIsDeleting(false);
      setSwipeDistance(0);
      setIsSwipeDeleteActive(false);
    }
  };

  const handleQuantitySubmit = () => {
    onQuantityChange(tempQuantity);
    setIsEditing(false);
  };

  // –ê–≤—Ç–æ–≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ modal
  React.useEffect(() => {
    if (isEditing && inputRef.current) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
      setTimeout(() => {
        inputRef.current.focus();
        inputRef.current.select();
      }, 150);
    }
  }, [isEditing]);

  const costPrice = parseFloat(work.cost_price_per_unit || work.cost_price || 0);
  const clientPrice = parseFloat(work.client_price_per_unit || work.client_price || costPrice);
  const quantity = parseFloat(work.quantity || 0);
  const totalCost = costPrice * quantity;
  const totalClient = clientPrice * quantity;

  return (
    <div 
      className={`works-table-row ${isSwipeDeleteActive ? 'swipe-delete' : ''}`}
      style={{ 
        transform: `translateX(-${swipeDistance}px)`,
        position: 'relative'
      }}
      onTouchStart={handleTouchStart}
      onTouchMove={handleTouchMove}
      onTouchEnd={handleTouchEnd}
    >
      <div className="table-cell-name">
        <div className="work-name" style={{ fontSize: '13px', lineHeight: '1.3' }}>{work.name || work.work_name}</div>
        <div className="work-unit" style={{ fontSize: '11px' }}>{work.unit || work.unit_of_measurement}</div>
      </div>
      
      <div className="table-cell-qty">
        {isEditing ? (
          <div className="quantity-edit-overlay">
            <div className="quantity-edit-modal">
              <div className="quantity-edit-header">
                <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</span>
                <button 
                  className="quantity-close-btn"
                  onClick={() => setIsEditing(false)}
                >
                  ‚úï
                </button>
              </div>
              <input
                ref={inputRef}
                type="number"
                inputMode="decimal"
                value={tempQuantity}
                onChange={(e) => setTempQuantity(parseFloat(e.target.value) || 0)}
                onKeyPress={(e) => e.key === 'Enter' && handleQuantitySubmit()}
                onFocus={(e) => {
                  // –í—ã–¥–µ–ª–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                  setTimeout(() => {
                    e.target.select();
                  }, 100);
                }}
                autoFocus
                step="0.1"
                min="0.1"
                className="quantity-input-large"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
              />
              <div className="quantity-edit-actions">
                <button 
                  className="quantity-btn quantity-btn-cancel"
                  onClick={() => setIsEditing(false)}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button 
                  className="quantity-btn quantity-btn-save"
                  onClick={handleQuantitySubmit}
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        ) : (
          <span style={{ fontSize: '12px' }}>{quantity.toFixed(1)}</span>
        )}
      </div>
      
      <div className="table-cell-price">
        <div className="price-cost" style={{ fontSize: '11px' }}>{formatCurrency(costPrice)}</div>
        {canViewClientPrices && (
          <div className="price-client" style={{ fontSize: '10px' }}>{formatCurrency(clientPrice)}</div>
        )}
      </div>
      
      <div className="table-cell-total">
        <div className="total-cost" style={{ fontSize: '11px' }}>{formatCurrency(totalCost)}</div>
        {canViewClientPrices && (
          <div className="total-client" style={{ fontSize: '10px' }}>{formatCurrency(totalClient)}</div>
        )}
      </div>
      
      {/* Delete button overlay - like in EstimateCard */}
      {isSwipeDeleteActive && (
        <div 
          className="delete-overlay"
          style={{
            position: 'absolute',
            top: 0,
            right: 0,
            height: '100%',
            width: '120px',
            background: 'linear-gradient(90deg, rgba(244, 67, 54, 0.8), rgba(244, 67, 54, 1))',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            transform: `translateX(${120 - swipeDistance}px)`,
            transition: touchStart ? 'none' : 'transform 0.3s ease'
          }}
        >
          <button
            onClick={handleDelete}
            disabled={isDeleting}
            style={{
              background: 'none',
              border: 'none',
              color: 'white',
              fontSize: '24px',
              cursor: 'pointer',
              padding: '10px'
            }}
          >
            {isDeleting ? '‚è≥' : 'üóëÔ∏è'}
          </button>
        </div>
      )}
    </div>
  );
};

export default EstimateSummary;