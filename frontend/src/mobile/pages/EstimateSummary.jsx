import React, { useState, useMemo, useEffect } from 'react';
import { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';
import { useMobileNavigationContext } from '../context/MobileNavigationContext';
import { useMobileAuth } from '../MobileApp';
import { api } from '../../api/client';
import LoadingSpinner from '../components/ui/LoadingSpinner';
import ErrorMessage from '../components/ui/ErrorMessage';
import { 
  normalizeWorksData, 
  convertEstimateItemsToWorks, 
  createStableKey, 
  calculateTotalAmount, 
  formatCurrency,
  isValidWork,
  mergeWorksArrays
} from '../utils/dataUtils';

/**
 * Estimate Summary Screen
 * Final step to review and save estimate with selected works
 */
const EstimateSummary = () => {
  const { navigateToScreen, getScreenData, setScreenData, addWorksToScreen, clearWorksFromScreen, currentScreen, navigationData } = useMobileNavigationContext();
  const { user } = useMobileAuth();
  const queryClient = useQueryClient();
  
  console.log('üöÄ –û–¢–õ–ê–î–ö–ê EstimateSummary: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ù–ê–ß–ê–õ–û —Ä–µ–Ω–¥–µ—Ä–∞');
  console.log('üìä –û–¢–õ–ê–î–ö–ê EstimateSummary - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user?.role);
  
  // SecurityExpert: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  const isForeman = user?.role === '–ø—Ä–æ—Ä–∞–±';
  const canViewClientPrices = !isForeman; // –ü—Ä–æ—Ä–∞–±—ã –ù–ï –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Ü–µ–Ω—ã
  
  console.log('üîí –û–¢–õ–ê–î–ö–ê EstimateSummary - –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:', {
    userRole: user?.role,
    isForeman,
    canViewClientPrices
  });

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∞
  let screenData;
  try {
    screenData = getScreenData();
    console.log('üìÑ –û–¢–õ–ê–î–ö–ê EstimateSummary - –î–∞–Ω–Ω—ã–µ —ç–∫—Ä–∞–Ω–∞:', screenData);
  } catch (error) {
    console.error('‚ùå –û–¢–õ–ê–î–ö–ê EstimateSummary - –û—à–∏–±–∫–∞ –≤ getScreenData:', error);
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  const selectedProject = screenData?.selectedProject;
  const selectedEstimate = screenData?.selectedEstimate;
  const createNewEstimate = screenData?.createNewEstimate;
  const editMode = screenData?.editMode;
  const viewMode = screenData?.viewMode;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–°–û–•–†–ê–ù–Ø–ï–ú –°–¢–ê–†–´–ô UI)
  const [estimateName, setEstimateName] = useState(() => {
    return selectedEstimate?.name || selectedEstimate?.estimate_number || '';
  });
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è selectedWorks –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç screenData –≤ useState
  const [selectedWorks, setSelectedWorks] = useState([]);
  
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [originalWorks, setOriginalWorks] = useState([]);
  const [isInitialized, setIsInitialized] = useState(false); // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

  // –û–¢–õ–ê–î–ö–ê –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  console.log('üìä –û–¢–õ–ê–î–ö–ê EstimateSummary - selectedWorks.length:', selectedWorks.length);
  console.log('üìä –û–¢–õ–ê–î–ö–ê EstimateSummary - selectedWorks:', selectedWorks);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç
  const { data: allWorks = [], isLoading: isLoadingAllWorks } = useQuery({
    queryKey: ['all-work-types'],
    queryFn: api.getAllWorkTypes,
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–º–µ—Ç—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const shouldLoadItems = Boolean(selectedEstimate?.estimate_id && !createNewEstimate);
  
  const { data: estimateItems, isLoading: isLoadingItems } = useQuery({
    queryKey: ['estimate-items', selectedEstimate?.estimate_id],
    queryFn: () => api.getEstimateItems(selectedEstimate.estimate_id),
    enabled: shouldLoadItems
  });

  // –ü–†–û–°–¢–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
  React.useEffect(() => {
    console.log('üîÑ EstimateSummary: –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è selectedWorks');
    
    // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
    if (!isInitialized) {
      setIsInitialized(true);
      console.log('‚úÖ EstimateSummary: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  }, [isInitialized]);

  // –û–¢–õ–ê–î–ö–ê: –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  React.useEffect(() => {
    console.log('üöÄ –û–¢–õ–ê–î–ö–ê EstimateSummary: useEffect –ù–ê–ß–ê–õ–û');
    console.log('üöÄ –û–¢–õ–ê–î–ö–ê EstimateSummary: isInitialized =', isInitialized);
    
    if (!isInitialized) {
      console.log('‚è∞ –û–¢–õ–ê–î–ö–ê EstimateSummary: –û–∂–∏–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –≤—ã—Ö–æ–¥');
      return; // –î–æ–∂–∏–¥–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    }
    
    console.log('üîÑ –û–¢–õ–ê–î–ö–ê EstimateSummary: –ù–ê–ß–ê–õ–û –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ navigation context');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ navigation context –û–î–ò–ù –†–ê–ó –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const summaryData = getScreenData('estimate-summary');
    const currentData = getScreenData();
    
    console.log('üìä –û–¢–õ–ê–î–ö–ê EstimateSummary: RAW summaryData =', summaryData);
    console.log('üìä –û–¢–õ–ê–î–ö–ê EstimateSummary: RAW currentData =', currentData);
    
    console.log('üìä –û–¢–õ–ê–î–ö–ê EstimateSummary: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤:', {
      summaryData_exists: !!summaryData,
      summaryData_selectedWorks: summaryData?.selectedWorks?.length || 0,
      currentData_exists: !!currentData,
      currentData_selectedWorks: currentData?.selectedWorks?.length || 0,
      returnFlag: currentData?.returnFromWorkSelection
    });
    
    // –ë–µ—Ä–µ–º —Ä–∞–±–æ—Ç—ã –∏–∑ –ª—é–±–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    const worksToLoad = summaryData?.selectedWorks || currentData?.selectedWorks || [];
    console.log('üíæ –û–¢–õ–ê–î–ö–ê EstimateSummary: worksToLoad =', worksToLoad);
    console.log('üíæ –û–¢–õ–ê–î–ö–ê EstimateSummary: worksToLoad.length =', worksToLoad.length);
    
    if (worksToLoad.length > 0) {
      console.log('‚úÖ –û–¢–õ–ê–î–ö–ê EstimateSummary: –ù–∞–π–¥–µ–Ω—ã —Ä–∞–±–æ—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º...');
      const normalizedWorks = normalizeWorksData(worksToLoad);
      console.log('‚úÖ –û–¢–õ–ê–î–ö–ê EstimateSummary: normalizedWorks =', normalizedWorks);
      console.log('‚úÖ –û–¢–õ–ê–î–ö–ê EstimateSummary: normalizedWorks.length =', normalizedWorks.length);
      console.log('‚úÖ –û–¢–õ–ê–î–ö–ê EstimateSummary: –î–µ—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç:', {
        count: normalizedWorks.length,
        works: normalizedWorks.map(w => ({ 
          id: w.work_type_id || w.id, 
          name: w.work_name || w.name, 
          quantity: w.quantity 
        }))
      });
      
      console.log('üíæ –û–¢–õ–ê–î–ö–ê EstimateSummary: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º selectedWorks —á–µ—Ä–µ–∑ setSelectedWorks');
      setSelectedWorks(normalizedWorks);
      console.log('üíæ –û–¢–õ–ê–î–ö–ê EstimateSummary: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º originalWorks —á–µ—Ä–µ–∑ setOriginalWorks');
      setOriginalWorks(normalizedWorks);
      console.log('‚úÖ –û–¢–õ–ê–î–ö–ê EstimateSummary: selectedWorks –ò originalWorks –£–°–¢–ê–ù–û–í–õ–ï–ù–´');
    } else {
      console.log('‚ö†Ô∏è –û–¢–õ–ê–î–ö–ê EstimateSummary: –ù–ï–¢ –†–ê–ë–û–¢ –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò');
      console.log('‚ö†Ô∏è –û–¢–õ–ê–î–ö–ê EstimateSummary: summaryData?.selectedWorks =', summaryData?.selectedWorks);
      console.log('‚ö†Ô∏è –û–¢–õ–ê–î–ö–ê EstimateSummary: currentData?.selectedWorks =', currentData?.selectedWorks);
    }
    
    console.log('üèÅ –û–¢–õ–ê–î–ö–ê EstimateSummary: useEffect –ó–ê–í–ï–†–®–ï–ù');
  }, [isInitialized]); // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –æ–¥–∏–Ω —Ä–∞–∑
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç –∏–∑ —Å–º–µ—Ç—ã –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
  React.useEffect(() => {
    const currentScreenData = getScreenData();
    const hasNavigationWorks = currentScreenData?.selectedWorks?.length > 0;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–º–µ—Ç—ã –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞–±–æ—Ç –∏–∑ navigation context
    const shouldLoadFromEstimate = (
      editMode && 
      selectedEstimate && 
      selectedEstimate.estimate_id &&
      allWorks.length > 0 && 
      estimateItems?.length > 0 &&
      selectedWorks.length === 0 && 
      !hasNavigationWorks && // –ö–†–ò–¢–ò–ß–ù–û: –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º navigation context
      !createNewEstimate
    );
    
    if (shouldLoadFromEstimate) {
      console.log('üîÑ EstimateSummary: –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–º–µ—Ç—ã –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤');
      
      const works = convertEstimateItemsToWorks(estimateItems);
      console.log('‚úÖ EstimateSummary: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞–±–æ—Ç –∏–∑ —Å–º–µ—Ç—ã:', works.length);
      
      // –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê: –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç–æ–µ
      setSelectedWorks(currentWorks => {
        if (currentWorks.length === 0) {
          return works;
        }
        return currentWorks; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–±–æ—Ç—ã
      });
      
      setOriginalWorks(works);
      setHasUnsavedChanges(false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º navigation context –ë–ï–ó –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ existing data
      setScreenData('estimate-editor', {
        selectedWorks: works
      }, true); // merge mode - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
    }
  }, [editMode, selectedEstimate, allWorks, estimateItems, createNewEstimate, setScreenData, getScreenData]); // –£–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç selectedWorks.length

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã
  const createMutation = useMutation({
    mutationFn: api.createEstimate,
    onSuccess: () => {
      queryClient.invalidateQueries(['estimates']);
      queryClient.invalidateQueries(['projects']);
      console.log('‚úÖ –°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞
      navigateToScreen('project-info', false, {
        selectedProject
      });
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã:', error);
      setError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã: ${error.message}`);
    },
    onSettled: () => {
      setIsSaving(false);
    }
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã
  const updateMutation = useMutation({
    mutationFn: ({ id, data }) => api.updateEstimate(id, data),
    onSuccess: () => {
      queryClient.invalidateQueries(['estimates']);
      queryClient.invalidateQueries(['estimate-items']);
      queryClient.invalidateQueries(['projects']);
      console.log('‚úÖ –°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞
      navigateToScreen('project-info', false, {
        selectedProject
      });
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã:', error);
      setError(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã: ${error.message}`);
    },
    onSettled: () => {
      setIsSaving(false);
    }
  });

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç
  const filteredWorks = useMemo(() => {
    if (!searchTerm.trim()) return selectedWorks;
    
    const searchLower = searchTerm.toLowerCase();
    return selectedWorks.filter(work => {
      const workName = (work.name || work.work_name || '').toLowerCase();
      const workUnit = (work.unit || work.unit_of_measurement || '').toLowerCase();
      return workName.includes(searchLower) || workUnit.includes(searchLower);
    });
  }, [selectedWorks, searchTerm]);

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç
  const totalCost = calculateTotalAmount(selectedWorks, 'cost');
  const totalClient = canViewClientPrices ? calculateTotalAmount(selectedWorks, 'client') : 0;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const updateItem = (itemId, field, value) => {
    setSelectedWorks(prev => 
      prev.map(work => {
        const workItemId = work.item_id || work.id || work.work_type_id;
        if (workItemId === itemId) {
          const updatedWork = { ...work, [field]: value };
          
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
          const cost = parseFloat(updatedWork.cost_price_per_unit || updatedWork.cost_price || 0);
          const client = parseFloat(updatedWork.client_price_per_unit || updatedWork.client_price || cost);
          const quantity = parseFloat(updatedWork.quantity || 0);
          
          updatedWork.total_cost = cost * quantity;
          updatedWork.total_client = client * quantity;
          
          return updatedWork;
        }
        return work;
      }).filter(work => parseFloat(work.quantity || 0) > 0)
    );
    setHasUnsavedChanges(true);
  };

  const removeItem = (itemId) => {
    setSelectedWorks(prev => 
      prev.filter(work => {
        const workItemId = work.item_id || work.id || work.work_type_id;
        return workItemId !== itemId;
      })
    );
    setHasUnsavedChanges(true);
  };

  const handleSave = async () => {
    if (!selectedProject || selectedWorks.length === 0) {
      setError('–ù–µ—Ç —Ä–∞–±–æ—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }
    
    if (!estimateName.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã');
      return;
    }

    setIsSaving(true);
    setError(null);

    try {
      console.log('üîß EstimateSummary: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API:', {
        selectedProject,
        estimateName,
        selectedWorks: selectedWorks.map(w => ({ 
          id: w.work_type_id || w.id, 
          name: w.work_name, 
          quantity: w.quantity,
          cost_price: w.cost_price_per_unit || w.cost_price,
          client_price: w.client_price_per_unit || w.client_price
        }))
      });

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EstimateDetailSerializer
      const estimateData = {
        project_id: selectedProject.project_id || selectedProject.id,
        estimate_number: estimateName.trim(), // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º estimate_number –≤–º–µ—Å—Ç–æ name
        items: selectedWorks.map(work => {
          const workType = work.work_type_id || work.work_type || work.id;
          const quantity = parseFloat(work.quantity) || 1;
          const costPrice = parseFloat(work.cost_price_per_unit || work.cost_price) || 0;
          const clientPrice = parseFloat(work.client_price_per_unit || work.client_price || costPrice) || 0;
          
          console.log(`üîß EstimateSummary: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É ${workType}:`, {
            workType,
            quantity,
            costPrice,
            clientPrice
          });
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç—ã
          if (!workType || quantity <= 0 || costPrice < 0 || clientPrice < 0) {
            console.error('‚ùå EstimateSummary: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:', {
              workType, quantity, costPrice, clientPrice
            });
            throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã: ${work.work_name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞'}`);
          }
          
          return {
            work_type: workType,
            quantity: quantity,
            cost_price_per_unit: costPrice,
            client_price_per_unit: clientPrice
          };
        }).filter(item => item.work_type && item.quantity > 0) // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
      };
      
      console.log('üîß EstimateSummary: –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API:', estimateData);

      if (createNewEstimate) {
        await createMutation.mutateAsync(estimateData);
      } else if (editMode && selectedEstimate) {
        await updateMutation.mutateAsync({
          id: selectedEstimate.estimate_id,
          data: estimateData
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      setError(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
      setIsSaving(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  if (isLoadingAllWorks || isLoadingItems) {
    return (
      <div className="mobile-screen">
        <LoadingSpinner message="–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ..." />
      </div>
    );
  }

  if (!selectedProject) {
    useEffect(() => {
      navigateToScreen('projects');
    }, [navigateToScreen]);
    return null;
  }

  // –°–¢–ê–†–´–ô UI (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) - –¢–û–õ–¨–ö–û –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê
  return (
    <div className="mobile-screen">
      {/* Header */}
      <div className="mobile-card">
        <div className="estimate-header">
          <button 
            className="back-button"
            onClick={() => {
              if (editMode || viewMode) {
                navigateToScreen('project-info', false, { selectedProject });
              } else {
                navigateToScreen('categories', false, screenData);
              }
            }}
            aria-label="–ù–∞–∑–∞–¥"
          >
            ‚Üê
          </button>
          <div className="estimate-title">
            <h2>{createNewEstimate ? '–ù–æ–≤–∞—è —Å–º–µ—Ç–∞' : editMode ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–º–µ—Ç—ã'}</h2>
            <p>{selectedProject.name || selectedProject.project_name}</p>
          </div>
        </div>

        {/* Estimate Info */}
        {(createNewEstimate || editMode) && (
          <div className="estimate-form">
            <div className="form-group">
              <label htmlFor="estimate-name">–ù–∞–∑–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã</label>
              <input
                id="estimate-name"
                type="text"
                value={estimateName}
                onChange={(e) => setEstimateName(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã"
                className="mobile-input"
              />
            </div>
          </div>
        )}

        {selectedEstimate && viewMode && (
          <div className="estimate-info">
            <div className="info-item">
              <span className="info-label">–°–º–µ—Ç–∞:</span>
              <span className="info-value">{selectedEstimate.estimate_number || estimateName}</span>
            </div>
            {selectedEstimate.description && (
              <div className="info-item">
                <span className="info-label">–û–ø–∏—Å–∞–Ω–∏–µ:</span>
                <span className="info-value">{selectedEstimate.description}</span>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Search */}
      {selectedWorks.length > 3 && (
        <div className="mobile-search">
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="mobile-input search-input"
          />
        </div>
      )}

      {/* Selected Works Table */}
      <div className="works-table-container">
        <div className="works-table-header">
          <h3 className="section-title" style={{ textAlign: 'center' }}>–ò—Ç–æ–≥–æ–≤–∞—è —Å–º–µ—Ç–∞</h3>
        </div>
        
        {filteredWorks.length === 0 ? (
          <div className="mobile-empty">
            <div className="mobile-empty-text">
              {searchTerm ? '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : '–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç'}
            </div>
          </div>
        ) : (
          <div className="works-table">
            <div className="works-table-head">
              <div className="table-cell-name">–†–∞–±–æ—Ç–∞</div>
              <div className="table-cell-qty">–ö–æ–ª-–≤–æ</div>
              <div className="table-cell-price">–¶–µ–Ω–∞</div>
              <div className="table-cell-total">–ò—Ç–æ–≥–æ</div>
            </div>
            
            {filteredWorks.map((work, index) => {
              const workId = work.item_id || work.id || work.work_type_id;
              const stableKey = createStableKey(work, index);
              return (
                <WorkTableRow 
                  key={stableKey}
                  work={work}
                  index={index}
                  onQuantityChange={(qty) => updateItem(workId, 'quantity', qty)}
                  onRemove={() => removeItem(workId)}
                  formatCurrency={formatCurrency}
                  canViewClientPrices={canViewClientPrices}
                  isEditable={createNewEstimate || editMode}
                />
              );
            })}
            
            {/* Total Row */}
            <div className="works-table-total-row">
              <div className="table-cell-name">
                <div className="work-name total-label">–ò–¢–û–ì–û:</div>
              </div>
              <div className="table-cell-qty total-items">
                {selectedWorks.reduce((sum, work) => sum + (parseFloat(work.quantity) || 0), 0).toFixed(1)}
              </div>
              <div className="table-cell-price"></div>
              <div className="table-cell-total total-amount">{totalCost.toFixed(2)} ‚Ç¥</div>
            </div>
            
            {/* SecurityExpert: –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∏—Ç–æ–≥–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–ø—Ä–æ—Ä–∞–±–æ–≤ */}
            {canViewClientPrices && (
              <div className="works-table-total-row">
                <div className="table-cell-name">
                  <div className="work-name total-label">–ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –°–£–ú–ú–ê:</div>
                </div>
                <div className="table-cell-qty"></div>
                <div className="table-cell-price"></div>
                <div className="table-cell-total total-amount">{totalClient.toFixed(2)} ‚Ç¥</div>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Error */}
      {error && (
        <ErrorMessage 
          message={error} 
          onRetry={() => setError(null)}
        />
      )}

      {/* Action Buttons */}
      <div className="mobile-card action-buttons">
        
        {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç */}
        <button 
          className="mobile-btn mobile-btn-compact"
          onClick={() => {
            console.log('üîß EstimateSummary: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
            console.log('üîß EstimateSummary: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º:', selectedWorks.map(w => ({ id: w.id || w.work_type_id, name: w.name || w.work_name, quantity: w.quantity })));
            
            // –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–±–æ—Ç—ã –≤ navigation context –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            const currentData = getScreenData();
            const dataToSave = {
              ...currentData,
              selectedWorks: selectedWorks // –ü–µ—Ä–µ–¥–∞–µ–º –¢–ï–ö–£–©–ò–ï —Ä–∞–±–æ—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            };
            
            console.log('üîß EstimateSummary: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ navigation context:', {
              —Ç–µ–∫—É—â–∏–µ–íContext: currentData?.selectedWorks?.length || 0,
              —Ç–µ–∫—É—â–∏–µ–í–°–æ—Å—Ç–æ—è–Ω–∏–∏: selectedWorks.length,
              —Å–æ—Ö—Ä–∞–Ω—è–µ–º: dataToSave.selectedWorks.length
            });
            
            setScreenData('estimate-summary', dataToSave, true); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —ç–∫—Ä–∞–Ω–∞
            
            navigateToScreen('categories', true, { 
              selectedProject, 
              selectedEstimate, 
              editMode: true,
              createNewEstimate: createNewEstimate,
              viewMode: false
            });
          }}
        >
          –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—ã
        </button>
        
        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
        <button 
          className="mobile-btn mobile-btn-primary mobile-btn-compact"
          onClick={handleSave}
          disabled={isSaving || (createNewEstimate && selectedWorks.length === 0) || (!createNewEstimate && !hasUnsavedChanges)}
          style={{ 
            backgroundColor: (createNewEstimate ? selectedWorks.length > 0 : hasUnsavedChanges) ? '#4CAF50' : '#333', 
            borderColor: (createNewEstimate ? selectedWorks.length > 0 : hasUnsavedChanges) ? '#4CAF50' : '#333',
            color: (createNewEstimate ? selectedWorks.length > 0 : hasUnsavedChanges) ? '#000' : '#666'
          }}
        >
          {isSaving ? '–°–æ—Ö—Ä–∞–Ω—è–µ–º...' : (createNewEstimate ? '–°–æ–∑–¥–∞—Ç—å —Å–º–µ—Ç—É' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è')}
        </button>
      </div>
    </div>
  );
};

/**
 * Work Table Row Component
 * Individual row in the works table with touch edit/delete functionality
 */
const WorkTableRow = ({ work, index, onQuantityChange, onRemove, formatCurrency, canViewClientPrices, isEditable }) => {
  const [isEditing, setIsEditing] = React.useState(false);
  const [tempQuantity, setTempQuantity] = React.useState(work.quantity);
  const [touchTimer, setTouchTimer] = React.useState(null);
  const [touchStart, setTouchStart] = React.useState(null);
  const [swipeDistance, setSwipeDistance] = React.useState(0);
  const [isSwipeDeleteActive, setIsSwipeDeleteActive] = React.useState(false);

  const handleTouchStart = (e) => {
    if (!isEditable) return;
    const touch = e.touches[0];
    setTouchStart({ x: touch.clientX, y: touch.clientY });
    setSwipeDistance(0);
    
    const timer = setTimeout(() => {
      setIsEditing(true);
      setTouchTimer(null);
    }, 500); // 500ms long press
    setTouchTimer(timer);
  };

  const handleTouchMove = (e) => {
    if (!touchStart || isEditing || !isEditable) return;
    
    const touch = e.touches[0];
    const deltaX = touchStart.x - touch.clientX;
    const deltaY = Math.abs(touchStart.y - touch.clientY);
    
    // –¢–æ–ª—å–∫–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
    if (deltaY < 30 && deltaX > 10) {
      if (touchTimer) {
        clearTimeout(touchTimer);
        setTouchTimer(null);
      }
      
      setSwipeDistance(Math.min(deltaX, 120));
      if (deltaX > 80) {
        setIsSwipeDeleteActive(true);
      } else {
        setIsSwipeDeleteActive(false);
      }
    }
  };

  const handleTouchEnd = () => {
    if (touchTimer) {
      clearTimeout(touchTimer);
      setTouchTimer(null);
    }
    
    if (isSwipeDeleteActive) {
      onRemove();
    }
    
    setTouchStart(null);
    setSwipeDistance(0);
    setIsSwipeDeleteActive(false);
  };

  const handleQuantitySubmit = () => {
    onQuantityChange(tempQuantity);
    setIsEditing(false);
  };

  const costPrice = parseFloat(work.cost_price_per_unit || work.cost_price || 0);
  const clientPrice = parseFloat(work.client_price_per_unit || work.client_price || costPrice);
  const quantity = parseFloat(work.quantity || 0);
  const totalCost = costPrice * quantity;
  const totalClient = clientPrice * quantity;

  return (
    <div 
      className={`works-table-row ${isSwipeDeleteActive ? 'swipe-delete' : ''}`}
      style={{ transform: `translateX(-${swipeDistance}px)` }}
      onTouchStart={handleTouchStart}
      onTouchMove={handleTouchMove}
      onTouchEnd={handleTouchEnd}
    >
      <div className="table-cell-name">
        <div className="work-name">{work.name || work.work_name}</div>
        <div className="work-unit">{work.unit || work.unit_of_measurement}</div>
      </div>
      
      <div className="table-cell-qty">
        {isEditing ? (
          <div className="quantity-edit">
            <input
              type="number"
              value={tempQuantity}
              onChange={(e) => setTempQuantity(parseFloat(e.target.value) || 0)}
              onBlur={handleQuantitySubmit}
              onKeyPress={(e) => e.key === 'Enter' && handleQuantitySubmit()}
              autoFocus
              step="0.1"
              min="0.1"
            />
          </div>
        ) : (
          <span>{quantity.toFixed(1)}</span>
        )}
      </div>
      
      <div className="table-cell-price">
        <div className="price-cost">{formatCurrency(costPrice)}</div>
        {canViewClientPrices && (
          <div className="price-client">{formatCurrency(clientPrice)}</div>
        )}
      </div>
      
      <div className="table-cell-total">
        <div className="total-cost">{formatCurrency(totalCost)}</div>
        {canViewClientPrices && (
          <div className="total-client">{formatCurrency(totalClient)}</div>
        )}
      </div>
      
      {isSwipeDeleteActive && (
        <div className="delete-indicator">
          üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
        </div>
      )}
    </div>
  );
};

export default EstimateSummary;