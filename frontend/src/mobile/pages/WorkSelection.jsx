import React, { useState, useMemo } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useMobileNavigationContext } from '../context/MobileNavigationContext';
import { api } from '../../api/client';
import { normalizeApiResponse } from '../utils/apiHelpers';
import WorkCard from '../components/ui/WorkCard';
import LoadingSpinner from '../components/ui/LoadingSpinner';
import ErrorMessage from '../components/ui/ErrorMessage';

/**
 * Work Selection Screen
 * Displays and allows selection of specific works within a category
 */
const WorkSelection = () => {
  const { navigateToScreen, getScreenData, addWorksToScreen } = useMobileNavigationContext();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedWorks, setSelectedWorks] = useState([]);
  
  const screenData = getScreenData();
  const selectedProject = screenData?.selectedProject;
  const selectedEstimate = screenData?.selectedEstimate;
  const selectedCategory = screenData?.selectedCategory;
  const createNewEstimate = screenData?.createNewEstimate;
  const editMode = screenData?.editMode;

  // Fetch all work types for search functionality
  const { 
    data: allWorksResponse, 
    isLoading, 
    error,
    refetch 
  } = useQuery({
    queryKey: ['all-work-types'],
    queryFn: api.getAllWorkTypes,
    onError: (error) => {
      console.error('Failed to fetch work types:', error);
    }
  });
  
  // Normalize works data
  const allWorks = normalizeApiResponse(allWorksResponse);

  // –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–±–æ—Ç—ã –∏–∑ —Å–º–µ—Ç—ã
  React.useEffect(() => {
    if (editMode && selectedEstimate && selectedEstimate.items && allWorks.length > 0) {
      console.log('üîÑ WorkSelection: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–±–æ—Ç—ã –∏–∑ —Å–º–µ—Ç—ã', selectedEstimate);
      
      const existingWorks = selectedEstimate.items.map(item => {
        const workId = item.work_type?.work_type_id || item.work_type_id || item.work_type;
        const work = allWorks.find(w => 
          (w.work_type_id || w.id) === workId
        );
        
        if (work) {
          return {
            ...work,
            quantity: item.quantity || 1,
            cost_price_per_unit: item.cost_price_per_unit,
            client_price_per_unit: item.client_price_per_unit
          };
        }
        return null;
      }).filter(Boolean);
      
      console.log('‚úÖ WorkSelection: –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–∞–±–æ—Ç—ã:', existingWorks);
      setSelectedWorks(existingWorks);
    }
  }, [editMode, selectedEstimate, allWorks]);

  // Filter works by category and search term
  const filteredWorks = useMemo(() => {
    let works = allWorks;
    
    // Filter by category if selected
    if (selectedCategory) {
      const categoryId = selectedCategory.id || selectedCategory.category_id;
      works = works.filter(work => {
        const workCategoryId = work.category?.category_id || work.category_id || work.category;
        return workCategoryId === categoryId;
      });
    }
    
    // Filter by search term
    if (searchTerm.trim()) {
      const searchLower = searchTerm.toLowerCase();
      works = works.filter(work => {
        const workName = (work.name || work.work_name || '').toLowerCase();
        const workUnit = (work.unit || work.unit_of_measurement || '').toLowerCase();
        return workName.includes(searchLower) || workUnit.includes(searchLower);
      });
    }
    
    return works;
  }, [allWorks, selectedCategory, searchTerm]);

  // Redirect if no context - –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
  if (!selectedProject || (!selectedCategory && !editMode)) {
    React.useEffect(() => {
      navigateToScreen('projects');
    }, [navigateToScreen]);
    return null;
  }

  const handleWorkToggle = (work) => {
    const workId = work.id || work.work_type_id;
    console.log('üîß WorkSelection: handleWorkToggle –≤—ã–∑–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã:', {
      workId: workId,
      workName: work.name || work.work_name,
      currentSelectedCount: selectedWorks.length
    });
    
    setSelectedWorks(prev => {
      const isSelected = prev.find(w => (w.id || w.work_type_id) === workId);
      
      let newWorks;
      if (isSelected) {
        newWorks = prev.filter(w => (w.id || w.work_type_id) !== workId);
        console.log('‚ûñ WorkSelection: –†–∞–±–æ—Ç–∞ —É–±—Ä–∞–Ω–∞ –∏–∑ –≤—ã–±–æ—Ä–∞, –æ—Å—Ç–∞–ª–æ—Å—å:', newWorks.length);
      } else {
        newWorks = [...prev, { ...work, quantity: 1 }];
        console.log('‚ûï WorkSelection: –†–∞–±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤—ã–±–æ—Ä, –≤—Å–µ–≥–æ:', newWorks.length);
      }
      
      return newWorks;
    });
  };

  const handleQuantityChange = (workId, quantity) => {
    setSelectedWorks(prev => 
      prev.map(work => 
        (work.id || work.work_type_id) === workId 
          ? { ...work, quantity: quantity === '' ? 1 : Math.max(1, quantity) }
          : work
      )
    );
  };

  const [isProcessing, setIsProcessing] = React.useState(false);

  const handleContinue = () => {
    console.log('üöÄ –û–¢–õ–ê–î–ö–ê WorkSelection: handleContinue –ù–ê–ß–ê–õ–û');
    console.log('üìä –û–¢–õ–ê–î–ö–ê WorkSelection: selectedWorks.length =', selectedWorks.length);
    console.log('üìä –û–¢–õ–ê–î–ö–ê WorkSelection: selectedWorks =', selectedWorks);
    
    if (selectedWorks.length === 0) {
      console.log('‚ùå –û–¢–õ–ê–î–ö–ê WorkSelection: –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç, –≤—ã—Ö–æ–¥');
      return;
    }
    
    if (isProcessing) {
      console.log('‚ö†Ô∏è –û–¢–õ–ê–î–ö–ê WorkSelection: handleContinue —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤');
      return;
    }
    
    setIsProcessing(true);
    console.log('üîí –û–¢–õ–ê–î–ö–ê WorkSelection: isProcessing —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true');
    
    console.log('üîß –û–¢–õ–ê–î–ö–ê WorkSelection: –ö–†–ò–¢–ò–ß–ù–´–ô handleContinue - –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', {
      selectedWorksCount: selectedWorks.length,
      selectedWorks: selectedWorks.map(w => ({ 
        id: w.id || w.work_type_id, 
        name: w.name || w.work_name, 
        quantity: w.quantity,
        prices: { cost: w.cost_price, client: w.client_price }
      }))
    });
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç—ã –≤–∞–ª–∏–¥–Ω—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    const validWorks = selectedWorks.filter(work => {
      const isValid = (work.id || work.work_type_id) && work.work_name && work.quantity > 0;
      if (!isValid) {
        console.warn('‚ö†Ô∏è WorkSelection: –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞:', work);
      }
      return isValid;
    });
    
    if (validWorks.length === 0) {
      console.error('‚ùå WorkSelection: –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–∞–±–æ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
      return;
    }
    
    console.log('üîß WorkSelection: –í–∞–ª–∏–¥–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', {
      originalCount: selectedWorks.length,
      validCount: validWorks.length
    });
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö –î–ê–ù–ù–´–• - —á–µ—Ä–µ–∑ addWorksToScreen
    console.log('üíæ –û–¢–õ–ê–î–ö–ê WorkSelection: –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –≤ navigation context');
    console.log('üíæ –û–¢–õ–ê–î–ö–ê WorkSelection: –≠–∫—Ä–∞–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è = estimate-summary');
    console.log('üíæ –û–¢–õ–ê–î–ö–ê WorkSelection: validWorks –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', validWorks);
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º ID —Å–º–µ—Ç—ã –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    const currentEstimateId = selectedEstimate?.estimate_id || selectedEstimate?.id;
    console.log('üîë –û–¢–õ–ê–î–ö–ê WorkSelection: –ò—Å–ø–æ–ª—å–∑—É–µ–º estimateId =', currentEstimateId);
    console.log('üîë –û–¢–õ–ê–î–ö–ê WorkSelection: createNewEstimate =', createNewEstimate);
    
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º estimateId
      if (createNewEstimate || !currentEstimateId) {
        console.log('üÜï –û–¢–õ–ê–î–ö–ê WorkSelection: –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º estimateId');
        addWorksToScreen('estimate-summary', validWorks);
        console.log('‚úÖ –û–¢–õ–ê–î–ö–ê WorkSelection: addWorksToScreen –í–´–ü–û–õ–ù–ï–ù –£–°–ü–ï–®–ù–û –¥–ª—è –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã');
      } else {
        console.log('üìù –û–¢–õ–ê–î–ö–ê WorkSelection: –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º estimateId =', currentEstimateId);
        addWorksToScreen('estimate-summary', validWorks, currentEstimateId);
        console.log('‚úÖ –û–¢–õ–ê–î–ö–ê WorkSelection: addWorksToScreen –í–´–ü–û–õ–ù–ï–ù –£–°–ü–ï–®–ù–û –¥–ª—è —Å–º–µ—Ç—ã', currentEstimateId);
      }
    } catch (error) {
      console.error('‚ùå –û–¢–õ–ê–î–ö–ê WorkSelection: –û–®–ò–ë–ö–ê –≤ addWorksToScreen:', error);
      setIsProcessing(false);
      return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ü–ï–†–ï–•–û–î —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Ñ–ª–∞–≥–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const transitionData = {
      selectedProject,
      selectedEstimate,
      selectedCategory,
      createNewEstimate,
      editMode: true,
      returnFromWorkSelection: true // –ö–†–ò–¢–ò–ß–ù–´–ô —Ñ–ª–∞–≥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ EstimateSummary
    };
    
    console.log('üîß –û–¢–õ–ê–î–ö–ê WorkSelection: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º transitionData:', transitionData);
    console.log('üîß –û–¢–õ–ê–î–ö–ê WorkSelection: selectedProject =', selectedProject);
    console.log('üîß –û–¢–õ–ê–î–ö–ê WorkSelection: returnFromWorkSelection =', true);
    
    // –ö–†–ò–¢–ò–ß–ù–û: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    console.log('üöÄ –û–¢–õ–ê–î–ö–ê WorkSelection: –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ estimate-summary —á–µ—Ä–µ–∑ 100ms');
    setTimeout(() => {
      console.log('üéØ –û–¢–õ–ê–î–ö–ê WorkSelection: –í–´–ó–´–í–ê–ï–ú navigateToScreen –¥–ª—è estimate-summary');
      navigateToScreen('estimate-summary', true, transitionData);
      console.log('‚úÖ –û–¢–õ–ê–î–ö–ê WorkSelection: navigateToScreen –í–´–ó–í–ê–ù –¥–ª—è estimate-summary');
      console.log('‚úÖ –û–¢–õ–ê–î–ö–ê WorkSelection: –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã:', transitionData);
      setIsProcessing(false); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      console.log('üîì –û–¢–õ–ê–î–ö–ê WorkSelection: isProcessing —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ false');
    }, 100);
    
    console.log('‚úÖ –û–¢–õ–ê–î–ö–ê WorkSelection: setTimeout –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω, –æ–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥');
  };

  if (isLoading) {
    return (
      <div className="mobile-screen">
        <LoadingSpinner message="–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Ä–∞–±–æ—Ç..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="mobile-screen">
        <ErrorMessage 
          message="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ä–∞–±–æ—Ç" 
          onRetry={refetch}
        />
      </div>
    );
  }

  return (
    <div className="mobile-screen">
      {/* Context Header */}
      <div className="mobile-card context-header">
        <div className="context-header-top">
          <button 
            className="back-button"
            onClick={() => {
              // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
              const screenData = getScreenData();
              if (screenData?.returnToEditor) {
                navigateToScreen('estimate-summary', true, screenData);
              } else if (editMode) {
                navigateToScreen('estimate-summary', true, screenData);
              } else {
                navigateToScreen('categories', true, screenData);
              }
            }}
            aria-label="–ù–∞–∑–∞–¥"
          >
            ‚Üê
          </button>
          <h2 className="context-title">{editMode ? '–†–µ–¥–∞–∫—Ç–æ—Ä —Å–º–µ—Ç—ã' : '–í—ã–±–æ—Ä —Ä–∞–±–æ—Ç'}</h2>
        </div>
        <div className="context-details">
          {!editMode && selectedCategory && (
            <div className="context-item">
              <span className="context-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span>
              <span className="context-value">{selectedCategory.name || selectedCategory.category_name}</span>
            </div>
          )}
          {editMode && selectedEstimate && (
            <div className="context-item">
              <span className="context-label">–°–º–µ—Ç–∞:</span>
              <span className="context-value">{selectedEstimate.estimate_number || `#${selectedEstimate.estimate_id}`}</span>
            </div>
          )}
          <div className="context-item">
            <span className="context-label">–í—ã–±—Ä–∞–Ω–æ:</span>
            <span className="context-value">{selectedWorks.length} —Ä–∞–±–æ—Ç</span>
          </div>
        </div>
      </div>

      {/* Search */}
      <div className="mobile-search">
        <input
          type="text"
          placeholder="–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="mobile-input search-input"
        />
      </div>

      {/* Works List */}
      {filteredWorks.length === 0 ? (
        <div className="mobile-empty">
          <div className="mobile-empty-icon">üîç</div>
          <div className="mobile-empty-text">
            {searchTerm ? '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : '–ù–µ—Ç —Ä–∞–±–æ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}
          </div>
          <div className="mobile-empty-subtext">
            {searchTerm 
              ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'
              : '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç'
            }
          </div>
        </div>
      ) : (
        <div className="mobile-list">
          {filteredWorks.map((work) => {
            const workId = work.id || work.work_type_id;
            const selectedWork = selectedWorks.find(w => (w.id || w.work_type_id) === workId);
            return (
              <WorkCard
                key={workId}
                work={work}
                isSelected={!!selectedWork}
                quantity={selectedWork?.quantity || 1}
                onToggle={() => handleWorkToggle(work)}
                onQuantityChange={(quantity) => handleQuantityChange(workId, quantity)}
              />
            );
          })}
        </div>
      )}

      {/* Action Buttons */}
      <div className="mobile-action-buttons">
        <button 
          className="mobile-btn secondary categories-btn"
          onClick={() => {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            if (selectedWorks.length > 0) {
              const currentEstimateId = screenData?.selectedEstimate?.estimate_id || screenData?.selectedEstimate?.id;
              try {
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º estimateId
                if (createNewEstimate || !currentEstimateId) {
                  addWorksToScreen('estimate-summary', selectedWorks);
                  console.log('‚úÖ WorkSelection: –¢–µ–∫—É—â–∏–µ —Ä–∞–±–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–π —Å–º–µ—Ç—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º');
                } else {
                  addWorksToScreen('estimate-summary', selectedWorks, currentEstimateId);
                  console.log('‚úÖ WorkSelection: –¢–µ–∫—É—â–∏–µ —Ä–∞–±–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å–º–µ—Ç—ã', currentEstimateId, '–ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º');
                }
              } catch (error) {
                console.error('‚ùå WorkSelection: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç:', error);
              }
            }
            navigateToScreen('categories', false, { selectedProject, createNewEstimate, editMode });
          }}
        >
          –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        </button>
        
        {selectedWorks.length > 0 && (
          <button 
            className="mobile-btn continue-btn"
            onClick={handleContinue}
          >
            {editMode ? `–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–º–µ—Ç—É (${selectedWorks.length})` : `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (${selectedWorks.length})`}
          </button>
        )}
      </div>
    </div>
  );
};

export default WorkSelection;