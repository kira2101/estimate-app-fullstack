import React from 'react';
import { useQuery } from '@tanstack/react-query';
import { useMobileNavigationContext } from '../context/MobileNavigationContext';
import { useMobileAuth } from '../MobileApp';
import { api } from '../../api/client';
import EstimateCard from '../components/ui/EstimateCard';
import LoadingSpinner from '../components/ui/LoadingSpinner';
import ErrorMessage from '../components/ui/ErrorMessage';

/**
 * Project Info Screen
 * Displays detailed project information with estimates list and statistics
 */
const ProjectInfo = () => {
  const { navigateToScreen, getScreenData } = useMobileNavigationContext();
  const { user } = useMobileAuth();
  
  const screenData = getScreenData();
  const selectedProject = screenData?.selectedProject;
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('üîç ProjectInfo Debug:');
  console.log('- –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
  console.log('- –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç:', selectedProject);
  console.log('- Screen data:', screenData);

  // Fetch estimates for this project
  const { 
    data: estimates = [], 
    isLoading, 
    error,
    refetch 
  } = useQuery({
    queryKey: ['estimates', selectedProject?.project_id || selectedProject?.id],
    queryFn: async () => {
      const projectId = selectedProject?.project_id || selectedProject?.id;
      console.log('üìä –ó–∞–ø—Ä–æ—Å —Å–º–µ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ID:', projectId);
      
      try {
        const data = await api.getEstimates();
        console.log('üìã –í—Å–µ —Å–º–µ—Ç—ã –æ—Ç API:', data);
        console.log('üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ—Ç:', data?.length || 0);
        
        if (Array.isArray(data)) {
          data.forEach((estimate, index) => {
            console.log(`üìÑ –°–º–µ—Ç–∞ ${index + 1}:`, {
              estimate_id: estimate.estimate_id,
              name: estimate.name,
              project: estimate.project,
              project_id: estimate.project_id,
              creator: estimate.creator,
              foreman: estimate.foreman,
              status: estimate.status
            });
          });
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        console.log('üë§ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user?.role);
        console.log('üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user?.user_id);  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–æ–µ–∫—Ç—É
        const filtered = Array.isArray(data) ? data.filter(estimate => {
          const matches = estimate.project === projectId || 
                         estimate.project_id === projectId ||
                         estimate.project?.id === projectId ||
                         estimate.project?.project_id === projectId;
          
          if (matches) {
            console.log(`‚úÖ –°–º–µ—Ç–∞ "${estimate.name}" –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`);
            console.log(`  - –ü—Ä–æ—Ä–∞–± —Å–º–µ—Ç—ã:`, estimate.foreman);
            console.log(`  - –°–æ–∑–¥–∞—Ç–µ–ª—å —Å–º–µ—Ç—ã:`, estimate.creator);
            console.log(`  - –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`, user?.user_id);
          }
          
          return matches;
        }) : [];
        
        console.log('üéØ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:', filtered);
        console.log('üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–º–µ—Ç:', filtered.length);
        
        return filtered;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ—Ç:', error);
        throw error;
      }
    },
    enabled: !!(selectedProject?.project_id || selectedProject?.id),
    onError: (error) => {
      console.error('‚ùå React Query error:', error);
    }
  });

  // Redirect if no project selected
  if (!selectedProject) {
    React.useEffect(() => {
      navigateToScreen('projects');
    }, [navigateToScreen]);
    return null;
  }

  const handleCreateEstimate = () => {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:', selectedProject);
    navigateToScreen('categories', true, { 
      selectedProject,
      createNewEstimate: true 
    });
  };

  const handleEstimateSelect = (estimate) => {
    navigateToScreen('works-summary', true, { 
      selectedProject,
      selectedEstimate: estimate 
    });
  };

  const handleAddExpenses = () => {
    // TODO: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —ç–∫—Ä–∞–Ω—É –≤–Ω–µ—Å–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç
    console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:', selectedProject);
    // navigateToScreen('add-expenses', true, { selectedProject });
  };

  // Calculate project statistics for foreman
  const completedEstimates = estimates.filter(e => e.status?.name === '–ó–∞–≤–µ—Ä—à–µ–Ω–∞');
  const inProgressEstimates = estimates.filter(e => e.status?.name === '–í —Ä–∞–±–æ—Ç–µ');
  const totalEstimatesValue = estimates.reduce((sum, e) => sum + (e.total_cost || 0), 0);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Ä–∞–±–∞
  const advances = completedEstimates.reduce((sum, e) => sum + (e.total_cost || 0) * 0.3, 0); // 30% –∞–≤–∞–Ω—Å
  const expenses = estimates.reduce((sum, e) => sum + (e.expenses || 0), 0); // –ó–∞—Ç—Ä–∞—Ç—ã
  const totalAmount = totalEstimatesValue; // –û–±—â–∞—è —Å—É–º–º–∞ —Å–º–µ—Ç

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –≥—Ä–∏–≤–Ω–∞—Ö
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('uk-UA', {
      style: 'currency',
      currency: 'UAH',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  };

  if (isLoading) {
    return (
      <div className="mobile-screen">
        <LoadingSpinner message="–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="mobile-screen">
        <ErrorMessage 
          message="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ" 
          onRetry={refetch}
        />
      </div>
    );
  }

  return (
    <div className="mobile-screen project-info-screen">
      {/* Fixed Header Section */}
      <div className="project-fixed-header">
        {/* Project Header */}
        <div className="project-header">
          <div className="project-name">{selectedProject.name || selectedProject.project_name}</div>
          <div className="project-address">{selectedProject.address || selectedProject.project_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</div>
        </div>

        {/* Financial Statistics - –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∫ –Ω–∞ ui.jpg */}
        <div className="finance-cards-grid">
          <div className="finance-card-item">
            <div className="finance-card-value">{formatCurrency(advances)}</div>
            <div className="finance-card-label">–ü–æ–ª—É—á–µ–Ω–æ –∞–≤–∞–Ω—Å–æ–≤</div>
          </div>
          <div className="finance-card-item">
            <div className="finance-card-value">{formatCurrency(expenses)}</div>
            <div className="finance-card-label">–ú–æ–∏ –∑–∞—Ç—Ä–∞—Ç—ã</div>
          </div>
          <div className="finance-card-item">
            <div className="finance-card-value">{formatCurrency(totalAmount)}</div>
            <div className="finance-card-label">–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–±–æ—Ç</div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="project-actions">
          <button 
            className="mobile-btn mobile-btn-primary"
            onClick={handleCreateEstimate}
          >
            ‚ûï –°–æ–∑–¥–∞—Ç—å —Å–º–µ—Ç—É
          </button>
          <button 
            className="mobile-btn mobile-btn-secondary"
            onClick={handleAddExpenses}
          >
            üí∞ –í–Ω–µ—Å—Ç–∏ –∑–∞—Ç—Ä–∞—Ç—ã
          </button>
        </div>
      </div>

      {/* Scrollable Estimates Section */}
      <div className="estimates-scrollable-section">
        <div className="mobile-card estimates-card">
          <div className="estimates-header">
            <h3 className="estimates-title">–°–º–µ—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ ({estimates.length})</h3>
          </div>

          {estimates.length === 0 ? (
            <div className="mobile-empty">
              <div className="mobile-empty-icon">üìã</div>
              <div className="mobile-empty-text">–ù–µ—Ç —Å–º–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞</div>
              <div className="mobile-empty-subtext">
                –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–º–µ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
              </div>
            </div>
          ) : (
            <div className="mobile-list estimates-list">
              {estimates.map((estimate) => (
                <EstimateCard
                  key={estimate.estimate_id}
                  estimate={estimate}
                  onClick={() => handleEstimateSelect(estimate)}
                />
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProjectInfo;