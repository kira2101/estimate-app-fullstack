/**
 * React Hook –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Event Bus
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞/–æ—Ç–ø–∏—Å–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/—Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */

import { useEffect, useRef, useCallback, useState } from 'react';
import eventBus from '../utils/EventBus';
import { isValidEventType } from '../utils/EventTypes';

/**
 * Hook –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è Event Bus
 * @param {string|Array<string>} eventTypes - —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –º–∞—Å—Å–∏–≤ —Ç–∏–ø–æ–≤
 * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
 * @param {Array} deps - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è callback (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ useCallback)
 * @param {Object} options - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 */
export const useEventBusListener = (eventTypes, callback, deps = [], options = {}) => {
  const { 
    enabled = true,
    listenerId = null 
  } = options;
  
  const listenerIdRef = useRef(listenerId || `listener_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
  
  // Memoize callback to prevent unnecessary re-subscriptions
  const memoizedCallback = useCallback(callback, deps);
  
  useEffect(() => {
    if (!enabled) return;
    
    const types = Array.isArray(eventTypes) ? eventTypes : [eventTypes];
    const id = listenerIdRef.current;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    // const invalidTypes = types.filter(type => !isValidEventType(type));
    // if (invalidTypes.length > 0) {
    //   console.warn('useEventBusListener: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π:', invalidTypes);
    // }
    
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    types.forEach(eventType => {
      eventBus.subscribe(eventType, id, memoizedCallback);
    });
    
    console.log(`üîó –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è: ${types.join(', ')} [${id}]`);
    
    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    return () => {
      types.forEach(eventType => {
        eventBus.unsubscribe(eventType, id);
      });
      console.log(`üîå –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π: ${types.join(', ')} [${id}]`);
    };
  }, [eventTypes, memoizedCallback, enabled]);
  
  return listenerIdRef.current;
};

/**
 * Hook –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
 * @returns {Function} emit - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
 */
export const useEventBusEmitter = () => {
  const emit = useCallback((eventType, eventData = {}) => {
    if (!isValidEventType(eventType)) {
      console.warn('useEventBusEmitter: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:', eventType);
    }
    
    eventBus.emit(eventType, eventData);
  }, []);
  
  return emit;
};

/**
 * Hook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Event Bus
 * @param {boolean} enabled - –≤–∫–ª—é—á–∏—Ç—å –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * @returns {Object} stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Event Bus
 */
export const useEventBusStats = (enabled = false) => {
  const [stats, setStats] = useState(null);
  
  useEffect(() => {
    if (!enabled) return;
    
    const updateStats = () => {
      setStats(eventBus.getStats());
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    updateStats();
    const interval = setInterval(updateStats, 5000);
    
    return () => clearInterval(interval);
  }, [enabled]);
  
  return stats;
};

/**
 * Hook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ–±—ã—Ç–∏—è—Ö
 * –£–ø—Ä–æ—â–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω "—Å–ª—É—à–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ -> –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
 * @param {string|Array<string>} eventTypes - —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
 * @param {Function} refetchFunction - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 * @param {Array} deps - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
 * @param {Object} options - –æ–ø—Ü–∏–∏
 */
export const useEventBusRefresh = (eventTypes, refetchFunction, deps = [], options = {}) => {
  const { 
    enabled = true,
    delay = 0, // –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º (–º—Å)
    debounce = false // –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
  } = options;
  
  const timeoutRef = useRef(null);
  
  const handleRefresh = useCallback((eventData) => {
    if (timeoutRef.current && debounce) {
      clearTimeout(timeoutRef.current);
    }
    
    const executeRefresh = () => {
      try {
        if (typeof refetchFunction === 'function') {
          refetchFunction(eventData);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ–±—ã—Ç–∏—é:', error);
      }
    };
    
    if (delay > 0 || debounce) {
      timeoutRef.current = setTimeout(executeRefresh, delay || 300);
    } else {
      executeRefresh();
    }
  }, [refetchFunction, delay, debounce]);
  
  useEventBusListener(eventTypes, handleRefresh, deps, { enabled });
  
  // Cleanup timeout –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);
};

export default {
  useEventBusListener,
  useEventBusEmitter,
  useEventBusStats,
  useEventBusRefresh
};