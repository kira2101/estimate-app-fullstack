/**
 * React Hook –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Server-Sent Events (SSE)
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π Event Bus —Å–∏—Å—Ç–µ–º–æ–π
 */

import { useEffect, useRef, useCallback } from 'react';
import eventBus from '../utils/EventBus';
import { isValidEventType, createEvent } from '../utils/EventTypes';

/**
 * Hook –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SSE –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Event Bus
 * @param {Object} options - –û–ø—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * @param {boolean} options.enabled - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å SSE (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
 * @param {number} options.reconnectDelay - –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3000)
 * @param {number} options.maxReconnectAttempts - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
 */
export const useSSE = (options = {}) => {
  const {
    enabled = true,
    reconnectDelay = 3000,
    maxReconnectAttempts = 5
  } = options;

  const eventSourceRef = useRef(null);
  const reconnectTimeoutRef = useRef(null);
  const reconnectAttemptsRef = useRef(0);
  const isConnectedRef = useRef(false);

  // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL API
  const getApiUrl = useCallback(() => {
    if (typeof window === 'undefined') return '';
    
    const hostname = window.location.hostname;
    
    // –î–µ—Ç–µ–∫—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ä–µ–¥
    if (hostname === 'localhost' || hostname === '127.0.0.1') {
      return 'http://localhost:8000/api/v1';
    } else if (hostname.includes('ngrok') || hostname.includes('ngrok-free.app')) {
      return `https://${hostname}/api/v1`;
    } else if (hostname === 'dev.app.iqbs.pro') {
      return 'https://dev.app.iqbs.pro/api/v1';
    } else {
      // Fallback –¥–ª—è production
      return '/api/v1';
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SSE
  const connectSSE = useCallback(() => {
    if (!enabled || eventSourceRef.current) {
      return;
    }

    const token = localStorage.getItem('authToken');
    if (!token) {
      console.warn('üîå [SSE] –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. SSE –æ—Ç–∫–ª—é—á–µ–Ω.');
      return;
    }

    const apiUrl = getApiUrl();
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ URL –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ EventSource
    const sseUrl = `${apiUrl}/sse/events/?token=${encodeURIComponent(token)}`;

    console.log('üîå [SSE] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫:', sseUrl);

    try {
      // –°–æ–∑–¥–∞–µ–º EventSource —Å —Ç–æ–∫–µ–Ω–æ–º –≤ URL
      const eventSource = new EventSource(sseUrl);
      
      eventSourceRef.current = eventSource;

      eventSource.onopen = (event) => {
        console.log('‚úÖ [SSE] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        isConnectedRef.current = true;
        reconnectAttemptsRef.current = 0;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –≤ Event Bus
        eventBus.emit('system.connectionRestored', {
          type: 'sse',
          timestamp: new Date().toISOString()
        });
      };

      eventSource.onmessage = (event) => {
        try {
          const eventData = JSON.parse(event.data);
          console.log('üì® [SSE] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ:', eventData);

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
          if (eventData.event === 'keepalive') {
            // Keep-alive —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤ Event Bus
            return;
          }

          if (eventData.event === 'connected') {
            console.log('üîó [SSE] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º');
            return;
          }

          // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
          if (isValidEventType(eventData.event)) {
            // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Event Bus
            const busEvent = createEvent(
              eventData.event,
              eventData.data || {},
              {
                source: 'sse',
                timestamp: eventData.timestamp,
                ...eventData.metadata
              }
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Event Bus (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è SSE —Å–æ–±—ã—Ç–∏–π)
            console.log('üöå [SSE‚ÜíEventBus] –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ:', eventData.event);
            eventBus.emit(eventData.event, busEvent);
          } else {
            // –î–ª—è SSE —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ EventTypes
            console.log('üöå [SSE‚ÜíEventBus] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SSE —Å–æ–±—ã—Ç–∏–µ:', eventData.event);
            const busEvent = createEvent(eventData.event, eventData.data || {}, {
              source: 'sse',
              timestamp: new Date().toISOString(),
              originalEvent: eventData
            });
            eventBus.emit(eventData.event, busEvent);
          }

        } catch (error) {
          console.error('‚ùå [SSE] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏—è:', error);
        }
      };

      eventSource.onerror = (event) => {
        console.error('‚ùå [SSE] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', event);
        isConnectedRef.current = false;
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if (eventSourceRef.current) {
          eventSourceRef.current.close();
          eventSourceRef.current = null;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –ø–æ—Ç–µ—Ä–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        eventBus.emit('system.connectionLost', {
          type: 'sse',
          timestamp: new Date().toISOString(),
          error: event
        });

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if (reconnectAttemptsRef.current < maxReconnectAttempts) {
          reconnectAttemptsRef.current += 1;
          console.log(`üîÑ [SSE] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${reconnectDelay}–º—Å (–ø–æ–ø—ã—Ç–∫–∞ ${reconnectAttemptsRef.current}/${maxReconnectAttempts})`);
          
          reconnectTimeoutRef.current = setTimeout(() => {
            connectSSE();
          }, reconnectDelay);
        } else {
          console.error('üí• [SSE] –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        }
      };

    } catch (error) {
      console.error('‚ùå [SSE] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è EventSource:', error);
    }
  }, [enabled, getApiUrl, reconnectDelay, maxReconnectAttempts]);

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç SSE
  const disconnectSSE = useCallback(() => {
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º EventSource
    if (eventSourceRef.current) {
      console.log('üîå [SSE] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...');
      eventSourceRef.current.close();
      eventSourceRef.current = null;
      isConnectedRef.current = false;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    reconnectAttemptsRef.current = 0;
  }, []);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
  useEffect(() => {
    if (enabled) {
      connectSSE();
    } else {
      disconnectSSE();
    }

    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      disconnectSSE();
    };
  }, [enabled, connectSSE, disconnectSSE]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
  useEffect(() => {
    const handleStorageChange = (event) => {
      if (event.key === 'authToken') {
        if (event.newValue) {
          // –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
          console.log('üîë [SSE] –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
          disconnectSSE();
          setTimeout(connectSSE, 1000);
        } else {
          // –¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω - –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
          console.log('üö™ [SSE] –¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω, –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ...');
          disconnectSSE();
        }
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, [connectSSE, disconnectSSE]);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  return {
    isConnected: isConnectedRef.current,
    reconnectAttempts: reconnectAttemptsRef.current,
    maxReconnectAttempts,
    connect: connectSSE,
    disconnect: disconnectSSE
  };
};

export default useSSE;