/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Event Bus –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–æ–±–∏–ª—å–Ω—ã–º –∏ desktop UI
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ React Query, —Ç–∞–∫ –∏ –ø—Ä—è–º—ã–µ API –≤—ã–∑–æ–≤—ã
 */

class EventBus {
  constructor() {
    this.listeners = new Map();
    this.queryClient = null;
    
    // –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    this.debug = process.env.NODE_ENV === 'development';
    
    if (this.debug) {
      console.log('üöå EventBus –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ QueryClient –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å React Query
   */
  setQueryClient(queryClient) {
    this.queryClient = queryClient;
    if (this.debug) {
      console.log('üöå QueryClient –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ EventBus');
    }
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
   * @param {string} eventType - —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
   * @param {string} listenerId - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–ª—É—à–∞—Ç–µ–ª—è 
   * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   */
  subscribe(eventType, listenerId, callback) {
    if (!this.listeners.has(eventType)) {
      this.listeners.set(eventType, new Map());
    }
    
    this.listeners.get(eventType).set(listenerId, callback);
    
    if (this.debug) {
      console.log(`üöå –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${eventType} -> ${listenerId}`);
    }
  }

  /**
   * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
   */
  unsubscribe(eventType, listenerId) {
    if (this.listeners.has(eventType)) {
      this.listeners.get(eventType).delete(listenerId);
      
      if (this.debug) {
        console.log(`üöå –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞: ${eventType} -> ${listenerId}`);
      }
    }
  }

  /**
   * –û—Ç–ø–∏—Å–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –æ—Ç –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
   */
  unsubscribeAll(listenerId) {
    for (const [eventType, listeners] of this.listeners.entries()) {
      if (listeners.has(listenerId)) {
        listeners.delete(listenerId);
        
        if (this.debug) {
          console.log(`üöå –°–ª—É—à–∞—Ç–µ–ª—å ${listenerId} –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç ${eventType}`);
        }
      }
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
   * @param {string} eventType - —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
   * @param {Object} eventData - –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  emit(eventType, eventData = {}) {
    if (this.debug) {
      console.log(`üöå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è: ${eventType}`, eventData);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–ª—É—à–∞—Ç–µ–ª—è–º
    if (this.listeners.has(eventType)) {
      const callbacks = this.listeners.get(eventType);
      
      callbacks.forEach((callback, listenerId) => {
        try {
          callback(eventData);
          
          if (this.debug) {
            console.log(`üöå –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${eventType} -> ${listenerId}`);
          }
        } catch (error) {
          console.error(`üöå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ ${listenerId} –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${eventType}:`, error);
        }
      });
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è React Query –∫—ç—à–µ–π
    this._handleQueryInvalidation(eventType, eventData);
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–µ–π React Query
   * @private
   */
  _handleQueryInvalidation(eventType, eventData) {
    if (!this.queryClient) {
      return;
    }

    // –ú–∞–ø–ø–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–ª—é—á–∏ React Query
    const queryKeyMap = {
      'estimate.created': ['estimates', 'projects'],
      'estimate.updated': ['estimates', 'projects'],
      'estimate.deleted': ['estimates', 'projects'],
      'project.created': ['projects'],
      'project.updated': ['projects'],
      'project.deleted': ['projects'],
      'workCategory.created': ['workCategories'],
      'workCategory.updated': ['workCategories'],
      'workType.created': ['workTypes'],
      'workType.updated': ['workTypes'],
      'user.created': ['users'],
      'user.updated': ['users'],
      'status.updated': ['statuses']
    };

    const keysToInvalidate = queryKeyMap[eventType] || [];
    
    keysToInvalidate.forEach(queryKey => {
      this.queryClient.invalidateQueries({ queryKey: [queryKey] });
      
      if (this.debug) {
        console.log(`üöå –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –∫—ç—à: ${queryKey} –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${eventType}`);
      }
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
   */
  getSubscriptionCount(eventType = null) {
    if (eventType) {
      return this.listeners.get(eventType)?.size || 0;
    }
    
    let total = 0;
    for (const listeners of this.listeners.values()) {
      total += listeners.size;
    }
    return total;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ EventBus
   */
  getStats() {
    const stats = {
      totalEventTypes: this.listeners.size,
      totalSubscriptions: this.getSubscriptionCount(),
      eventTypes: {}
    };

    for (const [eventType, listeners] of this.listeners.entries()) {
      stats.eventTypes[eventType] = listeners.size;
    }

    return stats;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–¥–ª—è cleanup)
   */
  clear() {
    this.listeners.clear();
    
    if (this.debug) {
      console.log('üöå EventBus –æ—á–∏—â–µ–Ω');
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä EventBus
const eventBus = new EventBus();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ singleton
export default eventBus;

// –¢–∞–∫–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export { EventBus };