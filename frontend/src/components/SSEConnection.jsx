/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

import React, { useEffect } from 'react';
import { useSSE } from '../hooks/useSSE';
import eventBus from '../utils/EventBus';

const SSEConnection = ({ user, children }) => {
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SSE —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
  const { isConnected, reconnectAttempts, maxReconnectAttempts } = useSSE({
    enabled: !!user, // –í–∫–ª—é—á–∞–µ–º SSE —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    reconnectDelay: 3000,
    maxReconnectAttempts: 5
  });

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  useEffect(() => {
    const handleConnectionLost = (event) => {
      console.warn('üî¥ [SSE] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ:', event);
    };

    const handleConnectionRestored = (event) => {
      console.log('üü¢ [SSE] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', event);
    };

    eventBus.subscribe('system.connectionLost', 'sse-connection', handleConnectionLost);
    eventBus.subscribe('system.connectionRestored', 'sse-connection', handleConnectionRestored);

    return () => {
      eventBus.unsubscribeAll('sse-connection');
    };
  }, []);

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ development —Ä–µ–∂–∏–º–µ
  if (process.env.NODE_ENV === 'development') {
    return (
      <>
        {children}
        <SSEStatusIndicator 
          isConnected={isConnected}
          reconnectAttempts={reconnectAttempts}
          maxReconnectAttempts={maxReconnectAttempts}
          user={user}
        />
      </>
    );
  }

  return children;
};

/**
 * –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
 */
const SSEStatusIndicator = ({ isConnected, reconnectAttempts, maxReconnectAttempts, user }) => {
  if (!user) {
    return null; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
  }

  const getStatusColor = () => {
    if (isConnected) return '#4caf50'; // –ó–µ–ª–µ–Ω—ã–π
    if (reconnectAttempts > 0) return '#ff9800'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    return '#f44336'; // –ö—Ä–∞—Å–Ω—ã–π
  };

  const getStatusText = () => {
    if (isConnected) return 'SSE –ø–æ–¥–∫–ª—é—á–µ–Ω';
    if (reconnectAttempts > 0) return `SSE –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (${reconnectAttempts}/${maxReconnectAttempts})`;
    return 'SSE –æ—Ç–∫–ª—é—á–µ–Ω';
  };

  return (
    <div
      style={{
        position: 'fixed',
        bottom: '20px',
        right: '20px',
        background: 'rgba(0, 0, 0, 0.8)',
        color: 'white',
        padding: '8px 12px',
        borderRadius: '4px',
        fontSize: '12px',
        zIndex: 10000,
        display: 'flex',
        alignItems: 'center',
        gap: '8px',
        boxShadow: '0 2px 8px rgba(0, 0, 0, 0.2)'
      }}
    >
      <div
        style={{
          width: '8px',
          height: '8px',
          borderRadius: '50%',
          backgroundColor: getStatusColor(),
          animation: isConnected ? 'none' : 'pulse 2s infinite'
        }}
      />
      <span>{getStatusText()}</span>
      
      <style jsx>{`
        @keyframes pulse {
          0% { opacity: 1; }
          50% { opacity: 0.5; }
          100% { opacity: 1; }
        }
      `}</style>
    </div>
  );
};

export default SSEConnection;