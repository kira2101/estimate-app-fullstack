#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –ø—Ä–æ—Ä–∞–±–æ–≤ –Ω–∞ —Å–º–µ—Ç—ã
"""

import sys
import os
sys.path.append('/home/kira/PycharmProjects/Estiamate_app_Gemeni/backend')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from api.models import User, Estimate, Status, Project, Client
import requests
import json

def test_foreman_assignment_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ä–∞–±–∞ –Ω–∞ —Å–º–µ—Ç—É"""
    
    print("üß™ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ä–∞–±–∞")
    print("=" * 50)
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
    manager_email = "manager@example.com"
    foreman_email = "foreman@example.com"
    password = "password123"
    base_url = "http://127.0.0.1:8000/api/v1"
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...")
        
        # –¢–æ–∫–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        response = requests.post(f"{base_url}/auth/login/", 
                                json={"email": manager_email, "password": password})
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {response.text}")
            return False
        manager_token = response.json()["token"]
        
        # –¢–æ–∫–µ–Ω –ø—Ä–æ—Ä–∞–±–∞
        response = requests.post(f"{base_url}/auth/login/", 
                                json={"email": foreman_email, "password": password})
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–æ—Ä–∞–±–∞: {response.text}")
            return False
        foreman_token = response.json()["token"]
        
        print("‚úÖ –¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        headers_manager = {"Authorization": f"Bearer {manager_token}"}
        response = requests.get(f"{base_url}/users/", headers=headers_manager)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.text}")
            return False
            
        users = response.json()
        manager_user = next((u for u in users if u["email"] == manager_email), None)
        foreman_user = next((u for u in users if u["email"] == foreman_email), None)
        
        if not manager_user or not foreman_user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
            
        print(f"‚úÖ Manager ID: {manager_user['user_id']}")
        print(f"‚úÖ Foreman ID: {foreman_user['user_id']}")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å—ã
        print("3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤...")
        
        response = requests.get(f"{base_url}/projects/", headers=headers_manager)
        projects = response.json()
        if not projects:
            print("‚ùå –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return False
        project_id = projects[0]["project_id"]
        
        response = requests.get(f"{base_url}/statuses/", headers=headers_manager)
        statuses = response.json()
        draft_status = next((s for s in statuses if s["status_name"] == "–ß–µ—Ä–Ω–æ–≤–∏–∫"), None)
        if not draft_status:
            print("‚ùå –°—Ç–∞—Ç—É—Å '–ß–µ—Ä–Ω–æ–≤–∏–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç ID: {project_id}")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å ID: {draft_status['status_id']}")
        
        # 4. –ì–õ–ê–í–ù–´–ô –¢–ï–°–¢: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–µ—Ç —Å–º–µ—Ç—É –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ—Ä–∞–±–∞
        print("4. –°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –ø—Ä–æ—Ä–∞–±–∞...")
        
        estimate_data = {
            "project_id": project_id,
            "status_id": draft_status["status_id"],
            "foreman_id": foreman_user["user_id"],  # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ—Ä–∞–±–∞!
            "estimate_number": "–¢–ï–°–¢_–°–º–µ—Ç–∞_–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ_–ü—Ä–æ—Ä–∞–±–∞",
            "items": []
        }
        
        response = requests.post(f"{base_url}/estimates/", 
                                json=estimate_data, 
                                headers=headers_manager)
        
        if response.status_code not in [200, 201]:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã: {response.status_code} - {response.text}")
            return False
            
        created_estimate = response.json()
        estimate_id = created_estimate["estimate_id"]
        
        print(f"‚úÖ –°–º–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {estimate_id}")
        
        # 5. –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ä–∞–± –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        print("5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ä–∞–±–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–º–µ—Ç—ã
        response = requests.get(f"{base_url}/estimates/{estimate_id}/", headers=headers_manager)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–º–µ—Ç—ã: {response.text}")
            return False
            
        estimate_details = response.json()
        assigned_foreman = estimate_details.get("foreman")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–æ—Ä–∞–±–∞
        if isinstance(assigned_foreman, dict):
            assigned_foreman_id = assigned_foreman.get("user_id")
        else:
            assigned_foreman_id = assigned_foreman
        
        if assigned_foreman_id != foreman_user["user_id"]:
            print(f"‚ùå –û–®–ò–ë–ö–ê! –ù–∞–∑–Ω–∞—á–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ—Ä–∞–±:")
            print(f"   –û–∂–∏–¥–∞–ª—Å—è: {foreman_user['user_id']}")
            print(f"   –ù–∞–∑–Ω–∞—á–µ–Ω: {assigned_foreman_id}")
            return False
        
        print(f"‚úÖ –ü—Ä–æ—Ä–∞–± –Ω–∞–∑–Ω–∞—á–µ–Ω –ü–†–ê–í–ò–õ–¨–ù–û: {assigned_foreman_id}")
        
        # 6. –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê: –ü—Ä–æ—Ä–∞–± –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —ç—Ç—É —Å–º–µ—Ç—É
        print("6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ—Ä–∞–±–∞ –∫ —Å–º–µ—Ç–µ...")
        
        headers_foreman = {"Authorization": f"Bearer {foreman_token}"}
        response = requests.get(f"{base_url}/estimates/", headers=headers_foreman)
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ—Ç –ø—Ä–æ—Ä–∞–±–æ–º: {response.text}")
            return False
            
        foreman_estimates = response.json()
        found_estimate = next((e for e in foreman_estimates if e["estimate_id"] == estimate_id), None)
        
        if not found_estimate:
            print("‚ùå –û–®–ò–ë–ö–ê! –ü—Ä–æ—Ä–∞–± –ù–ï –í–ò–î–ò–¢ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –µ–º—É —Å–º–µ—Ç—É!")
            return False
        
        print("‚úÖ –ü—Ä–æ—Ä–∞–± –í–ò–î–ò–¢ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –µ–º—É —Å–º–µ—Ç—É!")
        
        # 7. –û—á–∏—Å—Ç–∫–∞: –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–º–µ—Ç—É
        print("7. –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–º–µ—Ç—ã...")
        response = requests.delete(f"{base_url}/estimates/{estimate_id}/", headers=headers_manager)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–º–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞")
        
        print("\n" + "=" * 50)
        print("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ä–∞–±–æ–≤ –Ω–∞ —Å–º–µ—Ç—ã")
        print("‚úÖ –ü—Ä–æ—Ä–∞–±—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∏–º —Å–º–µ—Ç—ã")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    try:
        response = requests.get("http://127.0.0.1:8000/api/v1/statuses/", timeout=2)
        server_running = True
    except:
        server_running = False
    
    if not server_running:
        print("‚ùå Django —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: cd backend && python manage.py runserver")
        sys.exit(1)
    
    success = test_foreman_assignment_fix()
    sys.exit(0 if success else 1)