#!/bin/bash

# =============================================================================
# –°–∫—Ä–∏–ø—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–ø–ª–æ—è dev –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–≥–¥–∞ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ SSH –¥–æ—Å—Ç—É–ø–∞
# =============================================================================

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DEV_URL="https://dev.app.iqbs.pro"
API_URL="$DEV_URL/api/v1"
HEALTH_URL="$API_URL/health/"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# =============================================================================
# –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò
# =============================================================================

check_git_status() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Git —Å—Ç–∞—Ç—É—Å–∞..."
    
    echo "–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞:"
    git branch --show-current
    
    echo -e "\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã:"
    git log --oneline -5
    
    echo -e "\n–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π:"
    git status --short
    
    success "Git —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω"
}

check_dev_site_status() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ dev —Å–∞–π—Ç–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞
    echo -n "Frontend (dev.app.iqbs.pro): "
    if curl -s -I "$DEV_URL" | head -1 | grep -q "200\|301\|302"; then
        success "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
    else
        error "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        curl -s -I "$DEV_URL" | head -3
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    echo -n "API Health Check: "
    HEALTH_RESPONSE=$(curl -s "$HEALTH_URL" || echo "CONNECTION_ERROR")
    
    if echo "$HEALTH_RESPONSE" | grep -q "healthy\|status"; then
        success "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç"
        echo "Response: $HEALTH_RESPONSE"
    else
        error "‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        echo "Response: $HEALTH_RESPONSE"
    fi
}

check_deployment_files() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–µ–ø–ª–æ—è..."
    
    FILES_TO_CHECK=(
        ".github/workflows/deploy-dev.yml"
        "deploy/quick-deploy-dev.sh"
        "deploy/github-actions-secrets.md"
        "deploy/DEV_DEPLOYMENT_GUIDE.md"
    )
    
    for FILE in "${FILES_TO_CHECK[@]}"; do
        if [ -f "$FILE" ]; then
            success "‚úÖ $FILE —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else
            error "‚ùå $FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    done
}

simulate_docker_commands() {
    log "–°–∏–º—É–ª—è—Ü–∏—è Docker –∫–æ–º–∞–Ω–¥ (–ª–æ–∫–∞–ª—å–Ω–æ)..."
    
    echo "–ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:"
    
    cat << 'COMMANDS'
# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
docker stop estimate-backend-dev estimate-frontend-dev

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤  
docker rm estimate-backend-dev estimate-frontend-dev

# –°–±–æ—Ä–∫–∞ backend –æ–±—Ä–∞–∑–∞
docker build -t estimate-app-backend:dev-new ./backend/

# –°–±–æ—Ä–∫–∞ frontend –æ–±—Ä–∞–∑–∞
docker build -t estimate-app-frontend:dev-new ./frontend/ \
  --build-arg VITE_API_BASE_URL=https://dev.app.iqbs.pro/api/v1

# –ó–∞–ø—É—Å–∫ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
docker run -d --name estimate-backend-dev \
  --restart unless-stopped \
  -p 8001:8000 \
  -e DATABASE_URL=postgresql://estimate_user:secure_password_123@host.docker.internal:5432/estimate_app_db \
  -e ALLOWED_HOSTS=dev.app.iqbs.pro,localhost,127.0.0.1 \
  --add-host=host.docker.internal:host-gateway \
  estimate-app-backend:dev-new

# –ó–∞–ø—É—Å–∫ frontend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
docker run -d --name estimate-frontend-dev \
  --restart unless-stopped \
  -p 3001:80 \
  estimate-app-frontend:dev-new

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ Nginx
sudo nginx -s reload
COMMANDS

    success "Docker –∫–æ–º–∞–Ω–¥—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã"
}

wait_and_recheck() {
    log "–û–∂–∏–¥–∞–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π..."
    sleep 120
    
    log "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–∞..."
    check_dev_site_status
}

check_github_actions_requirements() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è GitHub Actions..."
    
    echo "–¢—Ä–µ–±—É–µ–º—ã–µ GitHub Secrets:"
    echo "  - DEV_SSH_PRIVATE_KEY: SSH –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É"
    echo ""
    echo "Workflow —Ñ–∞–π–ª: .github/workflows/deploy-dev.yml"
    echo "–¢—Ä–∏–≥–≥–µ—Ä: push –≤ –≤–µ—Ç–∫—É 'dev'"
    echo ""
    
    if git log --oneline -1 | grep -q "fix\|feat\|deploy"; then
        success "‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –¥–µ–ø–ª–æ—è"
    else
        warning "‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç –º–æ–∂–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –¥–µ–ø–ª–æ—è"
    fi
}

generate_debug_report() {
    log "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏..."
    
    REPORT_FILE="deploy/debug-report-$(date +%Y%m%d-%H%M%S).md"
    
    cat > "$REPORT_FILE" << EOF
# –û—Ç—á–µ—Ç –æ–± –æ—Ç–ª–∞–¥–∫–µ –¥–µ–ø–ª–æ—è Dev –æ–∫—Ä—É–∂–µ–Ω–∏—è

**–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:** $(date '+%Y-%m-%d %H:%M:%S')  
**–í–µ—Ç–∫–∞:** $(git branch --show-current)  
**–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:** $(git log --oneline -1)

## –°—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞

**Dev URL:** $DEV_URL  
**API URL:** $API_URL  
**Health URL:** $HEALTH_URL

### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏

**Frontend:** $(curl -s -I "$DEV_URL" | head -1 || echo "ERROR")  
**API Health:** $(curl -s "$HEALTH_URL" || echo "CONNECTION_ERROR")

## –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

1. **SSH –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ GitHub Secrets**
   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ \`DEV_SSH_PRIVATE_KEY\` –≤ Settings ‚Üí Secrets and variables ‚Üí Actions

2. **GitHub Actions workflow –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π**
   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ GitHub ‚Üí Actions ‚Üí –ø–æ—Å–ª–µ–¥–Ω–∏–π workflow run

3. **Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å**
   - –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–∑–∞–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è

4. **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**
   - PostgreSQL –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ \`host.docker.internal:5432\`

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GitHub Actions –ª–æ–≥–∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ SSH –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç

## –§–∞–π–ª—ã –¥–µ–ø–ª–æ—è

- [ ] .github/workflows/deploy-dev.yml
- [ ] deploy/quick-deploy-dev.sh  
- [ ] deploy/github-actions-secrets.md
- [ ] deploy/DEV_DEPLOYMENT_GUIDE.md

EOF

    success "–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: $REPORT_FILE"
}

# =============================================================================
# –û–°–ù–û–í–ù–û–ô –ü–†–û–¶–ï–°–°
# =============================================================================

main() {
    log "üîç –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞ –¥–µ–ø–ª–æ—è"
    
    check_git_status
    echo ""
    
    check_deployment_files  
    echo ""
    
    check_dev_site_status
    echo ""
    
    check_github_actions_requirements
    echo ""
    
    simulate_docker_commands
    echo ""
    
    generate_debug_report
    echo ""
    
    success "üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo ""
    echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GitHub Actions –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"
    echo "2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ DEV_SSH_PRIVATE_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Secrets"  
    echo "3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É: ./deploy/test-deploy-local.sh --wait"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ "$1" = "--wait" ]; then
    main
    wait_and_recheck
elif [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
    echo "–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞ –¥–µ–ø–ª–æ—è dev –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  --wait     –û–∂–∏–¥–∞—Ç—å 2 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É"  
    echo "  --help, -h –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    exit 0
else
    main
fi