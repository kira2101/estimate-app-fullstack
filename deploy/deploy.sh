#!/bin/bash

# =============================================================================
# Deploy Script for Estimate Management Application
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä
# =============================================================================

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PROJECT_PATH="/var/www/estimate-app"
DOCKER_COMPOSE_FILE="$PROJECT_PATH/docker-compose.yml"
ENV_FILE="$PROJECT_PATH/.env"
BACKUP_DIR="$PROJECT_PATH/backups"
COMMIT_SHA=${1:-"latest"}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# =============================================================================
# –§–£–ù–ö–¶–ò–ò
# =============================================================================

check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

create_directories() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p "$PROJECT_PATH/logs"
    mkdir -p "$PROJECT_PATH/ssl"
    mkdir -p "$BACKUP_DIR"
    mkdir -p "$PROJECT_PATH/sql_init"
    
    success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

check_postgres() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL –Ω–∞ —Ö–æ—Å—Ç–µ
    if systemctl is-active --quiet postgresql; then
        success "PostgreSQL –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Ö–æ—Å—Ç–µ"
        POSTGRES_EXTERNAL=true
    elif docker ps | grep -q postgres; then
        success "PostgreSQL –∑–∞–ø—É—â–µ–Ω –≤ Docker"
        POSTGRES_EXTERNAL=false
    else
        warning "PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
        POSTGRES_EXTERNAL=false
    fi
}

backup_database() {
    if [ "$POSTGRES_EXTERNAL" = true ]; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        
        BACKUP_FILE="$BACKUP_DIR/db_backup_$(date +%Y%m%d_%H%M%S).sql"
        
        if su - postgres -c "pg_dump estimate_app_db" > "$BACKUP_FILE" 2>/dev/null; then
            success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $BACKUP_FILE"
        else
            warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        fi
    fi
}

load_docker_images() {
    log "–ó–∞–≥—Ä—É–∑–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    if [ -f "$PROJECT_PATH/backend-image.tar" ]; then
        docker load < "$PROJECT_PATH/backend-image.tar"
        success "Backend –æ–±—Ä–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω"
    else
        warning "Backend –æ–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    if [ -f "$PROJECT_PATH/frontend-image.tar" ]; then
        docker load < "$PROJECT_PATH/frontend-image.tar"
        success "Frontend –æ–±—Ä–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω"
    else
        warning "Frontend –æ–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

stop_old_containers() {
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    if [ -f "$DOCKER_COMPOSE_FILE" ]; then
        docker-compose -f "$DOCKER_COMPOSE_FILE" down --remove-orphans --volumes || true
        success "–°—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        warning "Docker Compose —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ—Ç–µ–π
    log "–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö Docker —Å–µ—Ç–µ–π..."
    docker network prune -f || true
    success "–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ç–∏ —É–¥–∞–ª–µ–Ω—ã"
}

start_new_containers() {
    log "–ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    cd "$PROJECT_PATH"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    PROFILES=""
    if [ "$POSTGRES_EXTERNAL" = false ]; then
        PROFILES="--profile new-db"
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker-compose -f "$DOCKER_COMPOSE_FILE" $PROFILES up -d
    
    success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

wait_for_services() {
    log "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ backend
    for i in {1..60}; do
        if docker exec estimate-backend curl -f http://localhost:8000/api/v1/statuses/ > /dev/null 2>&1; then
            success "Backend –∑–∞–ø—É—â–µ–Ω"
            break
        fi
        
        if [ $i -eq 60 ]; then
            error "Backend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥"
        fi
        
        sleep 1
    done
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ frontend
    for i in {1..30}; do
        if docker exec estimate-frontend curl -f http://localhost:80 > /dev/null 2>&1; then
            success "Frontend –∑–∞–ø—É—â–µ–Ω"
            break
        fi
        
        if [ $i -eq 30 ]; then
            error "Frontend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥"
        fi
        
        sleep 1
    done
}

run_migrations() {
    log "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    if docker exec estimate-backend python manage.py migrate; then
        success "–ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    else
        error "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"
    fi
}

collect_static() {
    log "–°–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤..."
    
    if docker exec estimate-backend python manage.py collectstatic --noinput; then
        success "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã"
    else
        warning "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"
    fi
}

cleanup_old_images() {
    log "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    docker image prune -f > /dev/null 2>&1 || true
    docker system prune -f > /dev/null 2>&1 || true
    
    success "–°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã"
}

health_check() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    if curl -f http://localhost/api/v1/statuses/ > /dev/null 2>&1; then
        success "API —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        error "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
    if curl -f http://localhost/ > /dev/null 2>&1; then
        success "Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        error "Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
}

# =============================================================================
# –û–°–ù–û–í–ù–û–ô –ü–†–û–¶–ï–°–° –î–ï–ü–õ–û–Ø
# =============================================================================

main() {
    log "üöÄ –ù–∞—á–∞–ª–æ –¥–µ–ø–ª–æ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∫–æ–º–º–∏—Ç: $COMMIT_SHA)"
    
    check_dependencies
    create_directories
    check_postgres
    backup_database
    load_docker_images
    stop_old_containers
    start_new_containers
    wait_for_services
    run_migrations
    collect_static
    cleanup_old_images
    health_check
    
    success "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    log "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://$(hostname -I | awk '{print $1}')"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
if [ "$EUID" -ne 0 ]; then 
    error "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ root"
fi

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
main "$@"