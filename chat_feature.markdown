# Функция чата между прорабами и менеджером в приложении для строительных смет

## Описание
Функция чата позволяет прорабам и менеджерам общаться в реальном времени для обсуждения запросов на изменение цен или других вопросов, связанных со сметами. Чат интегрируется в существующее Django-приложение как отдельный пункт меню, обеспечивая удобное взаимодействие без дублирования функционала одобрения цен. Реализация использует Django Channels для поддержки real-time общения.

## Цели
- Создать интерфейс чата, доступный через отдельный пункт меню.
- Обеспечить обмен сообщениями между прорабом и менеджером в контексте конкретной сметы или запроса на изменение цены.
- Хранить историю переписки для аудита и последующего просмотра.
- Уведомлять пользователей о новых сообщениях.

## Модели данных
### Новая модель
- **ChatRoom (Комната чата)**:
  - Поля:
    - `id` (AutoField, primary_key=True)
    - `estimate` (ForeignKey к Estimate, null=True, on_delete=CASCADE) — связь с конкретной сметой (опционально, если чат общий).
    - `price_change_request` (ForeignKey к PriceChangeRequest, null=True, on_delete=CASCADE) — связь с запросом на изменение цены (опционально).
    - `participants` (ManyToManyField к User) — прораб и менеджер(ы).
    - `created_at` (DateTimeField, auto_now_add=True)
  - Назначение: Определяет контекст чата (смета или запрос) и участников.

- **ChatMessage (Сообщение в чате)**:
  - Поля:
    - `id` (AutoField, primary_key=True)
    - `chat_room` (ForeignKey к ChatRoom, on_delete=CASCADE)
    - `sender` (ForeignKey к User, on_delete=CASCADE)
    - `content` (TextField) — текст сообщения
    - `timestamp` (DateTimeField, auto_now_add=True)
    - `is_read` (BooleanField, default=False) — флаг прочтения
  - Назначение: Хранит сообщения и их метаданные.

### Signals
- При создании `ChatRoom`: автоматически добавлять прораба и менеджера в `participants`.
- При создании `ChatMessage`: отправлять уведомление получателю (email или in-app via Django Channels).

## Логика и интерфейс
### Пункт меню
- Добавить в главное меню пункт "Чат" (ссылка на ListView для `ChatRoom`).
- Доступ: Прорабы видят только свои чаты, менеджеры — все чаты, где они участники.
- Реализация: Добавить в шаблон навигации (`base.html`) ссылку `<a href="{% url 'chat_list' %}">Чат</a>`.

### Для прораба
1. **Список чатов (ListView для ChatRoom)**:
   - Таблица: связанные сметы/запросы, участники, последнее сообщение, количество непрочитанных сообщений.
   - Фильтр: только чаты, где пользователь в `participants`.
   - Подсветка: жёлтый фон для чатов с непрочитанными сообщениями (CSS: `bg-warning`).
   - Кнопка: "Создать чат" (для новой сметы или запроса).

2. **Создание чата (CreateView для ChatRoom)**:
   - Форма: выбор сметы или запроса (опционально), выбор менеджера (dropdown с пользователями, у которых есть permission `change_pricechangerequest`).
   - После создания: перенаправление в чат (DetailView).

3. **Интерфейс чата (DetailView для ChatRoom)**:
   - Отображение: список сообщений (`ChatMessage`) с сортировкой по `timestamp`.
   - Форма ввода: текстовое поле и кнопка "Отправить" (WebSocket для отправки через Django Channels).
   - Подсветка: сообщения отправителя — справа, получателя — слева (CSS: flexbox).
   - Автообновление: WebSocket для получения новых сообщений в реальном времени.
   - Пометка прочитанных: при открытии чата отметить сообщения как `is_read=True` (via AJAX или WebSocket).

### Для менеджера
1. **Список чатов (ListView для ChatRoom)**:
   - Аналогично прорабу, но менеджер видит все чаты, где он участник.
   - Фильтры: по смете, прорабу, статусу запроса.
   - Кнопка: "Присоединиться к чату" (если менеджер добавляется в существующий чат).

2. **Интерфейс чата (DetailView для ChatRoom)**:
   - Те же функции, что у прораба: список сообщений, форма отправки, автообновление.
   - Дополнительно: ссылка на связанный запрос на изменение цены (если есть) для быстрого перехода к обработке.

## Уведомления
- **Прораб и менеджер**:
  - In-app: подсветка чатов с непрочитанными сообщениями в списке.
  - Всплывающие уведомления (Django messages) при новом сообщении.
  - Email: отправка через celery при новом сообщении (если пользователь оффлайн).
- Реализация: Использовать Django Channels для real-time уведомлений, signals для email.

## Шаблоны
- **Список чатов (chat_list.html)**:
  - Таблица с Bootstrap: колонки для сметы/запроса, участников, последнего сообщения, непрочитанных.
  - Кнопка создания чата (модал с формой).
- **Интерфейс чата (chat_detail.html)**:
  - Контейнер для сообщений (flexbox для выравнивания).
  - Форма ввода (textarea + кнопка).
  - WebSocket-скрипт для real-time обновлений (Consumer в Channels).
- Интеграция в `base.html`: Добавить пункт меню "Чат".

## Техническая реализация
- **Django Channels**:
  - Установить `channels` и `channels-redis`.
  - Настроить Consumer для обработки сообщений (асинхронный exchange через WebSocket).
  - Routing: `ws://chat/<room_id>/` для подключения к комнате.
- **JavaScript**:
  - Подключить WebSocket в шаблоне `chat_detail.html`.
  - Обрабатывать отправку/получение сообщений, обновлять UI.
- **База данных**:
  - Индексы на `ChatMessage.timestamp` и `ChatRoom.participants` для оптимизации.
- **Масштабируемость**:
  - Пагинация сообщений в чате (загружать последние 50, подгружать при скролле).
  - Кэширование списка чатов (Django cache framework).

## Безопасность
- **Permissions**:
  - Прораб: создавать чаты (`add_chatroom`), отправлять сообщения (`add_chatmessage`).
  - Менеджер: присоединяться к чатам, отправлять сообщения.
- Проверка: Ограничивать доступ к `ChatRoom` по `participants`.
- Логирование: Использовать django-auditlog для записи создания чатов и сообщений.

## Тестирование
- **Unit-тесты**: Модели (`ChatRoom`, `ChatMessage`), signals.
- **Functional-тесты**: Создание чата, отправка/получение сообщений, уведомления.
- **WebSocket-тесты**: Проверка real-time обновлений (использовать `channels.testing`).
- **UI-тесты**: Подсветка, модалы, отправка сообщений.

## Интеграция
- Добавить пункт меню в существующий интерфейс.
- Связать чаты с существующими моделями `Estimate` и `PriceChangeRequest`.
- Использовать signals для синхронизации уведомлений с функцией одобрения цен.