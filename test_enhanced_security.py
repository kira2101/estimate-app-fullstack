#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è —É—Å–∏–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import sys
import os
sys.path.append('/home/kira/PycharmProjects/Estiamate_app_Gemeni/backend')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

import requests
import json
import time

def test_enhanced_security_system():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    print("üîí –¢–ï–°–¢: –£—Å–∏–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    print("=" * 60)
    
    base_url = "http://127.0.0.1:8000/api/v1"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    print("1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    manager_response = requests.post(f"{base_url}/auth/login/", 
                                   json={"email": "manager@example.com", "password": "password123"})
    foreman_response = requests.post(f"{base_url}/auth/login/", 
                                   json={"email": "foreman@example.com", "password": "password123"})
    
    manager_token = manager_response.json()["token"]
    foreman_token = foreman_response.json()["token"]
    
    headers_manager = {"Authorization": f"Bearer {manager_token}"}
    headers_foreman = {"Authorization": f"Bearer {foreman_token}"}
    
    print("‚úÖ –¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    print("2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤...")
    users = requests.get(f"{base_url}/users/", headers=headers_manager).json()
    foreman_user = next(u for u in users if u["email"] == "foreman@example.com")
    
    projects = requests.get(f"{base_url}/projects/", headers=headers_manager).json()
    statuses = requests.get(f"{base_url}/statuses/", headers=headers_manager).json()
    
    project_id = projects[0]["project_id"]
    draft_status = next(s for s in statuses if s["status_name"] == "–ß–µ—Ä–Ω–æ–≤–∏–∫")
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
    
    # –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã
    print("\nüìù –¢–ï–°–¢ 1: –ê—É–¥–∏—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
    
    # –ù–∞—Ö–æ–¥–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –µ–≥–æ –∫–∞–∫ –ø—Ä–æ—Ä–∞–±–∞ (—Å–æ–∑–¥–∞–µ–º —Å–º–µ—Ç—É –ù–ï –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ä–∞–±–∞)
    manager_user = next(u for u in users if u["email"] == "manager@example.com")
    
    estimate_data = {
        "project_id": project_id,
        "status_id": draft_status["status_id"],
        "foreman_id": manager_user["user_id"],  # –ù–∞–∑–Ω–∞—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Ä–∞–±–æ–º
        "estimate_number": "–¢–ï–°–¢_–ê—É–¥–∏—Ç_–°–æ–∑–¥–∞–Ω–∏—è",
        "items": []
    }
    
    response = requests.post(f"{base_url}/estimates/", json=estimate_data, headers=headers_manager)
    if response.status_code in [200, 201]:
        estimate = response.json()
        estimate_id = estimate["estimate_id"]
        print(f"‚úÖ –°–º–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –∞—É–¥–∏—Ç–æ–º: {estimate_id}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã: {response.text}")
        return False
    
    # –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    print("\nüö® –¢–ï–°–¢ 2: –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–æ–π —Å–º–µ—Ç–µ (–ø—Ä–æ—Ä–∞–± –∫ —Å–º–µ—Ç–µ, –≥–¥–µ –ø—Ä–æ—Ä–∞–±–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä)
    try:
        response = requests.get(f"{base_url}/estimates/{estimate_id}/", headers=headers_foreman)
        if response.status_code == 200:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!")
            return False
        else:
            print("‚úÖ –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–æ–ø—ã—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚úÖ –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {e}")
    
    # –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã
    print("\nüìù –¢–ï–°–¢ 3: –ê—É–¥–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã")
    
    update_data = {
        "project_id": project_id,
        "status_id": draft_status["status_id"],
        "foreman_id": foreman_user["user_id"],
        "estimate_number": "–¢–ï–°–¢_–ê—É–¥–∏—Ç_–ò–∑–º–µ–Ω–µ–Ω–∏—è_–û–ë–ù–û–í–õ–ï–ù–û",
        "items": []
    }
    
    response = requests.put(f"{base_url}/estimates/{estimate_id}/", json=update_data, headers=headers_manager)
    if response.status_code == 200:
        print("‚úÖ –°–º–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å –∞—É–¥–∏—Ç–æ–º")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã: {response.text}")
    
    # –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ä–∞–±–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞)
    print("\nüë• –¢–ï–°–¢ 4: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ä–∞–±–∞")
    
    response = requests.get(f"{base_url}/estimates/{estimate_id}/", headers=headers_manager)
    details = response.json()
    assigned_foreman_id = details["foreman"]["user_id"] if isinstance(details["foreman"], dict) else details["foreman"]
    
    if assigned_foreman_id == foreman_user["user_id"]:
        print("‚úÖ –ü—Ä–æ—Ä–∞–± –Ω–∞–∑–Ω–∞—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
    else:
        print(f"‚ùå –ü—Ä–æ—Ä–∞–± –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {assigned_foreman_id} != {foreman_user['user_id']}")
        return False
    
    # –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–º–µ—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ä–∞–±–∞
    print("\nüîì –¢–ï–°–¢ 5: –î–æ—Å—Ç—É–ø –ø—Ä–æ—Ä–∞–±–∞ –∫ —Å–≤–æ–µ–π —Å–º–µ—Ç–µ")
    
    foreman_estimates = requests.get(f"{base_url}/estimates/", headers=headers_foreman).json()
    estimate_ids = [e["estimate_id"] for e in foreman_estimates]
    
    if estimate_id in estimate_ids:
        print("‚úÖ –ü—Ä–æ—Ä–∞–± –≤–∏–¥–∏—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –µ–º—É —Å–º–µ—Ç—É")
    else:
        print("‚ùå –ü—Ä–æ—Ä–∞–± –ù–ï –≤–∏–¥–∏—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –µ–º—É —Å–º–µ—Ç—É")
        return False
    
    # –¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è
    print("\nüóëÔ∏è –¢–ï–°–¢ 6: –ê—É–¥–∏—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã")
    
    response = requests.delete(f"{base_url}/estimates/{estimate_id}/", headers=headers_manager)
    if response.status_code == 204:
        print("‚úÖ –°–º–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ —Å –∞—É–¥–∏—Ç–æ–º")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–º–µ—Ç—ã: {response.text}")
    
    # –¢–ï–°–¢ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting (–±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç)
    print("\n‚ö° –¢–ï–°–¢ 7: –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ rate limiting")
    
    # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    for i in range(5):
        response = requests.get(f"{base_url}/statuses/", headers=headers_foreman)
        if response.status_code == 429:  # Too Many Requests
            print("‚úÖ Rate limiting –∞–∫—Ç–∏–≤–µ–Ω")
            break
    else:
        print("‚ö†Ô∏è  Rate limiting –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–≤–æ–∑–º–æ–∂–Ω–æ, –ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)")
    
    print("\n" + "=" * 60)
    print("üéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ò–õ–ï–ù–ù–û–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´!")
    print("‚úÖ –ê—É–¥–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–æ")
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ä–∞–±–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
    print("‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ —É—Å–∏–ª–µ–Ω")
    
    return True

def check_log_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"""
    
    print("\nüìÑ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –õ–û–ì–û–í:")
    
    log_files = ['security.log', 'audit.log']
    
    for log_file in log_files:
        if os.path.exists(log_file):
            size = os.path.getsize(log_file)
            print(f"‚úÖ {log_file}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–∞–∑–º–µ—Ä {size} bytes")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            if size > 0:
                with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                    lines = f.readlines()
                    if lines:
                        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {lines[-1].strip()}")
        else:
            print(f"‚ö†Ô∏è  {log_file}: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    try:
        response = requests.get("http://127.0.0.1:8000/api/v1/statuses/", timeout=2)
        server_running = True
    except:
        server_running = False
    
    if not server_running:
        print("‚ùå Django —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: cd backend && python manage.py runserver")
        sys.exit(1)
    
    success = test_enhanced_security_system()
    check_log_files()
    
    sys.exit(0 if success else 1)